{
    "sourceFile": "trustaSitter-backend/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 54,
            "patches": [
                {
                    "date": 1751539489446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751540132148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,28 +26,11 @@\n app.use(express.json());\r\n app.use(cors());\r\n \r\n /* -----------------------------------\r\n-   Addmin Routes\r\n+   Admin Routes\r\n ----------------------------------- */\r\n-// Import dependencies\r\n-const express = require(\"express\");\r\n-const bcrypt = require(\"bcrypt\");\r\n-const jwt = require(\"jsonwebtoken\");\r\n-const { Pool } = require(\"pg\");\r\n-const app = express();\r\n \r\n-// Enable JSON parsing\r\n-app.use(express.json());\r\n-\r\n-// Database connection\r\n-const pool = new Pool({\r\n-  connectionString: process.env.DATABASE_URL,\r\n-});\r\n-\r\n-// JWT secret key\r\n-const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key_here\";\r\n-\r\n /**\r\n  * Admin Login Endpoint\r\n  * POST /api/admin/login\r\n  * Request Body: { email, password }\r\n@@ -97,8 +80,96 @@\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n+/**\r\n+ * Admin Summary Endpoint\r\n+ * GET /api/admin/summary\r\n+ * Response: { usersCount, babysittersCount, bookingsCount, pendingBookings }\r\n+ */\r\n+app.get(\"/api/admin/summary\", async (req, res) => {\r\n+  try {\r\n+    const usersResult = await pool.query(\"SELECT COUNT(*) FROM users\");\r\n+    const usersCount = parseInt(usersResult.rows[0].count);\r\n+\r\n+    const babysittersResult = await pool.query(\"SELECT COUNT(*) FROM babysitters\");\r\n+    const babysittersCount = parseInt(babysittersResult.rows[0].count);\r\n+\r\n+    const bookingsResult = await pool.query(\"SELECT COUNT(*) FROM bookings\");\r\n+    const bookingsCount = parseInt(bookingsResult.rows[0].count);\r\n+\r\n+    const pendingResult = await pool.query(\r\n+      \"SELECT COUNT(*) FROM bookings WHERE status = 'pending'\"\r\n+    );\r\n+    const pendingBookings = parseInt(pendingResult.rows[0].count);\r\n+\r\n+    res.json({\r\n+      usersCount,\r\n+      babysittersCount,\r\n+      bookingsCount,\r\n+      pendingBookings,\r\n+    });\r\n+  } catch (err) {\r\n+    console.error(\"Admin summary error:\", err);\r\n+    res.status(500).json({ message: \"Internal server error\" });\r\n+  }\r\n+});\r\n+\r\n+/**\r\n+ * Admin Bookings Endpoint\r\n+ * GET /api/admin/bookings\r\n+ * Response: array of bookings with client and babysitter names\r\n+ */\r\n+app.get(\"/api/admin/bookings\", async (req, res) => {\r\n+  try {\r\n+    const result = await pool.query(`\r\n+      SELECT\r\n+        b.id,\r\n+        b.date,\r\n+        b.time_start,\r\n+        b.time_end,\r\n+        b.status,\r\n+        u.name AS client_name,\r\n+        s.name AS babysitter_name\r\n+      FROM bookings b\r\n+      JOIN users u ON b.user_id = u.id\r\n+      JOIN babysitters s ON b.babysitter_id = s.id\r\n+      ORDER BY b.date DESC\r\n+    `);\r\n+\r\n+    res.json(result.rows);\r\n+  } catch (err) {\r\n+    console.error(\"Admin bookings error:\", err);\r\n+    res.status(500).json({ message: \"Internal server error\" });\r\n+  }\r\n+});\r\n+\r\n+/**\r\n+ * Admin Users Endpoint\r\n+ * GET /api/admin/users\r\n+ * Response: array of users and babysitters\r\n+ */\r\n+app.get(\"/api/admin/users\", async (req, res) => {\r\n+  try {\r\n+    const usersResult = await pool.query(`\r\n+      SELECT id, name, email, 'client' AS role, created_at\r\n+      FROM users\r\n+    `);\r\n+\r\n+    const babysittersResult = await pool.query(`\r\n+      SELECT id, name, email, 'babysitter' AS role, created_at\r\n+      FROM babysitters\r\n+    `);\r\n+\r\n+    const combined = [...usersResult.rows, ...babysittersResult.rows];\r\n+\r\n+    res.json(combined);\r\n+  } catch (err) {\r\n+    console.error(\"Admin users error:\", err);\r\n+    res.status(500).json({ message: \"Internal server error\" });\r\n+  }\r\n+});\r\n+\r\n /* -----------------------------------\r\n    Babysitters Routes\r\n ----------------------------------- */\r\n \r\n"
                },
                {
                    "date": 1751540492233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,35 @@\n /* -----------------------------------\r\n    Admin Routes\r\n ----------------------------------- */\r\n \r\n+// Import dependencies\r\n+const express = require(\"express\");\r\n+const cors = require(\"cors\");\r\n+const bcrypt = require(\"bcrypt\");\r\n+const jwt = require(\"jsonwebtoken\");\r\n+const { Pool } = require(\"pg\");\r\n+\r\n+// Initialize Express app\r\n+const app = express();\r\n+\r\n+// Enable CORS and JSON parsing\r\n+app.use(cors());\r\n+app.use(express.json());\r\n+\r\n+// PostgreSQL connection\r\n+const pool = new Pool({\r\n+  connectionString: process.env.DATABASE_URL,\r\n+});\r\n+\r\n+// JWT secret key\r\n+const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key_here\";\r\n+\r\n+// Test endpoint to verify API is working\r\n+app.get(\"/test\", (req, res) => {\r\n+  res.send(\"API is working!\");\r\n+});\r\n+\r\n /**\r\n  * Admin Login Endpoint\r\n  * POST /api/admin/login\r\n  * Request Body: { email, password }\r\n@@ -48,26 +75,22 @@\n     }\r\n \r\n     const admin = result.rows[0];\r\n \r\n-    // Compare provided password with stored hash\r\n+    // Compare password\r\n     const validPassword = await bcrypt.compare(password, admin.password);\r\n     if (!validPassword) {\r\n       return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n \r\n     // Generate JWT token\r\n     const token = jwt.sign(\r\n-      {\r\n-        id: admin.id,\r\n-        email: admin.email,\r\n-        role: \"admin\",\r\n-      },\r\n+      { id: admin.id, email: admin.email, role: \"admin\" },\r\n       JWT_SECRET,\r\n       { expiresIn: \"8h\" }\r\n     );\r\n \r\n-    // Return token and admin data\r\n+    // Return token and user data\r\n     res.json({\r\n       token,\r\n       user: {\r\n         id: admin.id,\r\n@@ -82,32 +105,23 @@\n });\r\n \r\n /**\r\n  * Admin Summary Endpoint\r\n- * GET /api/admin/summary\r\n- * Response: { usersCount, babysittersCount, bookingsCount, pendingBookings }\r\n  */\r\n app.get(\"/api/admin/summary\", async (req, res) => {\r\n   try {\r\n     const usersResult = await pool.query(\"SELECT COUNT(*) FROM users\");\r\n-    const usersCount = parseInt(usersResult.rows[0].count);\r\n-\r\n     const babysittersResult = await pool.query(\"SELECT COUNT(*) FROM babysitters\");\r\n-    const babysittersCount = parseInt(babysittersResult.rows[0].count);\r\n-\r\n     const bookingsResult = await pool.query(\"SELECT COUNT(*) FROM bookings\");\r\n-    const bookingsCount = parseInt(bookingsResult.rows[0].count);\r\n-\r\n     const pendingResult = await pool.query(\r\n       \"SELECT COUNT(*) FROM bookings WHERE status = 'pending'\"\r\n     );\r\n-    const pendingBookings = parseInt(pendingResult.rows[0].count);\r\n \r\n     res.json({\r\n-      usersCount,\r\n-      babysittersCount,\r\n-      bookingsCount,\r\n-      pendingBookings,\r\n+      usersCount: parseInt(usersResult.rows[0].count),\r\n+      babysittersCount: parseInt(babysittersResult.rows[0].count),\r\n+      bookingsCount: parseInt(bookingsResult.rows[0].count),\r\n+      pendingBookings: parseInt(pendingResult.rows[0].count),\r\n     });\r\n   } catch (err) {\r\n     console.error(\"Admin summary error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n@@ -115,10 +129,8 @@\n });\r\n \r\n /**\r\n  * Admin Bookings Endpoint\r\n- * GET /api/admin/bookings\r\n- * Response: array of bookings with client and babysitter names\r\n  */\r\n app.get(\"/api/admin/bookings\", async (req, res) => {\r\n   try {\r\n     const result = await pool.query(`\r\n@@ -144,10 +156,8 @@\n });\r\n \r\n /**\r\n  * Admin Users Endpoint\r\n- * GET /api/admin/users\r\n- * Response: array of users and babysitters\r\n  */\r\n app.get(\"/api/admin/users\", async (req, res) => {\r\n   try {\r\n     const usersResult = await pool.query(`\r\n@@ -160,16 +170,20 @@\n       FROM babysitters\r\n     `);\r\n \r\n     const combined = [...usersResult.rows, ...babysittersResult.rows];\r\n-\r\n     res.json(combined);\r\n   } catch (err) {\r\n     console.error(\"Admin users error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n+// Start the server\r\n+app.listen(3000, () => {\r\n+  console.log(\"Server is running on port 3000\");\r\n+});\r\n+\r\n /* -----------------------------------\r\n    Babysitters Routes\r\n ----------------------------------- */\r\n \r\n"
                },
                {
                    "date": 1751540756358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,15 +29,8 @@\n /* -----------------------------------\r\n    Admin Routes\r\n ----------------------------------- */\r\n \r\n-// Import dependencies\r\n-const express = require(\"express\");\r\n-const cors = require(\"cors\");\r\n-const bcrypt = require(\"bcrypt\");\r\n-const jwt = require(\"jsonwebtoken\");\r\n-const { Pool } = require(\"pg\");\r\n-\r\n // Initialize Express app\r\n const app = express();\r\n \r\n // Enable CORS and JSON parsing\r\n"
                },
                {
                    "date": 1751540970205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,29 +28,8 @@\n \r\n /* -----------------------------------\r\n    Admin Routes\r\n ----------------------------------- */\r\n-\r\n-// Initialize Express app\r\n-const app = express();\r\n-\r\n-// Enable CORS and JSON parsing\r\n-app.use(cors());\r\n-app.use(express.json());\r\n-\r\n-// PostgreSQL connection\r\n-const pool = new Pool({\r\n-  connectionString: process.env.DATABASE_URL,\r\n-});\r\n-\r\n-// JWT secret key\r\n-const JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key_here\";\r\n-\r\n-// Test endpoint to verify API is working\r\n-app.get(\"/test\", (req, res) => {\r\n-  res.send(\"API is working!\");\r\n-});\r\n-\r\n /**\r\n  * Admin Login Endpoint\r\n  * POST /api/admin/login\r\n  * Request Body: { email, password }\r\n@@ -59,31 +38,30 @@\n app.post(\"/api/admin/login\", async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n-    // Check if the admin exists\r\n-    const result = await pool.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n+    // Find admin by email\r\n+    const result = await db.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n \r\n     if (result.rows.length === 0) {\r\n       return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n \r\n     const admin = result.rows[0];\r\n \r\n-    // Compare password\r\n+    // Compare password hash\r\n     const validPassword = await bcrypt.compare(password, admin.password);\r\n     if (!validPassword) {\r\n       return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n \r\n-    // Generate JWT token\r\n+    // Generate JWT\r\n     const token = jwt.sign(\r\n       { id: admin.id, email: admin.email, role: \"admin\" },\r\n-      JWT_SECRET,\r\n+      process.env.JWT_SECRET,\r\n       { expiresIn: \"8h\" }\r\n     );\r\n \r\n-    // Return token and user data\r\n     res.json({\r\n       token,\r\n       user: {\r\n         id: admin.id,\r\n@@ -98,23 +76,32 @@\n });\r\n \r\n /**\r\n  * Admin Summary Endpoint\r\n+ * GET /api/admin/summary\r\n+ * Response: { usersCount, babysittersCount, bookingsCount, pendingBookings }\r\n  */\r\n app.get(\"/api/admin/summary\", async (req, res) => {\r\n   try {\r\n-    const usersResult = await pool.query(\"SELECT COUNT(*) FROM users\");\r\n-    const babysittersResult = await pool.query(\"SELECT COUNT(*) FROM babysitters\");\r\n-    const bookingsResult = await pool.query(\"SELECT COUNT(*) FROM bookings\");\r\n-    const pendingResult = await pool.query(\r\n+    const usersResult = await db.query(\"SELECT COUNT(*) FROM users\");\r\n+    const usersCount = parseInt(usersResult.rows[0].count);\r\n+\r\n+    const babysittersResult = await db.query(\"SELECT COUNT(*) FROM babysitters\");\r\n+    const babysittersCount = parseInt(babysittersResult.rows[0].count);\r\n+\r\n+    const bookingsResult = await db.query(\"SELECT COUNT(*) FROM bookings\");\r\n+    const bookingsCount = parseInt(bookingsResult.rows[0].count);\r\n+\r\n+    const pendingResult = await db.query(\r\n       \"SELECT COUNT(*) FROM bookings WHERE status = 'pending'\"\r\n     );\r\n+    const pendingBookings = parseInt(pendingResult.rows[0].count);\r\n \r\n     res.json({\r\n-      usersCount: parseInt(usersResult.rows[0].count),\r\n-      babysittersCount: parseInt(babysittersResult.rows[0].count),\r\n-      bookingsCount: parseInt(bookingsResult.rows[0].count),\r\n-      pendingBookings: parseInt(pendingResult.rows[0].count),\r\n+      usersCount,\r\n+      babysittersCount,\r\n+      bookingsCount,\r\n+      pendingBookings,\r\n     });\r\n   } catch (err) {\r\n     console.error(\"Admin summary error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n@@ -122,12 +109,14 @@\n });\r\n \r\n /**\r\n  * Admin Bookings Endpoint\r\n+ * GET /api/admin/bookings\r\n+ * Response: array of bookings with client and babysitter names\r\n  */\r\n app.get(\"/api/admin/bookings\", async (req, res) => {\r\n   try {\r\n-    const result = await pool.query(`\r\n+    const result = await db.query(`\r\n       SELECT\r\n         b.id,\r\n         b.date,\r\n         b.time_start,\r\n@@ -149,33 +138,32 @@\n });\r\n \r\n /**\r\n  * Admin Users Endpoint\r\n+ * GET /api/admin/users\r\n+ * Response: array of users and babysitters\r\n  */\r\n app.get(\"/api/admin/users\", async (req, res) => {\r\n   try {\r\n-    const usersResult = await pool.query(`\r\n+    const usersResult = await db.query(`\r\n       SELECT id, name, email, 'client' AS role, created_at\r\n       FROM users\r\n     `);\r\n \r\n-    const babysittersResult = await pool.query(`\r\n+    const babysittersResult = await db.query(`\r\n       SELECT id, name, email, 'babysitter' AS role, created_at\r\n       FROM babysitters\r\n     `);\r\n \r\n     const combined = [...usersResult.rows, ...babysittersResult.rows];\r\n+\r\n     res.json(combined);\r\n   } catch (err) {\r\n     console.error(\"Admin users error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-// Start the server\r\n-app.listen(3000, () => {\r\n-  console.log(\"Server is running on port 3000\");\r\n-});\r\n \r\n /* -----------------------------------\r\n    Babysitters Routes\r\n ----------------------------------- */\r\n"
                },
                {
                    "date": 1751541758356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,23 +38,29 @@\n app.post(\"/api/admin/login\", async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n+    \r\n     // Find admin by email\r\n     const result = await db.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n \r\n     if (result.rows.length === 0) {\r\n       return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n \r\n     const admin = result.rows[0];\r\n+    console.log(\"Admin found:\", admin);\r\n+    console.log(\"Password from BD:\", admin.password);\r\n+    console.log(\"Compating with:\", password)\r\n \r\n     // Compare password hash\r\n     const validPassword = await bcrypt.compare(password, admin.password);\r\n+    console.log(\"Password match result:\", validPassword);\r\n+\r\n     if (!validPassword) {\r\n       return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n-\r\n+    \r\n     // Generate JWT\r\n     const token = jwt.sign(\r\n       { id: admin.id, email: admin.email, role: \"admin\" },\r\n       process.env.JWT_SECRET,\r\n"
                },
                {
                    "date": 1751541912155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,10 @@\n     \r\n     // Find admin by email\r\n     const result = await db.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n \r\n+    console.log(Query result:\", result.rows);\r\n+\r\n     if (result.rows.length === 0) {\r\n       return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n \r\n"
                },
                {
                    "date": 1751541926560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     \r\n     // Find admin by email\r\n     const result = await db.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n \r\n-    console.log(Query result:\", result.rows);\r\n+    console.log(\"Query result:\", result.rows);\r\n \r\n     if (result.rows.length === 0) {\r\n       return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n"
                },
                {
                    "date": 1751543006648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,27 @@\n app.post(\"/api/admin/login\", async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n+     // Check if admin with this email already exists\r\n+    const existing = await db.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n+    if (existing.rows.length > 0) {\r\n+      return res.status(400).json({ message: \"Admin with this email already exists\" });\r\n+    }\r\n+\r\n+    // Hash the password\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+\r\n+    // Insert new admin\r\n+    await db.query(\r\n+      \"INSERT INTO admins (name, email, password) VALUES ($1, $2, $3)\",\r\n+      [name, email, hashedPassword]\r\n+    );\r\n+\r\n+    res.json({ message: \"Admin created successfully\" });\r\n+  } catch (err) {\r\n+    console.error(\"Admin register error:\", err);\r\n+    res.status(500).json({ message: \"Internal server error\" });\r\n     \r\n     // Find admin by email\r\n     const result = await db.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n \r\n"
                },
                {
                    "date": 1751543023629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,8 +57,10 @@\n     res.json({ message: \"Admin created successfully\" });\r\n   } catch (err) {\r\n     console.error(\"Admin register error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n+  }\r\n+  \r\n     \r\n     // Find admin by email\r\n     const result = await db.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n \r\n"
                },
                {
                    "date": 1751543037400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n   } catch (err) {\r\n     console.error(\"Admin register error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n-  \r\n+});\r\n     \r\n     // Find admin by email\r\n     const result = await db.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n \r\n"
                },
                {
                    "date": 1751543294313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n app.post(\"/api/admin/login\", async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n-     // Check if admin with this email already exists\r\n+    // Check if admin with this email already exists\r\n     const existing = await db.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n     if (existing.rows.length > 0) {\r\n       return res.status(400).json({ message: \"Admin with this email already exists\" });\r\n     }\r\n@@ -59,52 +59,10 @@\n     console.error(\"Admin register error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n-    \r\n-    // Find admin by email\r\n-    const result = await db.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n \r\n-    console.log(\"Query result:\", result.rows);\r\n \r\n-    if (result.rows.length === 0) {\r\n-      return res.status(401).json({ message: \"Invalid credentials\" });\r\n-    }\r\n-\r\n-    const admin = result.rows[0];\r\n-    console.log(\"Admin found:\", admin);\r\n-    console.log(\"Password from BD:\", admin.password);\r\n-    console.log(\"Compating with:\", password)\r\n-\r\n-    // Compare password hash\r\n-    const validPassword = await bcrypt.compare(password, admin.password);\r\n-    console.log(\"Password match result:\", validPassword);\r\n-\r\n-    if (!validPassword) {\r\n-      return res.status(401).json({ message: \"Invalid credentials\" });\r\n-    }\r\n-    \r\n-    // Generate JWT\r\n-    const token = jwt.sign(\r\n-      { id: admin.id, email: admin.email, role: \"admin\" },\r\n-      process.env.JWT_SECRET,\r\n-      { expiresIn: \"8h\" }\r\n-    );\r\n-\r\n-    res.json({\r\n-      token,\r\n-      user: {\r\n-        id: admin.id,\r\n-        name: admin.name,\r\n-        email: admin.email,\r\n-      },\r\n-    });\r\n-  } catch (err) {\r\n-    console.error(\"Admin login error:\", err);\r\n-    res.status(500).json({ message: \"Internal server error\" });\r\n-  }\r\n-});\r\n-\r\n /**\r\n  * Admin Summary Endpoint\r\n  * GET /api/admin/summary\r\n  * Response: { usersCount, babysittersCount, bookingsCount, pendingBookings }\r\n"
                },
                {
                    "date": 1751543311107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n  * Request Body: { email, password }\r\n  * Response: { token, user }\r\n  */\r\n app.post(\"/api/admin/login\", async (req, res) => {\r\n-  const { email, password } = req.body;\r\n+  const { name, email, password } = req.body;\r\n \r\n   try {\r\n     // Check if admin with this email already exists\r\n     const existing = await db.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n"
                },
                {
                    "date": 1751543748631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,15 +28,16 @@\n \r\n /* -----------------------------------\r\n    Admin Routes\r\n ----------------------------------- */\r\n+\r\n /**\r\n- * Admin Login Endpoint\r\n- * POST /api/admin/login\r\n- * Request Body: { email, password }\r\n- * Response: { token, user }\r\n+ * Admin Register Endpoint\r\n+ * POST /api/admin/register\r\n+ * Request Body: { name, email, password }\r\n+ * Response: { message }\r\n  */\r\n-app.post(\"/api/admin/login\", async (req, res) => {\r\n+app.post(\"/api/admin/register\", async (req, res) => {\r\n   const { name, email, password } = req.body;\r\n \r\n   try {\r\n     // Check if admin with this email already exists\r\n@@ -60,9 +61,54 @@\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n+/**\r\n+ * Admin Login Endpoint\r\n+ * POST /api/admin/login\r\n+ * Request Body: { email, password }\r\n+ * Response: { token, user }\r\n+ */\r\n+app.post(\"/api/admin/login\", async (req, res) => {\r\n+  const { email, password } = req.body;\r\n \r\n+  try {\r\n+    // Find admin by email\r\n+    const result = await db.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(401).json({ message: \"Invalid credentials\" });\r\n+    }\r\n+\r\n+    const admin = result.rows[0];\r\n+\r\n+    // Compare password hash\r\n+    const validPassword = await bcrypt.compare(password, admin.password);\r\n+    if (!validPassword) {\r\n+      return res.status(401).json({ message: \"Invalid credentials\" });\r\n+    }\r\n+\r\n+    // Generate JWT\r\n+    const token = jwt.sign(\r\n+      { id: admin.id, email: admin.email, role: \"admin\" },\r\n+      process.env.JWT_SECRET,\r\n+      { expiresIn: \"8h\" }\r\n+    );\r\n+\r\n+    res.json({\r\n+      token,\r\n+      user: {\r\n+        id: admin.id,\r\n+        name: admin.name,\r\n+        email: admin.email,\r\n+      },\r\n+    });\r\n+  } catch (err) {\r\n+    console.error(\"Admin login error:\", err);\r\n+    res.status(500).json({ message: \"Internal server error\" });\r\n+  }\r\n+});\r\n+\r\n /**\r\n  * Admin Summary Endpoint\r\n  * GET /api/admin/summary\r\n  * Response: { usersCount, babysittersCount, bookingsCount, pendingBookings }\r\n@@ -149,9 +195,8 @@\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-\r\n /* -----------------------------------\r\n    Babysitters Routes\r\n ----------------------------------- */\r\n \r\n"
                },
                {
                    "date": 1751544658199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,38 @@\n     console.error(\"Admin users error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n+/**\r\n+ * Admin Update Booking Status Endpoint\r\n+ * PUT /api/admin/bookings/:id/status\r\n+ * Request Body: { status }\r\n+ * Response: { message }\r\n+ */\r\n+app.put(\"/api/admin/bookings/:id/status\", async (req, res) => {\r\n+  const bookingId = req.params.id;\r\n+  const { status } = req.body;\r\n \r\n+  // Validate status\r\n+  const allowedStatuses = [\"pending\", \"approved\", \"cancelled\"];\r\n+  if (!allowedStatuses.includes(status)) {\r\n+    return res.status(400).json({ message: \"Invalid status value\" });\r\n+  }\r\n+\r\n+  try {\r\n+    // Update booking status in the database\r\n+    await pool.query(\r\n+      \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n+      [status, bookingId]\r\n+    );\r\n+\r\n+    res.json({ message: \"Booking status updated successfully\" });\r\n+  } catch (err) {\r\n+    console.error(\"Update booking status error:\", err);\r\n+    res.status(500).json({ message: \"Internal server error\" });\r\n+  }\r\n+});\r\n+\r\n /* -----------------------------------\r\n    Babysitters Routes\r\n ----------------------------------- */\r\n \r\n"
                },
                {
                    "date": 1751545458747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,9 +212,9 @@\n   }\r\n \r\n   try {\r\n     // Update booking status in the database\r\n-    await pool.query(\r\n+    await client.query(\r\n       \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n       [status, bookingId]\r\n     );\r\n \r\n"
                },
                {
                    "date": 1751545489154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,9 +212,9 @@\n   }\r\n \r\n   try {\r\n     // Update booking status in the database\r\n-    await client.query(\r\n+    await Client.query(\r\n       \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n       [status, bookingId]\r\n     );\r\n \r\n"
                },
                {
                    "date": 1751545512824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,9 +212,9 @@\n   }\r\n \r\n   try {\r\n     // Update booking status in the database\r\n-    await Client.query(\r\n+    await client.query(\r\n       \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n       [status, bookingId]\r\n     );\r\n \r\n"
                },
                {
                    "date": 1751545559850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,9 +211,9 @@\n     return res.status(400).json({ message: \"Invalid status value\" });\r\n   }\r\n \r\n   try {\r\n-    // Update booking status in the database\r\n+    // Update booking status in the database using client\r\n     await client.query(\r\n       \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n       [status, bookingId]\r\n     );\r\n"
                },
                {
                    "date": 1751545711775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,9 +212,9 @@\n   }\r\n \r\n   try {\r\n     // Update booking status in the database using client\r\n-    await client.query(\r\n+    await Client.query(\r\n       \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n       [status, bookingId]\r\n     );\r\n \r\n"
                },
                {
                    "date": 1751545829510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,9 +212,9 @@\n   }\r\n \r\n   try {\r\n     // Update booking status in the database using client\r\n-    await Client.query(\r\n+    await client.query(\r\n       \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n       [status, bookingId]\r\n     );\r\n \r\n"
                },
                {
                    "date": 1751545918455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,9 +212,9 @@\n   }\r\n \r\n   try {\r\n     // Update booking status in the database using client\r\n-    await client.query(\r\n+    await db.query(\r\n       \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n       [status, bookingId]\r\n     );\r\n \r\n"
                },
                {
                    "date": 1751546050728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,8 +224,35 @@\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n+/**\r\n+ * Admin Delete User Endpoint\r\n+ * DELETE /api/admin/users/:role/:id\r\n+ * Response: { message }\r\n+ */\r\n+app.delete(\"/api/admin/users/:role/:id\", async (req, res) => {\r\n+  const { role, id } = req.params;\r\n+\r\n+  // Validate role value\r\n+  if (role !== \"client\" && role !== \"babysitter\") {\r\n+    return res.status(400).json({ message: \"Invalid role\" });\r\n+  }\r\n+\r\n+  // Determine table name\r\n+  const table = role === \"client\" ? \"users\" : \"babysitters\";\r\n+\r\n+  try {\r\n+    // Delete user from the appropriate table\r\n+    await pool.query(`DELETE FROM ${table} WHERE id = $1`, [id]);\r\n+\r\n+    res.json({ message: `${role} deleted successfully` });\r\n+  } catch (err) {\r\n+    console.error(\"Delete user error:\", err);\r\n+    res.status(500).json({ message: \"Internal server error\" });\r\n+  }\r\n+});\r\n+\r\n /* -----------------------------------\r\n    Babysitters Routes\r\n ----------------------------------- */\r\n \r\n"
                },
                {
                    "date": 1751546621284,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,9 +242,9 @@\n   const table = role === \"client\" ? \"users\" : \"babysitters\";\r\n \r\n   try {\r\n     // Delete user from the appropriate table\r\n-    await pool.query(`DELETE FROM ${table} WHERE id = $1`, [id]);\r\n+    await db.query(`DELETE FROM ${table} WHERE id = $1`, [id]);\r\n \r\n     res.json({ message: `${role} deleted successfully` });\r\n   } catch (err) {\r\n     console.error(\"Delete user error:\", err);\r\n"
                },
                {
                    "date": 1751546996275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -241,18 +241,26 @@\n   // Determine table name\r\n   const table = role === \"client\" ? \"users\" : \"babysitters\";\r\n \r\n   try {\r\n-    // Delete user from the appropriate table\r\n+    // Delete related bookings first\r\n+    if (role === \"client\") {\r\n+      await db.query(\"DELETE FROM bookings WHERE user_id = $1\", [id]);\r\n+    } else {\r\n+      await db.query(\"DELETE FROM bookings WHERE babysitter_id = $1\", [id]);\r\n+    }\r\n+\r\n+    // Delete user or babysitter\r\n     await db.query(`DELETE FROM ${table} WHERE id = $1`, [id]);\r\n \r\n-    res.json({ message: `${role} deleted successfully` });\r\n+    res.json({ message: `${role} and related bookings deleted successfully` });\r\n   } catch (err) {\r\n     console.error(\"Delete user error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n+\r\n /* -----------------------------------\r\n    Babysitters Routes\r\n ----------------------------------- */\r\n \r\n"
                },
                {
                    "date": 1751547557847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -244,9 +244,9 @@\n   try {\r\n     // Delete related bookings first\r\n     if (role === \"client\") {\r\n       await db.query(\"DELETE FROM bookings WHERE user_id = $1\", [id]);\r\n-    } else {\r\n+    } else if (role === \"babysitter\") {\r\n       await db.query(\"DELETE FROM bookings WHERE babysitter_id = $1\", [id]);\r\n     }\r\n \r\n     // Delete user or babysitter\r\n"
                },
                {
                    "date": 1751547873362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -258,9 +258,8 @@\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-\r\n /* -----------------------------------\r\n    Babysitters Routes\r\n ----------------------------------- */\r\n \r\n"
                },
                {
                    "date": 1751551852523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -258,8 +258,18 @@\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n+app.delete(\"/api/admin/bookings/:id\", async (req, res) => {\r\n+  try {\r\n+    await db.query(\"DELETE FROM bookings WHERE id = $1\", [req.params.id]);\r\n+    res.json({ message: \"Booking deleted successfully\" });\r\n+  } catch (err) {\r\n+    console.error(\"Error deleting booking:\", err);\r\n+    res.status(500).json({ message: \"Internal server error\" });\r\n+  }\r\n+});\r\n+\r\n /* -----------------------------------\r\n    Babysitters Routes\r\n ----------------------------------- */\r\n \r\n"
                },
                {
                    "date": 1751551941301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -258,8 +258,9 @@\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n+// DELETE booking by ID (Admin)\r\n app.delete(\"/api/admin/bookings/:id\", async (req, res) => {\r\n   try {\r\n     await db.query(\"DELETE FROM bookings WHERE id = $1\", [req.params.id]);\r\n     res.json({ message: \"Booking deleted successfully\" });\r\n"
                },
                {
                    "date": 1751554550482,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -441,9 +441,31 @@\n     console.error(\"Error fetching babysitter profile:\", error);\r\n     res.status(500).json({ error: \"Internal server error.\" });\r\n   }\r\n });\r\n+// Babysitter approves or cancels a booking\r\n+app.put(\"/api/babysitters/bookings/:bookingId/status\", async (req, res) => {\r\n+  const { bookingId } = req.params;\r\n+  const { status } = req.body;\r\n \r\n+  if (![\"approved\", \"cancelled\"].includes(status)) {\r\n+    return res.status(400).json({ message: \"Invalid status\" });\r\n+  }\r\n+\r\n+  try {\r\n+    // Update the status\r\n+    await db.query(\r\n+      \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n+      [status, bookingId]\r\n+    );\r\n+\r\n+    res.json({ message: \"Booking status updated successfully\" });\r\n+  } catch (err) {\r\n+    console.error(\"Error updating booking status:\", err);\r\n+    res.status(500).json({ message: \"Internal server error\" });\r\n+  }\r\n+});\r\n+\r\n // Route: Update babysitter profile (protected)\r\n app.put('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n   const {\r\n     name,\r\n"
                },
                {
                    "date": 1751555392514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -464,8 +464,38 @@\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n+// Get bookings for a babysitter including client details\r\n+app.get(\"/api/babysitters/:id/bookings\", async (req, res) => {\r\n+  const babysitterId = req.params.id;\r\n+\r\n+  try {\r\n+    const result = await db.query(\r\n+      `\r\n+      SELECT\r\n+        bookings.*,\r\n+        users.name AS parent_name,\r\n+        users.address AS client_address,\r\n+        users.phone AS client_phone,\r\n+        users.region AS client_region,\r\n+        users.children_count AS client_children\r\n+      FROM bookings\r\n+      JOIN users\r\n+        ON bookings.user_id = users.id\r\n+      WHERE bookings.babysitter_id = $1\r\n+      ORDER BY bookings.date DESC\r\n+      `,\r\n+      [babysitterId]\r\n+    );\r\n+\r\n+    res.json(result.rows);\r\n+  } catch (err) {\r\n+    console.error(\"Error fetching babysitter bookings:\", err);\r\n+    res.status(500).json({ message: \"Internal server error\" });\r\n+  }\r\n+});\r\n+\r\n // Route: Update babysitter profile (protected)\r\n app.put('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n   const {\r\n     name,\r\n"
                },
                {
                    "date": 1751577592305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -738,11 +738,11 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Update user profile (protected)\r\n+// // Route: Update user profile (protected)\r\n app.put('/api/users/profile', authMiddleware, async (req, res) => {\r\n-  const { name, email, password } = req.body;\r\n+  const { name, email, password, phone, region, children_count, address } = req.body;\r\n \r\n   try {\r\n     const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n     const resultUser = await db.query(queryUser, [req.user.id]);\r\n@@ -750,26 +750,42 @@\n     if (resultUser.rows.length === 0) {\r\n       return res.status(404).json({ error: 'User not found.' });\r\n     }\r\n \r\n+    const existingUser = resultUser.rows[0];\r\n+\r\n     const updates = {\r\n-      name: name || resultUser.rows[0].name,\r\n-      email: email || resultUser.rows[0].email\r\n+      name: name || existingUser.name,\r\n+      email: email || existingUser.email,\r\n+      phone: phone || existingUser.phone,\r\n+      region: region || existingUser.region,\r\n+      children_count: children_count !== undefined ? children_count : existingUser.children_count,\r\n+      address: address || existingUser.address\r\n     };\r\n \r\n-    let hashedPassword = resultUser.rows[0].password;\r\n+    let hashedPassword = existingUser.password;\r\n     if (password) {\r\n       hashedPassword = await bcrypt.hash(password, 10);\r\n     }\r\n \r\n     const queryUpdate = `\r\n       UPDATE users\r\n-      SET name = $1, email = $2, password = $3\r\n-      WHERE id = $4\r\n-      RETURNING id, name, email, created_at;\r\n+      SET name = $1, email = $2, password = $3, phone = $4, region = $5, children_count = $6, address = $7\r\n+      WHERE id = $8\r\n+      RETURNING id, name, email, phone, region, children_count, address, created_at;\r\n     `;\r\n \r\n-    const values = [updates.name, updates.email, hashedPassword, req.user.id];\r\n+    const values = [\r\n+      updates.name,\r\n+      updates.email,\r\n+      hashedPassword,\r\n+      updates.phone,\r\n+      updates.region,\r\n+      updates.children_count,\r\n+      updates.address,\r\n+      req.user.id\r\n+    ];\r\n+\r\n     const result = await db.query(queryUpdate, values);\r\n \r\n     res.status(200).json({\r\n       message: 'Profile updated successfully.',\r\n"
                },
                {
                    "date": 1751578277023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -738,13 +738,22 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// // Route: Update user profile (protected)\r\n+// Route: Update user profile (protected)\r\n app.put('/api/users/profile', authMiddleware, async (req, res) => {\r\n-  const { name, email, password, phone, region, children_count, address } = req.body;\r\n+  const {\r\n+    name,\r\n+    email,\r\n+    password,\r\n+    phone,\r\n+    region,\r\n+    children_count,\r\n+    address\r\n+  } = req.body;\r\n \r\n   try {\r\n+    // Get current user data\r\n     const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n     const resultUser = await db.query(queryUser, [req.user.id]);\r\n \r\n     if (resultUser.rows.length === 0) {\r\n@@ -752,25 +761,36 @@\n     }\r\n \r\n     const existingUser = resultUser.rows[0];\r\n \r\n+    // Keep previous values if not provided\r\n     const updates = {\r\n       name: name || existingUser.name,\r\n       email: email || existingUser.email,\r\n       phone: phone || existingUser.phone,\r\n       region: region || existingUser.region,\r\n-      children_count: children_count !== undefined ? children_count : existingUser.children_count,\r\n+      children_count:\r\n+        children_count !== undefined ? children_count : existingUser.children_count,\r\n       address: address || existingUser.address\r\n     };\r\n \r\n+    // Password logic\r\n     let hashedPassword = existingUser.password;\r\n     if (password) {\r\n       hashedPassword = await bcrypt.hash(password, 10);\r\n     }\r\n \r\n+    // Update query\r\n     const queryUpdate = `\r\n       UPDATE users\r\n-      SET name = $1, email = $2, password = $3, phone = $4, region = $5, children_count = $6, address = $7\r\n+      SET\r\n+        name = $1,\r\n+        email = $2,\r\n+        password = $3,\r\n+        phone = $4,\r\n+        region = $5,\r\n+        children_count = $6,\r\n+        address = $7\r\n       WHERE id = $8\r\n       RETURNING id, name, email, phone, region, children_count, address, created_at;\r\n     `;\r\n \r\n"
                },
                {
                    "date": 1751580519109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -751,9 +751,8 @@\n     address\r\n   } = req.body;\r\n \r\n   try {\r\n-    // Get current user data\r\n     const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n     const resultUser = await db.query(queryUser, [req.user.id]);\r\n \r\n     if (resultUser.rows.length === 0) {\r\n@@ -761,26 +760,26 @@\n     }\r\n \r\n     const existingUser = resultUser.rows[0];\r\n \r\n-    // Keep previous values if not provided\r\n+    // Safe updates: use old values if not provided\r\n     const updates = {\r\n       name: name || existingUser.name,\r\n       email: email || existingUser.email,\r\n       phone: phone || existingUser.phone,\r\n       region: region || existingUser.region,\r\n+      address: address || existingUser.address,\r\n       children_count:\r\n-        children_count !== undefined ? children_count : existingUser.children_count,\r\n-      address: address || existingUser.address\r\n+        children_count === \"\" || children_count === undefined\r\n+          ? existingUser.children_count\r\n+          : parseInt(children_count, 10)\r\n     };\r\n \r\n-    // Password logic\r\n     let hashedPassword = existingUser.password;\r\n     if (password) {\r\n       hashedPassword = await bcrypt.hash(password, 10);\r\n     }\r\n \r\n-    // Update query\r\n     const queryUpdate = `\r\n       UPDATE users\r\n       SET\r\n         name = $1,\r\n"
                },
                {
                    "date": 1751581996134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -724,9 +724,9 @@\n \r\n // Route: Get logged-in user profile (protected)\r\n app.get('/api/users/profile', authMiddleware, async (req, res) => {\r\n   try {\r\n-    const query = `SELECT id, name, email, created_at FROM users WHERE id = $1`;\r\n+    const query = `SELECT id, name, email, phone, region, address, children_count, created_at FROM users WHERE id = $1`;\r\n     const result = await db.query(query, [req.user.id]);\r\n \r\n     if (result.rows.length === 0) {\r\n       return res.status(404).json({ error: 'User not found.' });\r\n"
                },
                {
                    "date": 1751585749797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,15 @@\n-// Import dependencies\r\n+// -----------------------------------\r\n+// Dependencies and Setup\r\n+// -----------------------------------\r\n const express = require('express');\r\n const app = express();\r\n-require('dotenv').config(); // Load environment variables\r\n-const bcrypt = require('bcrypt'); // For hashing passwords\r\n-const jwt = require('jsonwebtoken'); // JSON Web Token for authentication\r\n-const { Client } = require('pg'); // PostgreSQL client\r\n-const authMiddleware = require('./middleware/authMiddleware'); // Custom authentication middleware\r\n-const cors = require('cors'); // For handling CORS\r\n+require('dotenv').config();\r\n+const bcrypt = require('bcrypt');\r\n+const jwt = require('jsonwebtoken');\r\n+const { Client } = require('pg');\r\n+const authMiddleware = require('./middleware/authMiddleware');\r\n+const cors = require('cors');\r\n \r\n // PostgreSQL client configuration\r\n const db = new Client({\r\n   user: 'postgres',\r\n@@ -21,80 +23,54 @@\n db.connect()\r\n   .then(() => console.log('Connected to PostgreSQL'))\r\n   .catch(err => console.error('Connection error', err.stack));\r\n \r\n-// Middleware to parse JSON requests\r\n+// Middleware\r\n app.use(express.json());\r\n app.use(cors());\r\n \r\n /* -----------------------------------\r\n    Admin Routes\r\n ----------------------------------- */\r\n \r\n-/**\r\n- * Admin Register Endpoint\r\n- * POST /api/admin/register\r\n- * Request Body: { name, email, password }\r\n- * Response: { message }\r\n- */\r\n+// Admin Register\r\n app.post(\"/api/admin/register\", async (req, res) => {\r\n   const { name, email, password } = req.body;\r\n-\r\n   try {\r\n-    // Check if admin with this email already exists\r\n     const existing = await db.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n     if (existing.rows.length > 0) {\r\n       return res.status(400).json({ message: \"Admin with this email already exists\" });\r\n     }\r\n-\r\n-    // Hash the password\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n-\r\n-    // Insert new admin\r\n     await db.query(\r\n       \"INSERT INTO admins (name, email, password) VALUES ($1, $2, $3)\",\r\n       [name, email, hashedPassword]\r\n     );\r\n-\r\n     res.json({ message: \"Admin created successfully\" });\r\n   } catch (err) {\r\n     console.error(\"Admin register error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-/**\r\n- * Admin Login Endpoint\r\n- * POST /api/admin/login\r\n- * Request Body: { email, password }\r\n- * Response: { token, user }\r\n- */\r\n+// Admin Login\r\n app.post(\"/api/admin/login\", async (req, res) => {\r\n   const { email, password } = req.body;\r\n-\r\n   try {\r\n-    // Find admin by email\r\n     const result = await db.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n-\r\n     if (result.rows.length === 0) {\r\n       return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n-\r\n     const admin = result.rows[0];\r\n-\r\n-    // Compare password hash\r\n     const validPassword = await bcrypt.compare(password, admin.password);\r\n     if (!validPassword) {\r\n       return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n-\r\n-    // Generate JWT\r\n     const token = jwt.sign(\r\n       { id: admin.id, email: admin.email, role: \"admin\" },\r\n       process.env.JWT_SECRET,\r\n       { expiresIn: \"8h\" }\r\n     );\r\n-\r\n     res.json({\r\n       token,\r\n       user: {\r\n         id: admin.id,\r\n@@ -107,29 +83,21 @@\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-/**\r\n- * Admin Summary Endpoint\r\n- * GET /api/admin/summary\r\n- * Response: { usersCount, babysittersCount, bookingsCount, pendingBookings }\r\n- */\r\n+// Admin Summary\r\n app.get(\"/api/admin/summary\", async (req, res) => {\r\n   try {\r\n     const usersResult = await db.query(\"SELECT COUNT(*) FROM users\");\r\n     const usersCount = parseInt(usersResult.rows[0].count);\r\n-\r\n     const babysittersResult = await db.query(\"SELECT COUNT(*) FROM babysitters\");\r\n     const babysittersCount = parseInt(babysittersResult.rows[0].count);\r\n-\r\n     const bookingsResult = await db.query(\"SELECT COUNT(*) FROM bookings\");\r\n     const bookingsCount = parseInt(bookingsResult.rows[0].count);\r\n-\r\n     const pendingResult = await db.query(\r\n       \"SELECT COUNT(*) FROM bookings WHERE status = 'pending'\"\r\n     );\r\n     const pendingBookings = parseInt(pendingResult.rows[0].count);\r\n-\r\n     res.json({\r\n       usersCount,\r\n       babysittersCount,\r\n       bookingsCount,\r\n@@ -140,13 +108,9 @@\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-/**\r\n- * Admin Bookings Endpoint\r\n- * GET /api/admin/bookings\r\n- * Response: array of bookings with client and babysitter names\r\n- */\r\n+// Admin Bookings List\r\n app.get(\"/api/admin/bookings\", async (req, res) => {\r\n   try {\r\n     const result = await db.query(`\r\n       SELECT\r\n@@ -161,106 +125,76 @@\n       JOIN users u ON b.user_id = u.id\r\n       JOIN babysitters s ON b.babysitter_id = s.id\r\n       ORDER BY b.date DESC\r\n     `);\r\n-\r\n     res.json(result.rows);\r\n   } catch (err) {\r\n     console.error(\"Admin bookings error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-/**\r\n- * Admin Users Endpoint\r\n- * GET /api/admin/users\r\n- * Response: array of users and babysitters\r\n- */\r\n+// Admin Users List\r\n app.get(\"/api/admin/users\", async (req, res) => {\r\n   try {\r\n     const usersResult = await db.query(`\r\n       SELECT id, name, email, 'client' AS role, created_at\r\n       FROM users\r\n     `);\r\n-\r\n     const babysittersResult = await db.query(`\r\n       SELECT id, name, email, 'babysitter' AS role, created_at\r\n       FROM babysitters\r\n     `);\r\n-\r\n     const combined = [...usersResult.rows, ...babysittersResult.rows];\r\n-\r\n     res.json(combined);\r\n   } catch (err) {\r\n     console.error(\"Admin users error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n-/**\r\n- * Admin Update Booking Status Endpoint\r\n- * PUT /api/admin/bookings/:id/status\r\n- * Request Body: { status }\r\n- * Response: { message }\r\n- */\r\n+\r\n+// Admin Update Booking Status\r\n app.put(\"/api/admin/bookings/:id/status\", async (req, res) => {\r\n   const bookingId = req.params.id;\r\n   const { status } = req.body;\r\n-\r\n-  // Validate status\r\n   const allowedStatuses = [\"pending\", \"approved\", \"cancelled\"];\r\n   if (!allowedStatuses.includes(status)) {\r\n     return res.status(400).json({ message: \"Invalid status value\" });\r\n   }\r\n-\r\n   try {\r\n-    // Update booking status in the database using client\r\n     await db.query(\r\n       \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n       [status, bookingId]\r\n     );\r\n-\r\n     res.json({ message: \"Booking status updated successfully\" });\r\n   } catch (err) {\r\n     console.error(\"Update booking status error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-/**\r\n- * Admin Delete User Endpoint\r\n- * DELETE /api/admin/users/:role/:id\r\n- * Response: { message }\r\n- */\r\n+// Admin Delete User\r\n app.delete(\"/api/admin/users/:role/:id\", async (req, res) => {\r\n   const { role, id } = req.params;\r\n-\r\n-  // Validate role value\r\n   if (role !== \"client\" && role !== \"babysitter\") {\r\n     return res.status(400).json({ message: \"Invalid role\" });\r\n   }\r\n-\r\n-  // Determine table name\r\n   const table = role === \"client\" ? \"users\" : \"babysitters\";\r\n-\r\n   try {\r\n-    // Delete related bookings first\r\n     if (role === \"client\") {\r\n       await db.query(\"DELETE FROM bookings WHERE user_id = $1\", [id]);\r\n     } else if (role === \"babysitter\") {\r\n       await db.query(\"DELETE FROM bookings WHERE babysitter_id = $1\", [id]);\r\n     }\r\n-\r\n-    // Delete user or babysitter\r\n     await db.query(`DELETE FROM ${table} WHERE id = $1`, [id]);\r\n-\r\n     res.json({ message: `${role} and related bookings deleted successfully` });\r\n   } catch (err) {\r\n     console.error(\"Delete user error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-// DELETE booking by ID (Admin)\r\n+// Admin Delete Booking\r\n app.delete(\"/api/admin/bookings/:id\", async (req, res) => {\r\n   try {\r\n     await db.query(\"DELETE FROM bookings WHERE id = $1\", [req.params.id]);\r\n     res.json({ message: \"Booking deleted successfully\" });\r\n@@ -270,12 +204,207 @@\n   }\r\n });\r\n \r\n /* -----------------------------------\r\n+   Clients Routes\r\n+----------------------------------- */\r\n+\r\n+// Client Register\r\n+app.post('/api/users/register', async (req, res) => {\r\n+  const { name, email, password } = req.body;\r\n+  try {\r\n+    if (!name || !email || !password) {\r\n+      return res.status(400).json({ error: 'Name, email, and password are required.' });\r\n+    }\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+    const query = `\r\n+      INSERT INTO users (name, email, password)\r\n+      VALUES ($1, $2, $3)\r\n+      RETURNING id, name, email, created_at;\r\n+    `;\r\n+    const values = [name, email, hashedPassword];\r\n+    const result = await db.query(query, values);\r\n+    const token = jwt.sign(\r\n+      { id: result.rows[0].id, email: result.rows[0].email, role: 'user' },\r\n+      process.env.JWT_SECRET,\r\n+      { expiresIn: '3h' }\r\n+    );\r\n+    res.status(201).json({\r\n+      message: 'User registered successfully.',\r\n+      token,\r\n+      role: 'user',\r\n+      user: {\r\n+        id: result.rows[0].id,\r\n+        name: result.rows[0].name,\r\n+        email: result.rows[0].email,\r\n+        created_at: result.rows[0].created_at\r\n+      }\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error registering user:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+// -----------------------------------\r\n+// Clients Routes\r\n+// -----------------------------------\r\n+\r\n+// Client Login\r\n+app.post('/api/users/login', async (req, res) => {\r\n+  const { email, password } = req.body;\r\n+  try {\r\n+    if (!email || !password) {\r\n+      return res.status(400).json({ error: 'Email and password are required.' });\r\n+    }\r\n+    const query = `SELECT * FROM users WHERE email = $1`;\r\n+    const result = await db.query(query, [email]);\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(401).json({ error: 'Invalid email or password.' });\r\n+    }\r\n+    const user = result.rows[0];\r\n+    const isMatch = await bcrypt.compare(password, user.password);\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({ error: 'Invalid email or password.' });\r\n+    }\r\n+    const token = jwt.sign(\r\n+      { id: user.id, email: user.email },\r\n+      process.env.JWT_SECRET,\r\n+      { expiresIn: '3h' }\r\n+    );\r\n+    res.status(200).json({\r\n+      message: 'Login successful',\r\n+      token,\r\n+      role: 'user',\r\n+      user: {\r\n+        id: user.id,\r\n+        name: user.name,\r\n+        email: user.email,\r\n+        created_at: user.created_at\r\n+      }\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('User login error:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Client Profile Get\r\n+app.get('/api/users/profile', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    const query = `SELECT id, name, email, phone, region, address, children_count, created_at FROM users WHERE id = $1`;\r\n+    const result = await db.query(query, [req.user.id]);\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n+    }\r\n+    res.status(200).json(result.rows[0]);\r\n+  } catch (error) {\r\n+    console.error('Profile fetch error:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Client Profile Update\r\n+app.put('/api/users/profile', authMiddleware, async (req, res) => {\r\n+  const { name, email, password, phone, region, children_count, address } = req.body;\r\n+  try {\r\n+    const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n+    const resultUser = await db.query(queryUser, [req.user.id]);\r\n+    if (resultUser.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n+    }\r\n+    const existingUser = resultUser.rows[0];\r\n+    const updates = {\r\n+      name: name || existingUser.name,\r\n+      email: email || existingUser.email,\r\n+      phone: phone || existingUser.phone,\r\n+      region: region || existingUser.region,\r\n+      address: address || existingUser.address,\r\n+      children_count:\r\n+        children_count === \"\" || children_count === undefined\r\n+          ? existingUser.children_count\r\n+          : parseInt(children_count, 10)\r\n+    };\r\n+    let hashedPassword = existingUser.password;\r\n+    if (password) {\r\n+      hashedPassword = await bcrypt.hash(password, 10);\r\n+    }\r\n+    const queryUpdate = `\r\n+      UPDATE users\r\n+      SET\r\n+        name = $1,\r\n+        email = $2,\r\n+        password = $3,\r\n+        phone = $4,\r\n+        region = $5,\r\n+        children_count = $6,\r\n+        address = $7\r\n+      WHERE id = $8\r\n+      RETURNING id, name, email, phone, region, children_count, address, created_at;\r\n+    `;\r\n+    const values = [\r\n+      updates.name,\r\n+      updates.email,\r\n+      hashedPassword,\r\n+      updates.phone,\r\n+      updates.region,\r\n+      updates.children_count,\r\n+      updates.address,\r\n+      req.user.id\r\n+    ];\r\n+    const result = await db.query(queryUpdate, values);\r\n+    res.status(200).json({\r\n+      message: 'Profile updated successfully.',\r\n+      user: result.rows[0]\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error updating profile:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Client Delete Account\r\n+app.delete('/api/users/profile', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    const bookingCheck = await db.query(\r\n+      `SELECT id FROM bookings WHERE user_id = $1`,\r\n+      [req.user.id]\r\n+    );\r\n+    if (bookingCheck.rows.length > 0) {\r\n+      return res.status(400).json({\r\n+        error: 'You must cancel all bookings before deleting your account.'\r\n+      });\r\n+    }\r\n+    const result = await db.query(\r\n+      `DELETE FROM users WHERE id = $1 RETURNING id`,\r\n+      [req.user.id]\r\n+    );\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n+    }\r\n+    res.status(200).json({ message: 'User account deleted successfully.' });\r\n+  } catch (error) {\r\n+    console.error('Error deleting user account:', error.message);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Client List All Users\r\n+app.get('/api/users', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    const query = `SELECT id, name, email, created_at FROM users ORDER BY id ASC`;\r\n+    const result = await db.query(query);\r\n+    res.status(200).json(result.rows);\r\n+  } catch (error) {\r\n+    console.error('Error fetching users:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+/* -----------------------------------\r\n    Babysitters Routes\r\n ----------------------------------- */\r\n \r\n-// Route: Register a new babysitter\r\n+// Babysitter Register\r\n app.post('/api/babysitters/register', async (req, res) => {\r\n   const {\r\n     name,\r\n     email,\r\n@@ -287,33 +416,26 @@\n     available_to,\r\n     about,\r\n     rate\r\n   } = req.body;\r\n-  // Ensure available_days is an array\r\n-    let availableDaysArray = [];\r\n-\r\n-    if (Array.isArray(available_days)) {\r\n-      availableDaysArray = available_days;\r\n-    } else if (typeof available_days === \"string\") {\r\n-      availableDaysArray = available_days.split(\",\").map(day => day.trim());\r\n+  let availableDaysArray = [];\r\n+  if (Array.isArray(available_days)) {\r\n+    availableDaysArray = available_days;\r\n+  } else if (typeof available_days === \"string\") {\r\n+    availableDaysArray = available_days.split(\",\").map(day => day.trim());\r\n   }\r\n-\r\n-\r\n   try {\r\n     if (!name || !email || !password || !region || !available_days || !available_from || !available_to || !rate) {\r\n       return res.status(400).json({ error: 'All required fields must be filled.' });\r\n     }\r\n-\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n-\r\n     const query = `\r\n       INSERT INTO babysitters\r\n       (name, email, password, phone, region, available_days, available_from, available_to, about, rate)\r\n       VALUES\r\n       ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\r\n       RETURNING id, name, email, region, created_at;\r\n     `;\r\n-\r\n     const values = [\r\n       name,\r\n       email,\r\n       hashedPassword,\r\n@@ -324,11 +446,9 @@\n       available_to,\r\n       about,\r\n       rate\r\n     ];\r\n-\r\n     const result = await db.query(query, values);\r\n-\r\n     res.status(201).json({\r\n       message: 'Babysitter registered successfully.',\r\n       babysitter: result.rows[0]\r\n     });\r\n@@ -337,37 +457,30 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Babysitter login with JWT\r\n+// Babysitter Login\r\n app.post('/api/babysitters/login', async (req, res) => {\r\n   const { email, password } = req.body;\r\n-\r\n   try {\r\n     if (!email || !password) {\r\n       return res.status(400).json({ error: 'Email and password are required.' });\r\n     }\r\n-\r\n     const query = `SELECT * FROM babysitters WHERE email = $1`;\r\n     const result = await db.query(query, [email]);\r\n-\r\n     if (result.rows.length === 0) {\r\n       return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n-\r\n     const babysitter = result.rows[0];\r\n     const isMatch = await bcrypt.compare(password, babysitter.password);\r\n-\r\n     if (!isMatch) {\r\n       return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n-\r\n     const token = jwt.sign(\r\n       { id: babysitter.id, email: babysitter.email },\r\n       process.env.JWT_SECRET,\r\n       { expiresIn: '3h' }\r\n     );\r\n-\r\n     res.status(200).json({\r\n       message: 'Login successful',\r\n       token,\r\n       role: 'babysitter',\r\n@@ -383,35 +496,31 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Get babysitter profile (protected)\r\n+// Babysitter Profile Get (Self)\r\n app.get('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n   try {\r\n     const query = `\r\n       SELECT id, name, email, region, phone, available_days, available_from, available_to, about, rate, created_at\r\n       FROM babysitters\r\n       WHERE id = $1\r\n     `;\r\n     const result = await db.query(query, [req.user.id]);\r\n-\r\n     if (result.rows.length === 0) {\r\n       return res.status(404).json({ error: 'Babysitter not found.' });\r\n     }\r\n-\r\n     res.status(200).json(result.rows[0]);\r\n   } catch (error) {\r\n     console.error('Error fetching babysitter profile:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n-// Route: Get babysitter profile by ID\r\n+\r\n+// Babysitter Profile Get by ID\r\n app.get(\"/api/babysitters/:id\", async (req, res) => {\r\n   const { id } = req.params;\r\n-\r\n   try {\r\n-\r\n-    // Query to select all relevant fields except password\r\n     const query = `\r\n       SELECT \r\n         id,\r\n         name,\r\n@@ -428,75 +537,20 @@\n         profile_photo\r\n       FROM babysitters\r\n       WHERE id = $1\r\n     `;\r\n-\r\n     const result = await db.query(query, [id]);\r\n-\r\n     if (result.rows.length === 0) {\r\n       return res.status(404).json({ error: \"Babysitter not found.\" });\r\n     }\r\n-\r\n     res.json(result.rows[0]);\r\n   } catch (error) {\r\n     console.error(\"Error fetching babysitter profile:\", error);\r\n     res.status(500).json({ error: \"Internal server error.\" });\r\n   }\r\n });\r\n-// Babysitter approves or cancels a booking\r\n-app.put(\"/api/babysitters/bookings/:bookingId/status\", async (req, res) => {\r\n-  const { bookingId } = req.params;\r\n-  const { status } = req.body;\r\n \r\n-  if (![\"approved\", \"cancelled\"].includes(status)) {\r\n-    return res.status(400).json({ message: \"Invalid status\" });\r\n-  }\r\n-\r\n-  try {\r\n-    // Update the status\r\n-    await db.query(\r\n-      \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n-      [status, bookingId]\r\n-    );\r\n-\r\n-    res.json({ message: \"Booking status updated successfully\" });\r\n-  } catch (err) {\r\n-    console.error(\"Error updating booking status:\", err);\r\n-    res.status(500).json({ message: \"Internal server error\" });\r\n-  }\r\n-});\r\n-\r\n-// Get bookings for a babysitter including client details\r\n-app.get(\"/api/babysitters/:id/bookings\", async (req, res) => {\r\n-  const babysitterId = req.params.id;\r\n-\r\n-  try {\r\n-    const result = await db.query(\r\n-      `\r\n-      SELECT\r\n-        bookings.*,\r\n-        users.name AS parent_name,\r\n-        users.address AS client_address,\r\n-        users.phone AS client_phone,\r\n-        users.region AS client_region,\r\n-        users.children_count AS client_children\r\n-      FROM bookings\r\n-      JOIN users\r\n-        ON bookings.user_id = users.id\r\n-      WHERE bookings.babysitter_id = $1\r\n-      ORDER BY bookings.date DESC\r\n-      `,\r\n-      [babysitterId]\r\n-    );\r\n-\r\n-    res.json(result.rows);\r\n-  } catch (err) {\r\n-    console.error(\"Error fetching babysitter bookings:\", err);\r\n-    res.status(500).json({ message: \"Internal server error\" });\r\n-  }\r\n-});\r\n-\r\n-// Route: Update babysitter profile (protected)\r\n+// Babysitter Profile Update\r\n app.put('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n   const {\r\n     name,\r\n     email,\r\n@@ -507,17 +561,14 @@\n     available_to,\r\n     about,\r\n     rate\r\n   } = req.body;\r\n-\r\n   try {\r\n     const queryBabysitter = `SELECT * FROM babysitters WHERE id = $1`;\r\n     const resultBabysitter = await db.query(queryBabysitter, [req.user.id]);\r\n-\r\n     if (resultBabysitter.rows.length === 0) {\r\n       return res.status(404).json({ error: 'Babysitter not found.' });\r\n     }\r\n-\r\n     const updates = {\r\n       name: name || resultBabysitter.rows[0].name,\r\n       email: email || resultBabysitter.rows[0].email,\r\n       phone: phone || resultBabysitter.rows[0].phone,\r\n@@ -527,9 +578,8 @@\n       available_to: available_to || resultBabysitter.rows[0].available_to,\r\n       about: about || resultBabysitter.rows[0].about,\r\n       rate: rate || resultBabysitter.rows[0].rate\r\n     };\r\n-\r\n     const queryUpdate = `\r\n       UPDATE babysitters\r\n       SET name = $1,\r\n           email = $2,\r\n@@ -542,9 +592,8 @@\n           rate = $9\r\n       WHERE id = $10\r\n       RETURNING id, name, email, region, phone, available_days, available_from, available_to, about, rate, created_at;\r\n     `;\r\n-\r\n     const values = [\r\n       updates.name,\r\n       updates.email,\r\n       updates.phone,\r\n@@ -555,11 +604,9 @@\n       updates.about,\r\n       updates.rate,\r\n       req.user.id\r\n     ];\r\n-\r\n     const result = await db.query(queryUpdate, values);\r\n-\r\n     res.status(200).json({\r\n       message: 'Babysitter profile updated successfully.',\r\n       babysitter: result.rows[0]\r\n     });\r\n@@ -568,41 +615,35 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Delete babysitter account (protected, must have no bookings)\r\n+// Babysitter Delete Account\r\n app.delete('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n   try {\r\n-    // Check if babysitter has related bookings\r\n     const bookingCheck = await db.query(\r\n       `SELECT id FROM bookings WHERE babysitter_id = $1`,\r\n       [req.user.id]\r\n     );\r\n-\r\n     if (bookingCheck.rows.length > 0) {\r\n       return res.status(400).json({\r\n         error: 'You must cancel all bookings before deleting your account.'\r\n       });\r\n     }\r\n-\r\n-    // Delete babysitter\r\n     const result = await db.query(\r\n       `DELETE FROM babysitters WHERE id = $1 RETURNING id`,\r\n       [req.user.id]\r\n     );\r\n-\r\n     if (result.rows.length === 0) {\r\n       return res.status(404).json({ error: 'Babysitter not found.' });\r\n     }\r\n-\r\n     res.status(200).json({ message: 'Babysitter account deleted successfully.' });\r\n   } catch (error) {\r\n     console.error('Error deleting babysitter account:', error.message);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Get all babysitters\r\n+// Babysitter List All\r\n app.get('/api/babysitters', async (req, res) => {\r\n   try {\r\n     const query = `\r\n       SELECT\r\n@@ -628,266 +669,141 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-/* -----------------------------------\r\n-   Users Routes\r\n------------------------------------ */\r\n-\r\n-// Route: Register a new user\r\n-app.post('/api/users/register', async (req, res) => {\r\n-  const { name, email, password } = req.body;\r\n-\r\n+// Babysitter Bookings List\r\n+app.get(\"/api/babysitters/:id/bookings\", async (req, res) => {\r\n+  const babysitterId = req.params.id;\r\n   try {\r\n-    if (!name || !email || !password) {\r\n-      return res.status(400).json({ error: 'Name, email, and password are required.' });\r\n-    }\r\n-\r\n-    const hashedPassword = await bcrypt.hash(password, 10);\r\n-\r\n-    const query = `\r\n-      INSERT INTO users (name, email, password)\r\n-      VALUES ($1, $2, $3)\r\n-      RETURNING id, name, email, created_at;\r\n-    `;\r\n-\r\n-    const values = [name, email, hashedPassword];\r\n-    const result = await db.query(query, values);\r\n-    const token = jwt.sign(\r\n-      { id: result.rows[0].id, email: result.rows[0].email, role: 'user' },\r\n-      process.env.JWT_SECRET,\r\n-      { expiresIn: '3h' }\r\n+    const result = await db.query(\r\n+      `\r\n+      SELECT\r\n+        bookings.*,\r\n+        users.name AS parent_name,\r\n+        users.address AS client_address,\r\n+        users.phone AS client_phone,\r\n+        users.region AS client_region,\r\n+        users.children_count AS client_children\r\n+      FROM bookings\r\n+      JOIN users\r\n+        ON bookings.user_id = users.id\r\n+      WHERE bookings.babysitter_id = $1\r\n+      ORDER BY bookings.date DESC\r\n+      `,\r\n+      [babysitterId]\r\n     );\r\n-    \r\n-    res.status(201).json({\r\n-      message: 'User registered successfully.',\r\n-      token,\r\n-      role: 'user',\r\n-      user: {\r\n-        id: result.rows[0].id,\r\n-        name: result.rows[0].name,\r\n-        email: result.rows[0].email,\r\n-        created_at: result.rows[0].created_at\r\n-      }\r\n-    });\r\n+    res.json(result.rows);\r\n+  } catch (err) {\r\n+    console.error(\"Error fetching babysitter bookings:\", err);\r\n+    res.status(500).json({ message: \"Internal server error\" });\r\n+  }\r\n+});\r\n \r\n-  } catch (error) {\r\n-    console.error('Error registering user:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n+// Babysitter Update Booking Status\r\n+app.put(\"/api/babysitters/bookings/:bookingId/status\", async (req, res) => {\r\n+  const { bookingId } = req.params;\r\n+  const { status } = req.body;\r\n+  if (![\"approved\", \"cancelled\"].includes(status)) {\r\n+    return res.status(400).json({ message: \"Invalid status\" });\r\n   }\r\n+  try {\r\n+    await db.query(\r\n+      \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n+      [status, bookingId]\r\n+    );\r\n+    res.json({ message: \"Booking status updated successfully\" });\r\n+  } catch (err) {\r\n+    console.error(\"Error updating booking status:\", err);\r\n+    res.status(500).json({ message: \"Internal server error\" });\r\n+  }\r\n });\r\n \r\n-// Route: User login with JWT\r\n-app.post('/api/users/login', async (req, res) => {\r\n-  const { email, password } = req.body;\r\n+/* -----------------------------------\r\n+   Password Management Routes\r\n+----------------------------------- */\r\n \r\n+// Babysitter Change Password\r\n+app.put('/api/babysitters/change-password', authMiddleware, async (req, res) => {\r\n+  const { currentPassword, newPassword } = req.body;\r\n   try {\r\n-    if (!email || !password) {\r\n-      return res.status(400).json({ error: 'Email and password are required.' });\r\n+    if (!currentPassword || !newPassword) {\r\n+      return res.status(400).json({ error: 'Current and new password are required.' });\r\n     }\r\n-\r\n-    const query = `SELECT * FROM users WHERE email = $1`;\r\n-    const result = await db.query(query, [email]);\r\n-\r\n+    const query = `SELECT * FROM babysitters WHERE id = $1`;\r\n+    const result = await db.query(query, [req.user.id]);\r\n     if (result.rows.length === 0) {\r\n-      return res.status(401).json({ error: 'Invalid email or password.' });\r\n+      return res.status(404).json({ error: 'Babysitter not found.' });\r\n     }\r\n-\r\n-    const user = result.rows[0];\r\n-    const isMatch = await bcrypt.compare(password, user.password);\r\n-\r\n+    const babysitter = result.rows[0];\r\n+    const isMatch = await bcrypt.compare(currentPassword, babysitter.password);\r\n     if (!isMatch) {\r\n-      return res.status(401).json({ error: 'Invalid email or password.' });\r\n+      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n     }\r\n-\r\n-    const token = jwt.sign(\r\n-      { id: user.id, email: user.email },\r\n-      process.env.JWT_SECRET,\r\n-      { expiresIn: '3h' }\r\n+    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n+    await db.query(\r\n+      `UPDATE babysitters SET password = $1 WHERE id = $2`,\r\n+      [hashedPassword, req.user.id]\r\n     );\r\n-\r\n-    res.status(200).json({\r\n-      message: 'Login successful',\r\n-      token,\r\n-      role: 'user',\r\n-      user: {\r\n-        id: user.id,\r\n-        name: user.name,\r\n-        email: user.email,\r\n-        created_at: user.created_at\r\n-      }\r\n-    });\r\n+    res.status(200).json({ message: 'Password updated successfully.' });\r\n   } catch (error) {\r\n-    console.error('User login error:', error);\r\n+    console.error('Error changing password:', error.message);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Get logged-in user profile (protected)\r\n-app.get('/api/users/profile', authMiddleware, async (req, res) => {\r\n+// User Change Password\r\n+app.put('/api/users/change-password', authMiddleware, async (req, res) => {\r\n+  const { currentPassword, newPassword } = req.body;\r\n   try {\r\n-    const query = `SELECT id, name, email, phone, region, address, children_count, created_at FROM users WHERE id = $1`;\r\n-    const result = await db.query(query, [req.user.id]);\r\n-\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'User not found.' });\r\n+    if (!currentPassword || !newPassword) {\r\n+      return res.status(400).json({ error: 'Both current and new passwords are required.' });\r\n     }\r\n-\r\n-    res.status(200).json(result.rows[0]);\r\n-  } catch (error) {\r\n-    console.error('Profile fetch error:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Update user profile (protected)\r\n-app.put('/api/users/profile', authMiddleware, async (req, res) => {\r\n-  const {\r\n-    name,\r\n-    email,\r\n-    password,\r\n-    phone,\r\n-    region,\r\n-    children_count,\r\n-    address\r\n-  } = req.body;\r\n-\r\n-  try {\r\n     const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n     const resultUser = await db.query(queryUser, [req.user.id]);\r\n-\r\n     if (resultUser.rows.length === 0) {\r\n       return res.status(404).json({ error: 'User not found.' });\r\n     }\r\n-\r\n-    const existingUser = resultUser.rows[0];\r\n-\r\n-    // Safe updates: use old values if not provided\r\n-    const updates = {\r\n-      name: name || existingUser.name,\r\n-      email: email || existingUser.email,\r\n-      phone: phone || existingUser.phone,\r\n-      region: region || existingUser.region,\r\n-      address: address || existingUser.address,\r\n-      children_count:\r\n-        children_count === \"\" || children_count === undefined\r\n-          ? existingUser.children_count\r\n-          : parseInt(children_count, 10)\r\n-    };\r\n-\r\n-    let hashedPassword = existingUser.password;\r\n-    if (password) {\r\n-      hashedPassword = await bcrypt.hash(password, 10);\r\n+    const user = resultUser.rows[0];\r\n+    const isMatch = await bcrypt.compare(currentPassword, user.password);\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n     }\r\n-\r\n-    const queryUpdate = `\r\n-      UPDATE users\r\n-      SET\r\n-        name = $1,\r\n-        email = $2,\r\n-        password = $3,\r\n-        phone = $4,\r\n-        region = $5,\r\n-        children_count = $6,\r\n-        address = $7\r\n-      WHERE id = $8\r\n-      RETURNING id, name, email, phone, region, children_count, address, created_at;\r\n-    `;\r\n-\r\n-    const values = [\r\n-      updates.name,\r\n-      updates.email,\r\n-      hashedPassword,\r\n-      updates.phone,\r\n-      updates.region,\r\n-      updates.children_count,\r\n-      updates.address,\r\n-      req.user.id\r\n-    ];\r\n-\r\n-    const result = await db.query(queryUpdate, values);\r\n-\r\n-    res.status(200).json({\r\n-      message: 'Profile updated successfully.',\r\n-      user: result.rows[0]\r\n-    });\r\n-  } catch (error) {\r\n-    console.error('Error updating profile:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Delete user account (protected, must have no bookings)\r\n-app.delete('/api/users/profile', authMiddleware, async (req, res) => {\r\n-  try {\r\n-    // Check if user has related bookings\r\n-    const bookingCheck = await db.query(\r\n-      `SELECT id FROM bookings WHERE user_id = $1`,\r\n-      [req.user.id]\r\n+    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n+    await db.query(\r\n+      `UPDATE users SET password = $1 WHERE id = $2`,\r\n+      [hashedPassword, req.user.id]\r\n     );\r\n-\r\n-    if (bookingCheck.rows.length > 0) {\r\n-      return res.status(400).json({\r\n-        error: 'You must cancel all bookings before deleting your account.'\r\n-      });\r\n-    }\r\n-\r\n-    // Delete user\r\n-    const result = await db.query(\r\n-      `DELETE FROM users WHERE id = $1 RETURNING id`,\r\n-      [req.user.id]\r\n-    );\r\n-\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'User not found.' });\r\n-    }\r\n-\r\n-    res.status(200).json({ message: 'User account deleted successfully.' });\r\n+    res.status(200).json({ message: 'Password updated successfully.' });\r\n   } catch (error) {\r\n-    console.error('Error deleting user account:', error.message);\r\n+    console.error('Error changing password:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Get all users (protected)\r\n-app.get('/api/users', authMiddleware, async (req, res) => {\r\n-  try {\r\n-    const query = `SELECT id, name, email, created_at FROM users ORDER BY id ASC`;\r\n-    const result = await db.query(query);\r\n+/* -----------------------------------\r\n+   Universal Login\r\n+----------------------------------- */\r\n \r\n-    res.status(200).json(result.rows);\r\n-  } catch (error) {\r\n-    console.error('Error fetching users:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Universal login (users or babysitters)\r\n+// Universal Login (User or Babysitter)\r\n app.post('/api/login', async (req, res) => {\r\n   const { email, password } = req.body;\r\n-\r\n   try {\r\n     if (!email || !password) {\r\n       return res.status(400).json({ error: 'Email and password are required.' });\r\n     }\r\n-\r\n-    // First try to find in users\r\n     const userQuery = `SELECT * FROM users WHERE email = $1`;\r\n     const userResult = await db.query(userQuery, [email]);\r\n-\r\n     if (userResult.rows.length > 0) {\r\n       const user = userResult.rows[0];\r\n       const isMatch = await bcrypt.compare(password, user.password);\r\n       if (!isMatch) {\r\n         return res.status(401).json({ error: 'Invalid email or password.' });\r\n       }\r\n-\r\n       const token = jwt.sign(\r\n         { id: user.id, email: user.email, role: 'user' },\r\n         process.env.JWT_SECRET,\r\n         { expiresIn: '3h' }\r\n       );\r\n-\r\n       return res.status(200).json({\r\n         message: 'Login successful',\r\n         token,\r\n         role: 'user',\r\n@@ -898,26 +814,21 @@\n           created_at: user.created_at\r\n         }\r\n       });\r\n     }\r\n-\r\n-    // If not found, try babysitters\r\n     const babysitterQuery = `SELECT * FROM babysitters WHERE email = $1`;\r\n     const babysitterResult = await db.query(babysitterQuery, [email]);\r\n-\r\n     if (babysitterResult.rows.length > 0) {\r\n       const babysitter = babysitterResult.rows[0];\r\n       const isMatch = await bcrypt.compare(password, babysitter.password);\r\n       if (!isMatch) {\r\n         return res.status(401).json({ error: 'Invalid email or password.' });\r\n       }\r\n-\r\n       const token = jwt.sign(\r\n         { id: babysitter.id, email: babysitter.email, role: 'babysitter' },\r\n         process.env.JWT_SECRET,\r\n         { expiresIn: '3h' }\r\n       );\r\n-\r\n       return res.status(200).json({\r\n         message: 'Login successful',\r\n         token,\r\n         role: 'babysitter',\r\n@@ -928,201 +839,29 @@\n           region: babysitter.region\r\n         }\r\n       });\r\n     }\r\n-\r\n-    // Not found in either table\r\n     return res.status(401).json({ error: 'Invalid email or password.' });\r\n-\r\n   } catch (error) {\r\n     console.error('Universal login error:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n-\r\n-// Route: Change babysitter password (protected)\r\n-app.put('/api/babysitters/change-password', authMiddleware, async (req, res) => {\r\n-  const { currentPassword, newPassword } = req.body;\r\n-\r\n-  try {\r\n-    if (!currentPassword || !newPassword) {\r\n-      return res.status(400).json({ error: 'Current and new password are required.' });\r\n-    }\r\n-\r\n-    // Fetch babysitter from DB\r\n-    const query = `SELECT * FROM babysitters WHERE id = $1`;\r\n-    const result = await db.query(query, [req.user.id]);\r\n-\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'Babysitter not found.' });\r\n-    }\r\n-\r\n-    const babysitter = result.rows[0];\r\n-\r\n-    // Check if current password is correct\r\n-    const isMatch = await bcrypt.compare(currentPassword, babysitter.password);\r\n-    if (!isMatch) {\r\n-      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n-    }\r\n-\r\n-    // Hash new password\r\n-    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n-\r\n-    // Update password in DB\r\n-    const updateQuery = `\r\n-      UPDATE babysitters\r\n-      SET password = $1\r\n-      WHERE id = $2\r\n-    `;\r\n-    await db.query(updateQuery, [hashedPassword, req.user.id]);\r\n-\r\n-    res.status(200).json({ message: 'Password updated successfully.' });\r\n-  } catch (error) {\r\n-    console.error('Error changing password:', error.message);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Change user password (protected)\r\n-app.put('/api/users/change-password', authMiddleware, async (req, res) => {\r\n-  const { currentPassword, newPassword } = req.body;\r\n-\r\n-  try {\r\n-    if (!currentPassword || !newPassword) {\r\n-      return res.status(400).json({ error: 'Both current and new passwords are required.' });\r\n-    }\r\n-\r\n-    // Get the user\r\n-    const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n-    const resultUser = await db.query(queryUser, [req.user.id]);\r\n-\r\n-    if (resultUser.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'User not found.' });\r\n-    }\r\n-\r\n-    const user = resultUser.rows[0];\r\n-\r\n-    // Compare current password\r\n-    const isMatch = await bcrypt.compare(currentPassword, user.password);\r\n-    if (!isMatch) {\r\n-      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n-    }\r\n-\r\n-    // Hash new password\r\n-    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n-\r\n-    // Update password\r\n-    const queryUpdate = `\r\n-      UPDATE users\r\n-      SET password = $1\r\n-      WHERE id = $2\r\n-    `;\r\n-    await db.query(queryUpdate, [hashedPassword, req.user.id]);\r\n-\r\n-    res.status(200).json({ message: 'Password updated successfully.' });\r\n-  } catch (error) {\r\n-    console.error('Error changing password:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Update user password (protected)\r\n-app.put('/api/users/profile/password', authMiddleware, async (req, res) => {\r\n-  const { currentPassword, newPassword } = req.body;\r\n-\r\n-  try {\r\n-    if (!currentPassword || !newPassword) {\r\n-      return res.status(400).json({ error: 'Current and new password are required.' });\r\n-    }\r\n-\r\n-    // Fetch user\r\n-    const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n-    const resultUser = await db.query(queryUser, [req.user.id]);\r\n-\r\n-    if (resultUser.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'User not found.' });\r\n-    }\r\n-\r\n-    const user = resultUser.rows[0];\r\n-\r\n-    // Verify current password\r\n-    const isMatch = await bcrypt.compare(currentPassword, user.password);\r\n-    if (!isMatch) {\r\n-      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n-    }\r\n-\r\n-    // Hash new password\r\n-    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n-\r\n-    // Update password\r\n-    const queryUpdate = `\r\n-      UPDATE users\r\n-      SET password = $1\r\n-      WHERE id = $2\r\n-      RETURNING id;\r\n-    `;\r\n-    await db.query(queryUpdate, [hashedPassword, req.user.id]);\r\n-\r\n-    res.status(200).json({ message: 'Password updated successfully.' });\r\n-  } catch (error) {\r\n-    console.error('Error updating password:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Update booking status (protected)\r\n-app.put('/api/bookings/:id/status', authMiddleware, async (req, res) => {\r\n-  const { id } = req.params;\r\n-  const { status } = req.body;\r\n-\r\n-  try {\r\n-    // Valida status permitido\r\n-    const validStatuses = ['pending', 'confirmed', 'rejected', 'cancelled'];\r\n-    if (!validStatuses.includes(status)) {\r\n-      return res.status(400).json({ error: 'Invalid status value.' });\r\n-    }\r\n-\r\n-    // update database\r\n-    const query = `\r\n-      UPDATE bookings\r\n-      SET status = $1\r\n-      WHERE id = $2\r\n-      RETURNING *;\r\n-    `;\r\n-    const values = [status, id];\r\n-    const result = await db.query(query, values);\r\n-\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'Booking not found.' });\r\n-    }\r\n-\r\n-    res.status(200).json({\r\n-      message: 'Booking status updated successfully.',\r\n-      booking: result.rows[0],\r\n-    });\r\n-  } catch (error) {\r\n-    console.error('Error updating booking status:', error);\r\n-    res.status(500).json({ error: 'Internal server error.' });\r\n-  }\r\n-});\r\n-\r\n /* -----------------------------------\r\n    Bookings Routes\r\n ----------------------------------- */\r\n \r\n-// Route: Create a new booking\r\n+// Create Booking\r\n app.post('/api/bookings', async (req, res) => {\r\n   const { user_id, babysitter_id, date, time_start, time_end } = req.body;\r\n-\r\n   try {\r\n     const query = `\r\n       INSERT INTO bookings (user_id, babysitter_id, date, time_start, time_end)\r\n       VALUES ($1, $2, $3, $4, $5)\r\n       RETURNING *;\r\n     `;\r\n     const values = [user_id, babysitter_id, date, time_start, time_end];\r\n     const result = await db.query(query, values);\r\n-\r\n     res.status(201).json({\r\n       message: 'Booking created successfully.',\r\n       booking: result.rows[0]\r\n     });\r\n@@ -1131,12 +870,11 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Get all bookings for a user\r\n+// Get Bookings for User\r\n app.get('/api/bookings/:user_id', async (req, res) => {\r\n   const { user_id } = req.params;\r\n-\r\n   try {\r\n     const query = `\r\n       SELECT \r\n         b.id, b.date, b.time_start, b.time_end, b.status,\r\n@@ -1146,19 +884,18 @@\n       WHERE b.user_id = $1\r\n       ORDER BY b.date ASC;\r\n     `;\r\n     const result = await db.query(query, [user_id]);\r\n-\r\n     res.status(200).json(result.rows);\r\n   } catch (error) {\r\n     console.error('Error fetching bookings:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n-// Route: Get all bookings for a babysitter\r\n+\r\n+// Get Bookings for Babysitter\r\n app.get('/api/babysitters/:id/bookings', async (req, res) => {\r\n   const babysitterId = req.params.id;\r\n-\r\n   try {\r\n     const query = `\r\n       SELECT \r\n         b.id,\r\n@@ -1171,18 +908,46 @@\n       JOIN users u ON b.user_id = u.id\r\n       WHERE b.babysitter_id = $1\r\n       ORDER BY b.date ASC, b.time_start ASC;\r\n     `;\r\n-\r\n     const result = await db.query(query, [babysitterId]);\r\n-\r\n     res.status(200).json(result.rows);\r\n   } catch (error) {\r\n     console.error('Error fetching babysitter bookings:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+// Update Booking Status (Generic)\r\n+app.put('/api/bookings/:id/status', authMiddleware, async (req, res) => {\r\n+  const { id } = req.params;\r\n+  const { status } = req.body;\r\n+  try {\r\n+    const validStatuses = ['pending', 'confirmed', 'rejected', 'cancelled'];\r\n+    if (!validStatuses.includes(status)) {\r\n+      return res.status(400).json({ error: 'Invalid status value.' });\r\n+    }\r\n+    const query = `\r\n+      UPDATE bookings\r\n+      SET status = $1\r\n+      WHERE id = $2\r\n+      RETURNING *;\r\n+    `;\r\n+    const values = [status, id];\r\n+    const result = await db.query(query, values);\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'Booking not found.' });\r\n+    }\r\n+    res.status(200).json({\r\n+      message: 'Booking status updated successfully.',\r\n+      booking: result.rows[0],\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error updating booking status:', error);\r\n+    res.status(500).json({ error: 'Internal server error.' });\r\n+  }\r\n+});\r\n+\r\n /* -----------------------------------\r\n    Root Endpoint\r\n ----------------------------------- */\r\n app.get('/', (req, res) => {\r\n"
                },
                {
                    "date": 1751586139711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,13 @@\n-// -----------------------------------\r\n-// Dependencies and Setup\r\n-// -----------------------------------\r\n+// Import dependencies\r\n const express = require('express');\r\n const app = express();\r\n-require('dotenv').config();\r\n-const bcrypt = require('bcrypt');\r\n-const jwt = require('jsonwebtoken');\r\n-const { Client } = require('pg');\r\n-const authMiddleware = require('./middleware/authMiddleware');\r\n-const cors = require('cors');\r\n+require('dotenv').config(); // Load environment variables\r\n+const bcrypt = require('bcrypt'); // For hashing passwords\r\n+const jwt = require('jsonwebtoken'); // JSON Web Token for authentication\r\n+const { Client } = require('pg'); // PostgreSQL client\r\n+const authMiddleware = require('./middleware/authMiddleware'); // Custom authentication middleware\r\n+const cors = require('cors'); // For handling CORS\r\n \r\n // PostgreSQL client configuration\r\n const db = new Client({\r\n   user: 'postgres',\r\n@@ -23,54 +21,80 @@\n db.connect()\r\n   .then(() => console.log('Connected to PostgreSQL'))\r\n   .catch(err => console.error('Connection error', err.stack));\r\n \r\n-// Middleware\r\n+// Middleware to parse JSON requests\r\n app.use(express.json());\r\n app.use(cors());\r\n \r\n /* -----------------------------------\r\n    Admin Routes\r\n ----------------------------------- */\r\n \r\n-// Admin Register\r\n+/**\r\n+ * Admin Register Endpoint\r\n+ * POST /api/admin/register\r\n+ * Request Body: { name, email, password }\r\n+ * Response: { message }\r\n+ */\r\n app.post(\"/api/admin/register\", async (req, res) => {\r\n   const { name, email, password } = req.body;\r\n+\r\n   try {\r\n+    // Check if admin with this email already exists\r\n     const existing = await db.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n     if (existing.rows.length > 0) {\r\n       return res.status(400).json({ message: \"Admin with this email already exists\" });\r\n     }\r\n+\r\n+    // Hash the password\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n+\r\n+    // Insert new admin\r\n     await db.query(\r\n       \"INSERT INTO admins (name, email, password) VALUES ($1, $2, $3)\",\r\n       [name, email, hashedPassword]\r\n     );\r\n+\r\n     res.json({ message: \"Admin created successfully\" });\r\n   } catch (err) {\r\n     console.error(\"Admin register error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-// Admin Login\r\n+/**\r\n+ * Admin Login Endpoint\r\n+ * POST /api/admin/login\r\n+ * Request Body: { email, password }\r\n+ * Response: { token, user }\r\n+ */\r\n app.post(\"/api/admin/login\", async (req, res) => {\r\n   const { email, password } = req.body;\r\n+\r\n   try {\r\n+    // Find admin by email\r\n     const result = await db.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n+\r\n     if (result.rows.length === 0) {\r\n       return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n+\r\n     const admin = result.rows[0];\r\n+\r\n+    // Compare password hash\r\n     const validPassword = await bcrypt.compare(password, admin.password);\r\n     if (!validPassword) {\r\n       return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n+\r\n+    // Generate JWT\r\n     const token = jwt.sign(\r\n       { id: admin.id, email: admin.email, role: \"admin\" },\r\n       process.env.JWT_SECRET,\r\n       { expiresIn: \"8h\" }\r\n     );\r\n+\r\n     res.json({\r\n       token,\r\n       user: {\r\n         id: admin.id,\r\n@@ -83,21 +107,29 @@\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-// Admin Summary\r\n+/**\r\n+ * Admin Summary Endpoint\r\n+ * GET /api/admin/summary\r\n+ * Response: { usersCount, babysittersCount, bookingsCount, pendingBookings }\r\n+ */\r\n app.get(\"/api/admin/summary\", async (req, res) => {\r\n   try {\r\n     const usersResult = await db.query(\"SELECT COUNT(*) FROM users\");\r\n     const usersCount = parseInt(usersResult.rows[0].count);\r\n+\r\n     const babysittersResult = await db.query(\"SELECT COUNT(*) FROM babysitters\");\r\n     const babysittersCount = parseInt(babysittersResult.rows[0].count);\r\n+\r\n     const bookingsResult = await db.query(\"SELECT COUNT(*) FROM bookings\");\r\n     const bookingsCount = parseInt(bookingsResult.rows[0].count);\r\n+\r\n     const pendingResult = await db.query(\r\n       \"SELECT COUNT(*) FROM bookings WHERE status = 'pending'\"\r\n     );\r\n     const pendingBookings = parseInt(pendingResult.rows[0].count);\r\n+\r\n     res.json({\r\n       usersCount,\r\n       babysittersCount,\r\n       bookingsCount,\r\n@@ -108,9 +140,13 @@\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-// Admin Bookings List\r\n+/**\r\n+ * Admin Bookings Endpoint\r\n+ * GET /api/admin/bookings\r\n+ * Response: array of bookings with client and babysitter names\r\n+ */\r\n app.get(\"/api/admin/bookings\", async (req, res) => {\r\n   try {\r\n     const result = await db.query(`\r\n       SELECT\r\n@@ -125,76 +161,106 @@\n       JOIN users u ON b.user_id = u.id\r\n       JOIN babysitters s ON b.babysitter_id = s.id\r\n       ORDER BY b.date DESC\r\n     `);\r\n+\r\n     res.json(result.rows);\r\n   } catch (err) {\r\n     console.error(\"Admin bookings error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-// Admin Users List\r\n+/**\r\n+ * Admin Users Endpoint\r\n+ * GET /api/admin/users\r\n+ * Response: array of users and babysitters\r\n+ */\r\n app.get(\"/api/admin/users\", async (req, res) => {\r\n   try {\r\n     const usersResult = await db.query(`\r\n       SELECT id, name, email, 'client' AS role, created_at\r\n       FROM users\r\n     `);\r\n+\r\n     const babysittersResult = await db.query(`\r\n       SELECT id, name, email, 'babysitter' AS role, created_at\r\n       FROM babysitters\r\n     `);\r\n+\r\n     const combined = [...usersResult.rows, ...babysittersResult.rows];\r\n+\r\n     res.json(combined);\r\n   } catch (err) {\r\n     console.error(\"Admin users error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n-\r\n-// Admin Update Booking Status\r\n+/**\r\n+ * Admin Update Booking Status Endpoint\r\n+ * PUT /api/admin/bookings/:id/status\r\n+ * Request Body: { status }\r\n+ * Response: { message }\r\n+ */\r\n app.put(\"/api/admin/bookings/:id/status\", async (req, res) => {\r\n   const bookingId = req.params.id;\r\n   const { status } = req.body;\r\n+\r\n+  // Validate status\r\n   const allowedStatuses = [\"pending\", \"approved\", \"cancelled\"];\r\n   if (!allowedStatuses.includes(status)) {\r\n     return res.status(400).json({ message: \"Invalid status value\" });\r\n   }\r\n+\r\n   try {\r\n+    // Update booking status in the database using client\r\n     await db.query(\r\n       \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n       [status, bookingId]\r\n     );\r\n+\r\n     res.json({ message: \"Booking status updated successfully\" });\r\n   } catch (err) {\r\n     console.error(\"Update booking status error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-// Admin Delete User\r\n+/**\r\n+ * Admin Delete User Endpoint\r\n+ * DELETE /api/admin/users/:role/:id\r\n+ * Response: { message }\r\n+ */\r\n app.delete(\"/api/admin/users/:role/:id\", async (req, res) => {\r\n   const { role, id } = req.params;\r\n+\r\n+  // Validate role value\r\n   if (role !== \"client\" && role !== \"babysitter\") {\r\n     return res.status(400).json({ message: \"Invalid role\" });\r\n   }\r\n+\r\n+  // Determine table name\r\n   const table = role === \"client\" ? \"users\" : \"babysitters\";\r\n+\r\n   try {\r\n+    // Delete related bookings first\r\n     if (role === \"client\") {\r\n       await db.query(\"DELETE FROM bookings WHERE user_id = $1\", [id]);\r\n     } else if (role === \"babysitter\") {\r\n       await db.query(\"DELETE FROM bookings WHERE babysitter_id = $1\", [id]);\r\n     }\r\n+\r\n+    // Delete user or babysitter\r\n     await db.query(`DELETE FROM ${table} WHERE id = $1`, [id]);\r\n+\r\n     res.json({ message: `${role} and related bookings deleted successfully` });\r\n   } catch (err) {\r\n     console.error(\"Delete user error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-// Admin Delete Booking\r\n+// DELETE booking by ID (Admin)\r\n app.delete(\"/api/admin/bookings/:id\", async (req, res) => {\r\n   try {\r\n     await db.query(\"DELETE FROM bookings WHERE id = $1\", [req.params.id]);\r\n     res.json({ message: \"Booking deleted successfully\" });\r\n@@ -204,207 +270,12 @@\n   }\r\n });\r\n \r\n /* -----------------------------------\r\n-   Clients Routes\r\n------------------------------------ */\r\n-\r\n-// Client Register\r\n-app.post('/api/users/register', async (req, res) => {\r\n-  const { name, email, password } = req.body;\r\n-  try {\r\n-    if (!name || !email || !password) {\r\n-      return res.status(400).json({ error: 'Name, email, and password are required.' });\r\n-    }\r\n-    const hashedPassword = await bcrypt.hash(password, 10);\r\n-    const query = `\r\n-      INSERT INTO users (name, email, password)\r\n-      VALUES ($1, $2, $3)\r\n-      RETURNING id, name, email, created_at;\r\n-    `;\r\n-    const values = [name, email, hashedPassword];\r\n-    const result = await db.query(query, values);\r\n-    const token = jwt.sign(\r\n-      { id: result.rows[0].id, email: result.rows[0].email, role: 'user' },\r\n-      process.env.JWT_SECRET,\r\n-      { expiresIn: '3h' }\r\n-    );\r\n-    res.status(201).json({\r\n-      message: 'User registered successfully.',\r\n-      token,\r\n-      role: 'user',\r\n-      user: {\r\n-        id: result.rows[0].id,\r\n-        name: result.rows[0].name,\r\n-        email: result.rows[0].email,\r\n-        created_at: result.rows[0].created_at\r\n-      }\r\n-    });\r\n-  } catch (error) {\r\n-    console.error('Error registering user:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-// -----------------------------------\r\n-// Clients Routes\r\n-// -----------------------------------\r\n-\r\n-// Client Login\r\n-app.post('/api/users/login', async (req, res) => {\r\n-  const { email, password } = req.body;\r\n-  try {\r\n-    if (!email || !password) {\r\n-      return res.status(400).json({ error: 'Email and password are required.' });\r\n-    }\r\n-    const query = `SELECT * FROM users WHERE email = $1`;\r\n-    const result = await db.query(query, [email]);\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(401).json({ error: 'Invalid email or password.' });\r\n-    }\r\n-    const user = result.rows[0];\r\n-    const isMatch = await bcrypt.compare(password, user.password);\r\n-    if (!isMatch) {\r\n-      return res.status(401).json({ error: 'Invalid email or password.' });\r\n-    }\r\n-    const token = jwt.sign(\r\n-      { id: user.id, email: user.email },\r\n-      process.env.JWT_SECRET,\r\n-      { expiresIn: '3h' }\r\n-    );\r\n-    res.status(200).json({\r\n-      message: 'Login successful',\r\n-      token,\r\n-      role: 'user',\r\n-      user: {\r\n-        id: user.id,\r\n-        name: user.name,\r\n-        email: user.email,\r\n-        created_at: user.created_at\r\n-      }\r\n-    });\r\n-  } catch (error) {\r\n-    console.error('User login error:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Client Profile Get\r\n-app.get('/api/users/profile', authMiddleware, async (req, res) => {\r\n-  try {\r\n-    const query = `SELECT id, name, email, phone, region, address, children_count, created_at FROM users WHERE id = $1`;\r\n-    const result = await db.query(query, [req.user.id]);\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'User not found.' });\r\n-    }\r\n-    res.status(200).json(result.rows[0]);\r\n-  } catch (error) {\r\n-    console.error('Profile fetch error:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Client Profile Update\r\n-app.put('/api/users/profile', authMiddleware, async (req, res) => {\r\n-  const { name, email, password, phone, region, children_count, address } = req.body;\r\n-  try {\r\n-    const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n-    const resultUser = await db.query(queryUser, [req.user.id]);\r\n-    if (resultUser.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'User not found.' });\r\n-    }\r\n-    const existingUser = resultUser.rows[0];\r\n-    const updates = {\r\n-      name: name || existingUser.name,\r\n-      email: email || existingUser.email,\r\n-      phone: phone || existingUser.phone,\r\n-      region: region || existingUser.region,\r\n-      address: address || existingUser.address,\r\n-      children_count:\r\n-        children_count === \"\" || children_count === undefined\r\n-          ? existingUser.children_count\r\n-          : parseInt(children_count, 10)\r\n-    };\r\n-    let hashedPassword = existingUser.password;\r\n-    if (password) {\r\n-      hashedPassword = await bcrypt.hash(password, 10);\r\n-    }\r\n-    const queryUpdate = `\r\n-      UPDATE users\r\n-      SET\r\n-        name = $1,\r\n-        email = $2,\r\n-        password = $3,\r\n-        phone = $4,\r\n-        region = $5,\r\n-        children_count = $6,\r\n-        address = $7\r\n-      WHERE id = $8\r\n-      RETURNING id, name, email, phone, region, children_count, address, created_at;\r\n-    `;\r\n-    const values = [\r\n-      updates.name,\r\n-      updates.email,\r\n-      hashedPassword,\r\n-      updates.phone,\r\n-      updates.region,\r\n-      updates.children_count,\r\n-      updates.address,\r\n-      req.user.id\r\n-    ];\r\n-    const result = await db.query(queryUpdate, values);\r\n-    res.status(200).json({\r\n-      message: 'Profile updated successfully.',\r\n-      user: result.rows[0]\r\n-    });\r\n-  } catch (error) {\r\n-    console.error('Error updating profile:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Client Delete Account\r\n-app.delete('/api/users/profile', authMiddleware, async (req, res) => {\r\n-  try {\r\n-    const bookingCheck = await db.query(\r\n-      `SELECT id FROM bookings WHERE user_id = $1`,\r\n-      [req.user.id]\r\n-    );\r\n-    if (bookingCheck.rows.length > 0) {\r\n-      return res.status(400).json({\r\n-        error: 'You must cancel all bookings before deleting your account.'\r\n-      });\r\n-    }\r\n-    const result = await db.query(\r\n-      `DELETE FROM users WHERE id = $1 RETURNING id`,\r\n-      [req.user.id]\r\n-    );\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'User not found.' });\r\n-    }\r\n-    res.status(200).json({ message: 'User account deleted successfully.' });\r\n-  } catch (error) {\r\n-    console.error('Error deleting user account:', error.message);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Client List All Users\r\n-app.get('/api/users', authMiddleware, async (req, res) => {\r\n-  try {\r\n-    const query = `SELECT id, name, email, created_at FROM users ORDER BY id ASC`;\r\n-    const result = await db.query(query);\r\n-    res.status(200).json(result.rows);\r\n-  } catch (error) {\r\n-    console.error('Error fetching users:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-/* -----------------------------------\r\n    Babysitters Routes\r\n ----------------------------------- */\r\n \r\n-// Babysitter Register\r\n+// Route: Register a new babysitter\r\n app.post('/api/babysitters/register', async (req, res) => {\r\n   const {\r\n     name,\r\n     email,\r\n@@ -416,26 +287,33 @@\n     available_to,\r\n     about,\r\n     rate\r\n   } = req.body;\r\n-  let availableDaysArray = [];\r\n-  if (Array.isArray(available_days)) {\r\n-    availableDaysArray = available_days;\r\n-  } else if (typeof available_days === \"string\") {\r\n-    availableDaysArray = available_days.split(\",\").map(day => day.trim());\r\n+  // Ensure available_days is an array\r\n+    let availableDaysArray = [];\r\n+\r\n+    if (Array.isArray(available_days)) {\r\n+      availableDaysArray = available_days;\r\n+    } else if (typeof available_days === \"string\") {\r\n+      availableDaysArray = available_days.split(\",\").map(day => day.trim());\r\n   }\r\n+\r\n+\r\n   try {\r\n     if (!name || !email || !password || !region || !available_days || !available_from || !available_to || !rate) {\r\n       return res.status(400).json({ error: 'All required fields must be filled.' });\r\n     }\r\n+\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n+\r\n     const query = `\r\n       INSERT INTO babysitters\r\n       (name, email, password, phone, region, available_days, available_from, available_to, about, rate)\r\n       VALUES\r\n       ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\r\n       RETURNING id, name, email, region, created_at;\r\n     `;\r\n+\r\n     const values = [\r\n       name,\r\n       email,\r\n       hashedPassword,\r\n@@ -446,9 +324,11 @@\n       available_to,\r\n       about,\r\n       rate\r\n     ];\r\n+\r\n     const result = await db.query(query, values);\r\n+\r\n     res.status(201).json({\r\n       message: 'Babysitter registered successfully.',\r\n       babysitter: result.rows[0]\r\n     });\r\n@@ -457,30 +337,37 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Babysitter Login\r\n+// Route: Babysitter login with JWT\r\n app.post('/api/babysitters/login', async (req, res) => {\r\n   const { email, password } = req.body;\r\n+\r\n   try {\r\n     if (!email || !password) {\r\n       return res.status(400).json({ error: 'Email and password are required.' });\r\n     }\r\n+\r\n     const query = `SELECT * FROM babysitters WHERE email = $1`;\r\n     const result = await db.query(query, [email]);\r\n+\r\n     if (result.rows.length === 0) {\r\n       return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n+\r\n     const babysitter = result.rows[0];\r\n     const isMatch = await bcrypt.compare(password, babysitter.password);\r\n+\r\n     if (!isMatch) {\r\n       return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n+\r\n     const token = jwt.sign(\r\n       { id: babysitter.id, email: babysitter.email },\r\n       process.env.JWT_SECRET,\r\n       { expiresIn: '3h' }\r\n     );\r\n+\r\n     res.status(200).json({\r\n       message: 'Login successful',\r\n       token,\r\n       role: 'babysitter',\r\n@@ -496,31 +383,35 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Babysitter Profile Get (Self)\r\n+// Route: Get babysitter profile (protected)\r\n app.get('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n   try {\r\n     const query = `\r\n       SELECT id, name, email, region, phone, available_days, available_from, available_to, about, rate, created_at\r\n       FROM babysitters\r\n       WHERE id = $1\r\n     `;\r\n     const result = await db.query(query, [req.user.id]);\r\n+\r\n     if (result.rows.length === 0) {\r\n       return res.status(404).json({ error: 'Babysitter not found.' });\r\n     }\r\n+\r\n     res.status(200).json(result.rows[0]);\r\n   } catch (error) {\r\n     console.error('Error fetching babysitter profile:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n-\r\n-// Babysitter Profile Get by ID\r\n+// Route: Get babysitter profile by ID\r\n app.get(\"/api/babysitters/:id\", async (req, res) => {\r\n   const { id } = req.params;\r\n+\r\n   try {\r\n+\r\n+    // Query to select all relevant fields except password\r\n     const query = `\r\n       SELECT \r\n         id,\r\n         name,\r\n@@ -537,20 +428,75 @@\n         profile_photo\r\n       FROM babysitters\r\n       WHERE id = $1\r\n     `;\r\n+\r\n     const result = await db.query(query, [id]);\r\n+\r\n     if (result.rows.length === 0) {\r\n       return res.status(404).json({ error: \"Babysitter not found.\" });\r\n     }\r\n+\r\n     res.json(result.rows[0]);\r\n   } catch (error) {\r\n     console.error(\"Error fetching babysitter profile:\", error);\r\n     res.status(500).json({ error: \"Internal server error.\" });\r\n   }\r\n });\r\n+// Babysitter approves or cancels a booking\r\n+app.put(\"/api/babysitters/bookings/:bookingId/status\", async (req, res) => {\r\n+  const { bookingId } = req.params;\r\n+  const { status } = req.body;\r\n \r\n-// Babysitter Profile Update\r\n+  if (![\"approved\", \"cancelled\"].includes(status)) {\r\n+    return res.status(400).json({ message: \"Invalid status\" });\r\n+  }\r\n+\r\n+  try {\r\n+    // Update the status\r\n+    await db.query(\r\n+      \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n+      [status, bookingId]\r\n+    );\r\n+\r\n+    res.json({ message: \"Booking status updated successfully\" });\r\n+  } catch (err) {\r\n+    console.error(\"Error updating booking status:\", err);\r\n+    res.status(500).json({ message: \"Internal server error\" });\r\n+  }\r\n+});\r\n+\r\n+// Get bookings for a babysitter including client details\r\n+app.get(\"/api/babysitters/:id/bookings\", async (req, res) => {\r\n+  const babysitterId = req.params.id;\r\n+\r\n+  try {\r\n+    const result = await db.query(\r\n+      `\r\n+      SELECT\r\n+        bookings.*,\r\n+        users.name AS parent_name,\r\n+        users.address AS client_address,\r\n+        users.phone AS client_phone,\r\n+        users.region AS client_region,\r\n+        users.children_count AS client_children\r\n+      FROM bookings\r\n+      JOIN users\r\n+        ON bookings.user_id = users.id\r\n+      WHERE bookings.babysitter_id = $1\r\n+      ORDER BY bookings.date DESC\r\n+      `,\r\n+      [babysitterId]\r\n+    );\r\n+\r\n+    res.json(result.rows);\r\n+  } catch (err) {\r\n+    console.error(\"Error fetching babysitter bookings:\", err);\r\n+    res.status(500).json({ message: \"Internal server error\" });\r\n+  }\r\n+});\r\n+\r\n+// Route: Update babysitter profile (protected)\r\n app.put('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n   const {\r\n     name,\r\n     email,\r\n@@ -561,14 +507,17 @@\n     available_to,\r\n     about,\r\n     rate\r\n   } = req.body;\r\n+\r\n   try {\r\n     const queryBabysitter = `SELECT * FROM babysitters WHERE id = $1`;\r\n     const resultBabysitter = await db.query(queryBabysitter, [req.user.id]);\r\n+\r\n     if (resultBabysitter.rows.length === 0) {\r\n       return res.status(404).json({ error: 'Babysitter not found.' });\r\n     }\r\n+\r\n     const updates = {\r\n       name: name || resultBabysitter.rows[0].name,\r\n       email: email || resultBabysitter.rows[0].email,\r\n       phone: phone || resultBabysitter.rows[0].phone,\r\n@@ -578,8 +527,9 @@\n       available_to: available_to || resultBabysitter.rows[0].available_to,\r\n       about: about || resultBabysitter.rows[0].about,\r\n       rate: rate || resultBabysitter.rows[0].rate\r\n     };\r\n+\r\n     const queryUpdate = `\r\n       UPDATE babysitters\r\n       SET name = $1,\r\n           email = $2,\r\n@@ -592,8 +542,9 @@\n           rate = $9\r\n       WHERE id = $10\r\n       RETURNING id, name, email, region, phone, available_days, available_from, available_to, about, rate, created_at;\r\n     `;\r\n+\r\n     const values = [\r\n       updates.name,\r\n       updates.email,\r\n       updates.phone,\r\n@@ -604,9 +555,11 @@\n       updates.about,\r\n       updates.rate,\r\n       req.user.id\r\n     ];\r\n+\r\n     const result = await db.query(queryUpdate, values);\r\n+\r\n     res.status(200).json({\r\n       message: 'Babysitter profile updated successfully.',\r\n       babysitter: result.rows[0]\r\n     });\r\n@@ -615,35 +568,41 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Babysitter Delete Account\r\n+// Route: Delete babysitter account (protected, must have no bookings)\r\n app.delete('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n   try {\r\n+    // Check if babysitter has related bookings\r\n     const bookingCheck = await db.query(\r\n       `SELECT id FROM bookings WHERE babysitter_id = $1`,\r\n       [req.user.id]\r\n     );\r\n+\r\n     if (bookingCheck.rows.length > 0) {\r\n       return res.status(400).json({\r\n         error: 'You must cancel all bookings before deleting your account.'\r\n       });\r\n     }\r\n+\r\n+    // Delete babysitter\r\n     const result = await db.query(\r\n       `DELETE FROM babysitters WHERE id = $1 RETURNING id`,\r\n       [req.user.id]\r\n     );\r\n+\r\n     if (result.rows.length === 0) {\r\n       return res.status(404).json({ error: 'Babysitter not found.' });\r\n     }\r\n+\r\n     res.status(200).json({ message: 'Babysitter account deleted successfully.' });\r\n   } catch (error) {\r\n     console.error('Error deleting babysitter account:', error.message);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Babysitter List All\r\n+// Route: Get all babysitters\r\n app.get('/api/babysitters', async (req, res) => {\r\n   try {\r\n     const query = `\r\n       SELECT\r\n@@ -669,141 +628,266 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Babysitter Bookings List\r\n-app.get(\"/api/babysitters/:id/bookings\", async (req, res) => {\r\n-  const babysitterId = req.params.id;\r\n+/* -----------------------------------\r\n+   Users Routes\r\n+----------------------------------- */\r\n+\r\n+// Route: Register a new user\r\n+app.post('/api/users/register', async (req, res) => {\r\n+  const { name, email, password } = req.body;\r\n+\r\n   try {\r\n-    const result = await db.query(\r\n-      `\r\n-      SELECT\r\n-        bookings.*,\r\n-        users.name AS parent_name,\r\n-        users.address AS client_address,\r\n-        users.phone AS client_phone,\r\n-        users.region AS client_region,\r\n-        users.children_count AS client_children\r\n-      FROM bookings\r\n-      JOIN users\r\n-        ON bookings.user_id = users.id\r\n-      WHERE bookings.babysitter_id = $1\r\n-      ORDER BY bookings.date DESC\r\n-      `,\r\n-      [babysitterId]\r\n+    if (!name || !email || !password) {\r\n+      return res.status(400).json({ error: 'Name, email, and password are required.' });\r\n+    }\r\n+\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+\r\n+    const query = `\r\n+      INSERT INTO users (name, email, password)\r\n+      VALUES ($1, $2, $3)\r\n+      RETURNING id, name, email, created_at;\r\n+    `;\r\n+\r\n+    const values = [name, email, hashedPassword];\r\n+    const result = await db.query(query, values);\r\n+    const token = jwt.sign(\r\n+      { id: result.rows[0].id, email: result.rows[0].email, role: 'user' },\r\n+      process.env.JWT_SECRET,\r\n+      { expiresIn: '3h' }\r\n     );\r\n-    res.json(result.rows);\r\n-  } catch (err) {\r\n-    console.error(\"Error fetching babysitter bookings:\", err);\r\n-    res.status(500).json({ message: \"Internal server error\" });\r\n-  }\r\n-});\r\n+    \r\n+    res.status(201).json({\r\n+      message: 'User registered successfully.',\r\n+      token,\r\n+      role: 'user',\r\n+      user: {\r\n+        id: result.rows[0].id,\r\n+        name: result.rows[0].name,\r\n+        email: result.rows[0].email,\r\n+        created_at: result.rows[0].created_at\r\n+      }\r\n+    });\r\n \r\n-// Babysitter Update Booking Status\r\n-app.put(\"/api/babysitters/bookings/:bookingId/status\", async (req, res) => {\r\n-  const { bookingId } = req.params;\r\n-  const { status } = req.body;\r\n-  if (![\"approved\", \"cancelled\"].includes(status)) {\r\n-    return res.status(400).json({ message: \"Invalid status\" });\r\n+  } catch (error) {\r\n+    console.error('Error registering user:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n-  try {\r\n-    await db.query(\r\n-      \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n-      [status, bookingId]\r\n-    );\r\n-    res.json({ message: \"Booking status updated successfully\" });\r\n-  } catch (err) {\r\n-    console.error(\"Error updating booking status:\", err);\r\n-    res.status(500).json({ message: \"Internal server error\" });\r\n-  }\r\n });\r\n \r\n-/* -----------------------------------\r\n-   Password Management Routes\r\n------------------------------------ */\r\n+// Route: User login with JWT\r\n+app.post('/api/users/login', async (req, res) => {\r\n+  const { email, password } = req.body;\r\n \r\n-// Babysitter Change Password\r\n-app.put('/api/babysitters/change-password', authMiddleware, async (req, res) => {\r\n-  const { currentPassword, newPassword } = req.body;\r\n   try {\r\n-    if (!currentPassword || !newPassword) {\r\n-      return res.status(400).json({ error: 'Current and new password are required.' });\r\n+    if (!email || !password) {\r\n+      return res.status(400).json({ error: 'Email and password are required.' });\r\n     }\r\n-    const query = `SELECT * FROM babysitters WHERE id = $1`;\r\n-    const result = await db.query(query, [req.user.id]);\r\n+\r\n+    const query = `SELECT * FROM users WHERE email = $1`;\r\n+    const result = await db.query(query, [email]);\r\n+\r\n     if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'Babysitter not found.' });\r\n+      return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n-    const babysitter = result.rows[0];\r\n-    const isMatch = await bcrypt.compare(currentPassword, babysitter.password);\r\n+\r\n+    const user = result.rows[0];\r\n+    const isMatch = await bcrypt.compare(password, user.password);\r\n+\r\n     if (!isMatch) {\r\n-      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n+      return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n-    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n-    await db.query(\r\n-      `UPDATE babysitters SET password = $1 WHERE id = $2`,\r\n-      [hashedPassword, req.user.id]\r\n+\r\n+    const token = jwt.sign(\r\n+      { id: user.id, email: user.email },\r\n+      process.env.JWT_SECRET,\r\n+      { expiresIn: '3h' }\r\n     );\r\n-    res.status(200).json({ message: 'Password updated successfully.' });\r\n+\r\n+    res.status(200).json({\r\n+      message: 'Login successful',\r\n+      token,\r\n+      role: 'user',\r\n+      user: {\r\n+        id: user.id,\r\n+        name: user.name,\r\n+        email: user.email,\r\n+        created_at: user.created_at\r\n+      }\r\n+    });\r\n   } catch (error) {\r\n-    console.error('Error changing password:', error.message);\r\n+    console.error('User login error:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// User Change Password\r\n-app.put('/api/users/change-password', authMiddleware, async (req, res) => {\r\n-  const { currentPassword, newPassword } = req.body;\r\n+// Route: Get logged-in user profile (protected)\r\n+app.get('/api/users/profile', authMiddleware, async (req, res) => {\r\n   try {\r\n-    if (!currentPassword || !newPassword) {\r\n-      return res.status(400).json({ error: 'Both current and new passwords are required.' });\r\n+    const query = `SELECT id, name, email, phone, region, address, children_count, created_at FROM users WHERE id = $1`;\r\n+    const result = await db.query(query, [req.user.id]);\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n     }\r\n+\r\n+    res.status(200).json(result.rows[0]);\r\n+  } catch (error) {\r\n+    console.error('Profile fetch error:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: Update user profile (protected)\r\n+app.put('/api/users/profile', authMiddleware, async (req, res) => {\r\n+  const {\r\n+    name,\r\n+    email,\r\n+    password,\r\n+    phone,\r\n+    region,\r\n+    children_count,\r\n+    address\r\n+  } = req.body;\r\n+\r\n+  try {\r\n     const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n     const resultUser = await db.query(queryUser, [req.user.id]);\r\n+\r\n     if (resultUser.rows.length === 0) {\r\n       return res.status(404).json({ error: 'User not found.' });\r\n     }\r\n-    const user = resultUser.rows[0];\r\n-    const isMatch = await bcrypt.compare(currentPassword, user.password);\r\n-    if (!isMatch) {\r\n-      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n+\r\n+    const existingUser = resultUser.rows[0];\r\n+\r\n+    // Safe updates: use old values if not provided\r\n+    const updates = {\r\n+      name: name || existingUser.name,\r\n+      email: email || existingUser.email,\r\n+      phone: phone || existingUser.phone,\r\n+      region: region || existingUser.region,\r\n+      address: address || existingUser.address,\r\n+      children_count:\r\n+        children_count === \"\" || children_count === undefined\r\n+          ? existingUser.children_count\r\n+          : parseInt(children_count, 10)\r\n+    };\r\n+\r\n+    let hashedPassword = existingUser.password;\r\n+    if (password) {\r\n+      hashedPassword = await bcrypt.hash(password, 10);\r\n     }\r\n-    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n-    await db.query(\r\n-      `UPDATE users SET password = $1 WHERE id = $2`,\r\n-      [hashedPassword, req.user.id]\r\n+\r\n+    const queryUpdate = `\r\n+      UPDATE users\r\n+      SET\r\n+        name = $1,\r\n+        email = $2,\r\n+        password = $3,\r\n+        phone = $4,\r\n+        region = $5,\r\n+        children_count = $6,\r\n+        address = $7\r\n+      WHERE id = $8\r\n+      RETURNING id, name, email, phone, region, children_count, address, created_at;\r\n+    `;\r\n+\r\n+    const values = [\r\n+      updates.name,\r\n+      updates.email,\r\n+      hashedPassword,\r\n+      updates.phone,\r\n+      updates.region,\r\n+      updates.children_count,\r\n+      updates.address,\r\n+      req.user.id\r\n+    ];\r\n+\r\n+    const result = await db.query(queryUpdate, values);\r\n+\r\n+    res.status(200).json({\r\n+      message: 'Profile updated successfully.',\r\n+      user: result.rows[0]\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error updating profile:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: Delete user account (protected, must have no bookings)\r\n+app.delete('/api/users/profile', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    // Check if user has related bookings\r\n+    const bookingCheck = await db.query(\r\n+      `SELECT id FROM bookings WHERE user_id = $1`,\r\n+      [req.user.id]\r\n     );\r\n-    res.status(200).json({ message: 'Password updated successfully.' });\r\n+\r\n+    if (bookingCheck.rows.length > 0) {\r\n+      return res.status(400).json({\r\n+        error: 'You must cancel all bookings before deleting your account.'\r\n+      });\r\n+    }\r\n+\r\n+    // Delete user\r\n+    const result = await db.query(\r\n+      `DELETE FROM users WHERE id = $1 RETURNING id`,\r\n+      [req.user.id]\r\n+    );\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n+    }\r\n+\r\n+    res.status(200).json({ message: 'User account deleted successfully.' });\r\n   } catch (error) {\r\n-    console.error('Error changing password:', error);\r\n+    console.error('Error deleting user account:', error.message);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-/* -----------------------------------\r\n-   Universal Login\r\n------------------------------------ */\r\n+// Route: Get all users (protected)\r\n+app.get('/api/users', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    const query = `SELECT id, name, email, created_at FROM users ORDER BY id ASC`;\r\n+    const result = await db.query(query);\r\n \r\n-// Universal Login (User or Babysitter)\r\n+    res.status(200).json(result.rows);\r\n+  } catch (error) {\r\n+    console.error('Error fetching users:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: Universal login (users or babysitters)\r\n app.post('/api/login', async (req, res) => {\r\n   const { email, password } = req.body;\r\n+\r\n   try {\r\n     if (!email || !password) {\r\n       return res.status(400).json({ error: 'Email and password are required.' });\r\n     }\r\n+\r\n+    // First try to find in users\r\n     const userQuery = `SELECT * FROM users WHERE email = $1`;\r\n     const userResult = await db.query(userQuery, [email]);\r\n+\r\n     if (userResult.rows.length > 0) {\r\n       const user = userResult.rows[0];\r\n       const isMatch = await bcrypt.compare(password, user.password);\r\n       if (!isMatch) {\r\n         return res.status(401).json({ error: 'Invalid email or password.' });\r\n       }\r\n+\r\n       const token = jwt.sign(\r\n         { id: user.id, email: user.email, role: 'user' },\r\n         process.env.JWT_SECRET,\r\n         { expiresIn: '3h' }\r\n       );\r\n+\r\n       return res.status(200).json({\r\n         message: 'Login successful',\r\n         token,\r\n         role: 'user',\r\n@@ -814,21 +898,26 @@\n           created_at: user.created_at\r\n         }\r\n       });\r\n     }\r\n+\r\n+    // If not found, try babysitters\r\n     const babysitterQuery = `SELECT * FROM babysitters WHERE email = $1`;\r\n     const babysitterResult = await db.query(babysitterQuery, [email]);\r\n+\r\n     if (babysitterResult.rows.length > 0) {\r\n       const babysitter = babysitterResult.rows[0];\r\n       const isMatch = await bcrypt.compare(password, babysitter.password);\r\n       if (!isMatch) {\r\n         return res.status(401).json({ error: 'Invalid email or password.' });\r\n       }\r\n+\r\n       const token = jwt.sign(\r\n         { id: babysitter.id, email: babysitter.email, role: 'babysitter' },\r\n         process.env.JWT_SECRET,\r\n         { expiresIn: '3h' }\r\n       );\r\n+\r\n       return res.status(200).json({\r\n         message: 'Login successful',\r\n         token,\r\n         role: 'babysitter',\r\n@@ -839,29 +928,201 @@\n           region: babysitter.region\r\n         }\r\n       });\r\n     }\r\n+\r\n+    // Not found in either table\r\n     return res.status(401).json({ error: 'Invalid email or password.' });\r\n+\r\n   } catch (error) {\r\n     console.error('Universal login error:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n+\r\n+// Route: Change babysitter password (protected)\r\n+app.put('/api/babysitters/change-password', authMiddleware, async (req, res) => {\r\n+  const { currentPassword, newPassword } = req.body;\r\n+\r\n+  try {\r\n+    if (!currentPassword || !newPassword) {\r\n+      return res.status(400).json({ error: 'Current and new password are required.' });\r\n+    }\r\n+\r\n+    // Fetch babysitter from DB\r\n+    const query = `SELECT * FROM babysitters WHERE id = $1`;\r\n+    const result = await db.query(query, [req.user.id]);\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'Babysitter not found.' });\r\n+    }\r\n+\r\n+    const babysitter = result.rows[0];\r\n+\r\n+    // Check if current password is correct\r\n+    const isMatch = await bcrypt.compare(currentPassword, babysitter.password);\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n+    }\r\n+\r\n+    // Hash new password\r\n+    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n+\r\n+    // Update password in DB\r\n+    const updateQuery = `\r\n+      UPDATE babysitters\r\n+      SET password = $1\r\n+      WHERE id = $2\r\n+    `;\r\n+    await db.query(updateQuery, [hashedPassword, req.user.id]);\r\n+\r\n+    res.status(200).json({ message: 'Password updated successfully.' });\r\n+  } catch (error) {\r\n+    console.error('Error changing password:', error.message);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: Change user password (protected)\r\n+app.put('/api/users/change-password', authMiddleware, async (req, res) => {\r\n+  const { currentPassword, newPassword } = req.body;\r\n+\r\n+  try {\r\n+    if (!currentPassword || !newPassword) {\r\n+      return res.status(400).json({ error: 'Both current and new passwords are required.' });\r\n+    }\r\n+\r\n+    // Get the user\r\n+    const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n+    const resultUser = await db.query(queryUser, [req.user.id]);\r\n+\r\n+    if (resultUser.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n+    }\r\n+\r\n+    const user = resultUser.rows[0];\r\n+\r\n+    // Compare current password\r\n+    const isMatch = await bcrypt.compare(currentPassword, user.password);\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n+    }\r\n+\r\n+    // Hash new password\r\n+    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n+\r\n+    // Update password\r\n+    const queryUpdate = `\r\n+      UPDATE users\r\n+      SET password = $1\r\n+      WHERE id = $2\r\n+    `;\r\n+    await db.query(queryUpdate, [hashedPassword, req.user.id]);\r\n+\r\n+    res.status(200).json({ message: 'Password updated successfully.' });\r\n+  } catch (error) {\r\n+    console.error('Error changing password:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: Update user password (protected)\r\n+app.put('/api/users/profile/password', authMiddleware, async (req, res) => {\r\n+  const { currentPassword, newPassword } = req.body;\r\n+\r\n+  try {\r\n+    if (!currentPassword || !newPassword) {\r\n+      return res.status(400).json({ error: 'Current and new password are required.' });\r\n+    }\r\n+\r\n+    // Fetch user\r\n+    const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n+    const resultUser = await db.query(queryUser, [req.user.id]);\r\n+\r\n+    if (resultUser.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n+    }\r\n+\r\n+    const user = resultUser.rows[0];\r\n+\r\n+    // Verify current password\r\n+    const isMatch = await bcrypt.compare(currentPassword, user.password);\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n+    }\r\n+\r\n+    // Hash new password\r\n+    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n+\r\n+    // Update password\r\n+    const queryUpdate = `\r\n+      UPDATE users\r\n+      SET password = $1\r\n+      WHERE id = $2\r\n+      RETURNING id;\r\n+    `;\r\n+    await db.query(queryUpdate, [hashedPassword, req.user.id]);\r\n+\r\n+    res.status(200).json({ message: 'Password updated successfully.' });\r\n+  } catch (error) {\r\n+    console.error('Error updating password:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: Update booking status (protected)\r\n+app.put('/api/bookings/:id/status', authMiddleware, async (req, res) => {\r\n+  const { id } = req.params;\r\n+  const { status } = req.body;\r\n+\r\n+  try {\r\n+    // Valida status permitido\r\n+    const validStatuses = ['pending', 'confirmed', 'rejected', 'cancelled'];\r\n+    if (!validStatuses.includes(status)) {\r\n+      return res.status(400).json({ error: 'Invalid status value.' });\r\n+    }\r\n+\r\n+    // update database\r\n+    const query = `\r\n+      UPDATE bookings\r\n+      SET status = $1\r\n+      WHERE id = $2\r\n+      RETURNING *;\r\n+    `;\r\n+    const values = [status, id];\r\n+    const result = await db.query(query, values);\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'Booking not found.' });\r\n+    }\r\n+\r\n+    res.status(200).json({\r\n+      message: 'Booking status updated successfully.',\r\n+      booking: result.rows[0],\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error updating booking status:', error);\r\n+    res.status(500).json({ error: 'Internal server error.' });\r\n+  }\r\n+});\r\n+\r\n /* -----------------------------------\r\n    Bookings Routes\r\n ----------------------------------- */\r\n \r\n-// Create Booking\r\n+// Route: Create a new booking\r\n app.post('/api/bookings', async (req, res) => {\r\n   const { user_id, babysitter_id, date, time_start, time_end } = req.body;\r\n+\r\n   try {\r\n     const query = `\r\n       INSERT INTO bookings (user_id, babysitter_id, date, time_start, time_end)\r\n       VALUES ($1, $2, $3, $4, $5)\r\n       RETURNING *;\r\n     `;\r\n     const values = [user_id, babysitter_id, date, time_start, time_end];\r\n     const result = await db.query(query, values);\r\n+\r\n     res.status(201).json({\r\n       message: 'Booking created successfully.',\r\n       booking: result.rows[0]\r\n     });\r\n@@ -870,11 +1131,12 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Get Bookings for User\r\n+// Route: Get all bookings for a user\r\n app.get('/api/bookings/:user_id', async (req, res) => {\r\n   const { user_id } = req.params;\r\n+\r\n   try {\r\n     const query = `\r\n       SELECT \r\n         b.id, b.date, b.time_start, b.time_end, b.status,\r\n@@ -884,18 +1146,19 @@\n       WHERE b.user_id = $1\r\n       ORDER BY b.date ASC;\r\n     `;\r\n     const result = await db.query(query, [user_id]);\r\n+\r\n     res.status(200).json(result.rows);\r\n   } catch (error) {\r\n     console.error('Error fetching bookings:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n-\r\n-// Get Bookings for Babysitter\r\n+// Route: Get all bookings for a babysitter\r\n app.get('/api/babysitters/:id/bookings', async (req, res) => {\r\n   const babysitterId = req.params.id;\r\n+\r\n   try {\r\n     const query = `\r\n       SELECT \r\n         b.id,\r\n@@ -908,46 +1171,18 @@\n       JOIN users u ON b.user_id = u.id\r\n       WHERE b.babysitter_id = $1\r\n       ORDER BY b.date ASC, b.time_start ASC;\r\n     `;\r\n+\r\n     const result = await db.query(query, [babysitterId]);\r\n+\r\n     res.status(200).json(result.rows);\r\n   } catch (error) {\r\n     console.error('Error fetching babysitter bookings:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Update Booking Status (Generic)\r\n-app.put('/api/bookings/:id/status', authMiddleware, async (req, res) => {\r\n-  const { id } = req.params;\r\n-  const { status } = req.body;\r\n-  try {\r\n-    const validStatuses = ['pending', 'confirmed', 'rejected', 'cancelled'];\r\n-    if (!validStatuses.includes(status)) {\r\n-      return res.status(400).json({ error: 'Invalid status value.' });\r\n-    }\r\n-    const query = `\r\n-      UPDATE bookings\r\n-      SET status = $1\r\n-      WHERE id = $2\r\n-      RETURNING *;\r\n-    `;\r\n-    const values = [status, id];\r\n-    const result = await db.query(query, values);\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'Booking not found.' });\r\n-    }\r\n-    res.status(200).json({\r\n-      message: 'Booking status updated successfully.',\r\n-      booking: result.rows[0],\r\n-    });\r\n-  } catch (error) {\r\n-    console.error('Error updating booking status:', error);\r\n-    res.status(500).json({ error: 'Internal server error.' });\r\n-  }\r\n-});\r\n-\r\n /* -----------------------------------\r\n    Root Endpoint\r\n ----------------------------------- */\r\n app.get('/', (req, res) => {\r\n"
                },
                {
                    "date": 1751586371919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,15 @@\n-// Import dependencies\r\n+// -----------------------------------\r\n+// Dependencies and Setup\r\n+// -----------------------------------\r\n const express = require('express');\r\n const app = express();\r\n-require('dotenv').config(); // Load environment variables\r\n-const bcrypt = require('bcrypt'); // For hashing passwords\r\n-const jwt = require('jsonwebtoken'); // JSON Web Token for authentication\r\n-const { Client } = require('pg'); // PostgreSQL client\r\n-const authMiddleware = require('./middleware/authMiddleware'); // Custom authentication middleware\r\n-const cors = require('cors'); // For handling CORS\r\n+require('dotenv').config();\r\n+const bcrypt = require('bcrypt');\r\n+const jwt = require('jsonwebtoken');\r\n+const { Client } = require('pg');\r\n+const authMiddleware = require('./middleware/authMiddleware');\r\n+const cors = require('cors');\r\n \r\n // PostgreSQL client configuration\r\n const db = new Client({\r\n   user: 'postgres',\r\n@@ -21,80 +23,54 @@\n db.connect()\r\n   .then(() => console.log('Connected to PostgreSQL'))\r\n   .catch(err => console.error('Connection error', err.stack));\r\n \r\n-// Middleware to parse JSON requests\r\n+// Middleware\r\n app.use(express.json());\r\n app.use(cors());\r\n \r\n /* -----------------------------------\r\n    Admin Routes\r\n ----------------------------------- */\r\n \r\n-/**\r\n- * Admin Register Endpoint\r\n- * POST /api/admin/register\r\n- * Request Body: { name, email, password }\r\n- * Response: { message }\r\n- */\r\n+// Admin Register\r\n app.post(\"/api/admin/register\", async (req, res) => {\r\n   const { name, email, password } = req.body;\r\n-\r\n   try {\r\n-    // Check if admin with this email already exists\r\n     const existing = await db.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n     if (existing.rows.length > 0) {\r\n       return res.status(400).json({ message: \"Admin with this email already exists\" });\r\n     }\r\n-\r\n-    // Hash the password\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n-\r\n-    // Insert new admin\r\n     await db.query(\r\n       \"INSERT INTO admins (name, email, password) VALUES ($1, $2, $3)\",\r\n       [name, email, hashedPassword]\r\n     );\r\n-\r\n     res.json({ message: \"Admin created successfully\" });\r\n   } catch (err) {\r\n     console.error(\"Admin register error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-/**\r\n- * Admin Login Endpoint\r\n- * POST /api/admin/login\r\n- * Request Body: { email, password }\r\n- * Response: { token, user }\r\n- */\r\n+// Admin Login\r\n app.post(\"/api/admin/login\", async (req, res) => {\r\n   const { email, password } = req.body;\r\n-\r\n   try {\r\n-    // Find admin by email\r\n     const result = await db.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n-\r\n     if (result.rows.length === 0) {\r\n       return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n-\r\n     const admin = result.rows[0];\r\n-\r\n-    // Compare password hash\r\n     const validPassword = await bcrypt.compare(password, admin.password);\r\n     if (!validPassword) {\r\n       return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n-\r\n-    // Generate JWT\r\n     const token = jwt.sign(\r\n       { id: admin.id, email: admin.email, role: \"admin\" },\r\n       process.env.JWT_SECRET,\r\n       { expiresIn: \"8h\" }\r\n     );\r\n-\r\n     res.json({\r\n       token,\r\n       user: {\r\n         id: admin.id,\r\n@@ -107,29 +83,21 @@\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-/**\r\n- * Admin Summary Endpoint\r\n- * GET /api/admin/summary\r\n- * Response: { usersCount, babysittersCount, bookingsCount, pendingBookings }\r\n- */\r\n+// Admin Summary\r\n app.get(\"/api/admin/summary\", async (req, res) => {\r\n   try {\r\n     const usersResult = await db.query(\"SELECT COUNT(*) FROM users\");\r\n     const usersCount = parseInt(usersResult.rows[0].count);\r\n-\r\n     const babysittersResult = await db.query(\"SELECT COUNT(*) FROM babysitters\");\r\n     const babysittersCount = parseInt(babysittersResult.rows[0].count);\r\n-\r\n     const bookingsResult = await db.query(\"SELECT COUNT(*) FROM bookings\");\r\n     const bookingsCount = parseInt(bookingsResult.rows[0].count);\r\n-\r\n     const pendingResult = await db.query(\r\n       \"SELECT COUNT(*) FROM bookings WHERE status = 'pending'\"\r\n     );\r\n     const pendingBookings = parseInt(pendingResult.rows[0].count);\r\n-\r\n     res.json({\r\n       usersCount,\r\n       babysittersCount,\r\n       bookingsCount,\r\n@@ -140,13 +108,9 @@\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-/**\r\n- * Admin Bookings Endpoint\r\n- * GET /api/admin/bookings\r\n- * Response: array of bookings with client and babysitter names\r\n- */\r\n+// Admin Bookings List\r\n app.get(\"/api/admin/bookings\", async (req, res) => {\r\n   try {\r\n     const result = await db.query(`\r\n       SELECT\r\n@@ -161,106 +125,76 @@\n       JOIN users u ON b.user_id = u.id\r\n       JOIN babysitters s ON b.babysitter_id = s.id\r\n       ORDER BY b.date DESC\r\n     `);\r\n-\r\n     res.json(result.rows);\r\n   } catch (err) {\r\n     console.error(\"Admin bookings error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-/**\r\n- * Admin Users Endpoint\r\n- * GET /api/admin/users\r\n- * Response: array of users and babysitters\r\n- */\r\n+// Admin Users List\r\n app.get(\"/api/admin/users\", async (req, res) => {\r\n   try {\r\n     const usersResult = await db.query(`\r\n       SELECT id, name, email, 'client' AS role, created_at\r\n       FROM users\r\n     `);\r\n-\r\n     const babysittersResult = await db.query(`\r\n       SELECT id, name, email, 'babysitter' AS role, created_at\r\n       FROM babysitters\r\n     `);\r\n-\r\n     const combined = [...usersResult.rows, ...babysittersResult.rows];\r\n-\r\n     res.json(combined);\r\n   } catch (err) {\r\n     console.error(\"Admin users error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n-/**\r\n- * Admin Update Booking Status Endpoint\r\n- * PUT /api/admin/bookings/:id/status\r\n- * Request Body: { status }\r\n- * Response: { message }\r\n- */\r\n+\r\n+// Admin Update Booking Status\r\n app.put(\"/api/admin/bookings/:id/status\", async (req, res) => {\r\n   const bookingId = req.params.id;\r\n   const { status } = req.body;\r\n-\r\n-  // Validate status\r\n   const allowedStatuses = [\"pending\", \"approved\", \"cancelled\"];\r\n   if (!allowedStatuses.includes(status)) {\r\n     return res.status(400).json({ message: \"Invalid status value\" });\r\n   }\r\n-\r\n   try {\r\n-    // Update booking status in the database using client\r\n     await db.query(\r\n       \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n       [status, bookingId]\r\n     );\r\n-\r\n     res.json({ message: \"Booking status updated successfully\" });\r\n   } catch (err) {\r\n     console.error(\"Update booking status error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-/**\r\n- * Admin Delete User Endpoint\r\n- * DELETE /api/admin/users/:role/:id\r\n- * Response: { message }\r\n- */\r\n+// Admin Delete User\r\n app.delete(\"/api/admin/users/:role/:id\", async (req, res) => {\r\n   const { role, id } = req.params;\r\n-\r\n-  // Validate role value\r\n   if (role !== \"client\" && role !== \"babysitter\") {\r\n     return res.status(400).json({ message: \"Invalid role\" });\r\n   }\r\n-\r\n-  // Determine table name\r\n   const table = role === \"client\" ? \"users\" : \"babysitters\";\r\n-\r\n   try {\r\n-    // Delete related bookings first\r\n     if (role === \"client\") {\r\n       await db.query(\"DELETE FROM bookings WHERE user_id = $1\", [id]);\r\n     } else if (role === \"babysitter\") {\r\n       await db.query(\"DELETE FROM bookings WHERE babysitter_id = $1\", [id]);\r\n     }\r\n-\r\n-    // Delete user or babysitter\r\n     await db.query(`DELETE FROM ${table} WHERE id = $1`, [id]);\r\n-\r\n     res.json({ message: `${role} and related bookings deleted successfully` });\r\n   } catch (err) {\r\n     console.error(\"Delete user error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-// DELETE booking by ID (Admin)\r\n+// Admin Delete Booking\r\n app.delete(\"/api/admin/bookings/:id\", async (req, res) => {\r\n   try {\r\n     await db.query(\"DELETE FROM bookings WHERE id = $1\", [req.params.id]);\r\n     res.json({ message: \"Booking deleted successfully\" });\r\n@@ -270,12 +204,207 @@\n   }\r\n });\r\n \r\n /* -----------------------------------\r\n+   Clients Routes\r\n+----------------------------------- */\r\n+\r\n+// Client Register\r\n+app.post('/api/users/register', async (req, res) => {\r\n+  const { name, email, password } = req.body;\r\n+  try {\r\n+    if (!name || !email || !password) {\r\n+      return res.status(400).json({ error: 'Name, email, and password are required.' });\r\n+    }\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+    const query = `\r\n+      INSERT INTO users (name, email, password)\r\n+      VALUES ($1, $2, $3)\r\n+      RETURNING id, name, email, created_at;\r\n+    `;\r\n+    const values = [name, email, hashedPassword];\r\n+    const result = await db.query(query, values);\r\n+    const token = jwt.sign(\r\n+      { id: result.rows[0].id, email: result.rows[0].email, role: 'user' },\r\n+      process.env.JWT_SECRET,\r\n+      { expiresIn: '3h' }\r\n+    );\r\n+    res.status(201).json({\r\n+      message: 'User registered successfully.',\r\n+      token,\r\n+      role: 'user',\r\n+      user: {\r\n+        id: result.rows[0].id,\r\n+        name: result.rows[0].name,\r\n+        email: result.rows[0].email,\r\n+        created_at: result.rows[0].created_at\r\n+      }\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error registering user:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+// -----------------------------------\r\n+// Clients Routes\r\n+// -----------------------------------\r\n+\r\n+// Client Login\r\n+app.post('/api/users/login', async (req, res) => {\r\n+  const { email, password } = req.body;\r\n+  try {\r\n+    if (!email || !password) {\r\n+      return res.status(400).json({ error: 'Email and password are required.' });\r\n+    }\r\n+    const query = `SELECT * FROM users WHERE email = $1`;\r\n+    const result = await db.query(query, [email]);\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(401).json({ error: 'Invalid email or password.' });\r\n+    }\r\n+    const user = result.rows[0];\r\n+    const isMatch = await bcrypt.compare(password, user.password);\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({ error: 'Invalid email or password.' });\r\n+    }\r\n+    const token = jwt.sign(\r\n+      { id: user.id, email: user.email },\r\n+      process.env.JWT_SECRET,\r\n+      { expiresIn: '3h' }\r\n+    );\r\n+    res.status(200).json({\r\n+      message: 'Login successful',\r\n+      token,\r\n+      role: 'user',\r\n+      user: {\r\n+        id: user.id,\r\n+        name: user.name,\r\n+        email: user.email,\r\n+        created_at: user.created_at\r\n+      }\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('User login error:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Client Profile Get\r\n+app.get('/api/users/profile', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    const query = `SELECT id, name, email, phone, region, address, children_count, created_at FROM users WHERE id = $1`;\r\n+    const result = await db.query(query, [req.user.id]);\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n+    }\r\n+    res.status(200).json(result.rows[0]);\r\n+  } catch (error) {\r\n+    console.error('Profile fetch error:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Client Profile Update\r\n+app.put('/api/users/profile', authMiddleware, async (req, res) => {\r\n+  const { name, email, password, phone, region, children_count, address } = req.body;\r\n+  try {\r\n+    const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n+    const resultUser = await db.query(queryUser, [req.user.id]);\r\n+    if (resultUser.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n+    }\r\n+    const existingUser = resultUser.rows[0];\r\n+    const updates = {\r\n+      name: name || existingUser.name,\r\n+      email: email || existingUser.email,\r\n+      phone: phone || existingUser.phone,\r\n+      region: region || existingUser.region,\r\n+      address: address || existingUser.address,\r\n+      children_count:\r\n+        children_count === \"\" || children_count === undefined\r\n+          ? existingUser.children_count\r\n+          : parseInt(children_count, 10)\r\n+    };\r\n+    let hashedPassword = existingUser.password;\r\n+    if (password) {\r\n+      hashedPassword = await bcrypt.hash(password, 10);\r\n+    }\r\n+    const queryUpdate = `\r\n+      UPDATE users\r\n+      SET\r\n+        name = $1,\r\n+        email = $2,\r\n+        password = $3,\r\n+        phone = $4,\r\n+        region = $5,\r\n+        children_count = $6,\r\n+        address = $7\r\n+      WHERE id = $8\r\n+      RETURNING id, name, email, phone, region, children_count, address, created_at;\r\n+    `;\r\n+    const values = [\r\n+      updates.name,\r\n+      updates.email,\r\n+      hashedPassword,\r\n+      updates.phone,\r\n+      updates.region,\r\n+      updates.children_count,\r\n+      updates.address,\r\n+      req.user.id\r\n+    ];\r\n+    const result = await db.query(queryUpdate, values);\r\n+    res.status(200).json({\r\n+      message: 'Profile updated successfully.',\r\n+      user: result.rows[0]\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error updating profile:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Client Delete Account\r\n+app.delete('/api/users/profile', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    const bookingCheck = await db.query(\r\n+      `SELECT id FROM bookings WHERE user_id = $1`,\r\n+      [req.user.id]\r\n+    );\r\n+    if (bookingCheck.rows.length > 0) {\r\n+      return res.status(400).json({\r\n+        error: 'You must cancel all bookings before deleting your account.'\r\n+      });\r\n+    }\r\n+    const result = await db.query(\r\n+      `DELETE FROM users WHERE id = $1 RETURNING id`,\r\n+      [req.user.id]\r\n+    );\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n+    }\r\n+    res.status(200).json({ message: 'User account deleted successfully.' });\r\n+  } catch (error) {\r\n+    console.error('Error deleting user account:', error.message);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Client List All Users\r\n+app.get('/api/users', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    const query = `SELECT id, name, email, created_at FROM users ORDER BY id ASC`;\r\n+    const result = await db.query(query);\r\n+    res.status(200).json(result.rows);\r\n+  } catch (error) {\r\n+    console.error('Error fetching users:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+/* -----------------------------------\r\n    Babysitters Routes\r\n ----------------------------------- */\r\n \r\n-// Route: Register a new babysitter\r\n+// Babysitter Register\r\n app.post('/api/babysitters/register', async (req, res) => {\r\n   const {\r\n     name,\r\n     email,\r\n@@ -287,33 +416,26 @@\n     available_to,\r\n     about,\r\n     rate\r\n   } = req.body;\r\n-  // Ensure available_days is an array\r\n-    let availableDaysArray = [];\r\n-\r\n-    if (Array.isArray(available_days)) {\r\n-      availableDaysArray = available_days;\r\n-    } else if (typeof available_days === \"string\") {\r\n-      availableDaysArray = available_days.split(\",\").map(day => day.trim());\r\n+  let availableDaysArray = [];\r\n+  if (Array.isArray(available_days)) {\r\n+    availableDaysArray = available_days;\r\n+  } else if (typeof available_days === \"string\") {\r\n+    availableDaysArray = available_days.split(\",\").map(day => day.trim());\r\n   }\r\n-\r\n-\r\n   try {\r\n     if (!name || !email || !password || !region || !available_days || !available_from || !available_to || !rate) {\r\n       return res.status(400).json({ error: 'All required fields must be filled.' });\r\n     }\r\n-\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n-\r\n     const query = `\r\n       INSERT INTO babysitters\r\n       (name, email, password, phone, region, available_days, available_from, available_to, about, rate)\r\n       VALUES\r\n       ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\r\n       RETURNING id, name, email, region, created_at;\r\n     `;\r\n-\r\n     const values = [\r\n       name,\r\n       email,\r\n       hashedPassword,\r\n@@ -324,11 +446,9 @@\n       available_to,\r\n       about,\r\n       rate\r\n     ];\r\n-\r\n     const result = await db.query(query, values);\r\n-\r\n     res.status(201).json({\r\n       message: 'Babysitter registered successfully.',\r\n       babysitter: result.rows[0]\r\n     });\r\n@@ -337,37 +457,30 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Babysitter login with JWT\r\n+// Babysitter Login\r\n app.post('/api/babysitters/login', async (req, res) => {\r\n   const { email, password } = req.body;\r\n-\r\n   try {\r\n     if (!email || !password) {\r\n       return res.status(400).json({ error: 'Email and password are required.' });\r\n     }\r\n-\r\n     const query = `SELECT * FROM babysitters WHERE email = $1`;\r\n     const result = await db.query(query, [email]);\r\n-\r\n     if (result.rows.length === 0) {\r\n       return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n-\r\n     const babysitter = result.rows[0];\r\n     const isMatch = await bcrypt.compare(password, babysitter.password);\r\n-\r\n     if (!isMatch) {\r\n       return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n-\r\n     const token = jwt.sign(\r\n       { id: babysitter.id, email: babysitter.email },\r\n       process.env.JWT_SECRET,\r\n       { expiresIn: '3h' }\r\n     );\r\n-\r\n     res.status(200).json({\r\n       message: 'Login successful',\r\n       token,\r\n       role: 'babysitter',\r\n@@ -383,35 +496,31 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Get babysitter profile (protected)\r\n+// Babysitter Profile Get (Self)\r\n app.get('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n   try {\r\n     const query = `\r\n       SELECT id, name, email, region, phone, available_days, available_from, available_to, about, rate, created_at\r\n       FROM babysitters\r\n       WHERE id = $1\r\n     `;\r\n     const result = await db.query(query, [req.user.id]);\r\n-\r\n     if (result.rows.length === 0) {\r\n       return res.status(404).json({ error: 'Babysitter not found.' });\r\n     }\r\n-\r\n     res.status(200).json(result.rows[0]);\r\n   } catch (error) {\r\n     console.error('Error fetching babysitter profile:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n-// Route: Get babysitter profile by ID\r\n+\r\n+// Babysitter Profile Get by ID\r\n app.get(\"/api/babysitters/:id\", async (req, res) => {\r\n   const { id } = req.params;\r\n-\r\n   try {\r\n-\r\n-    // Query to select all relevant fields except password\r\n     const query = `\r\n       SELECT \r\n         id,\r\n         name,\r\n@@ -428,75 +537,20 @@\n         profile_photo\r\n       FROM babysitters\r\n       WHERE id = $1\r\n     `;\r\n-\r\n     const result = await db.query(query, [id]);\r\n-\r\n     if (result.rows.length === 0) {\r\n       return res.status(404).json({ error: \"Babysitter not found.\" });\r\n     }\r\n-\r\n     res.json(result.rows[0]);\r\n   } catch (error) {\r\n     console.error(\"Error fetching babysitter profile:\", error);\r\n     res.status(500).json({ error: \"Internal server error.\" });\r\n   }\r\n });\r\n-// Babysitter approves or cancels a booking\r\n-app.put(\"/api/babysitters/bookings/:bookingId/status\", async (req, res) => {\r\n-  const { bookingId } = req.params;\r\n-  const { status } = req.body;\r\n \r\n-  if (![\"approved\", \"cancelled\"].includes(status)) {\r\n-    return res.status(400).json({ message: \"Invalid status\" });\r\n-  }\r\n-\r\n-  try {\r\n-    // Update the status\r\n-    await db.query(\r\n-      \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n-      [status, bookingId]\r\n-    );\r\n-\r\n-    res.json({ message: \"Booking status updated successfully\" });\r\n-  } catch (err) {\r\n-    console.error(\"Error updating booking status:\", err);\r\n-    res.status(500).json({ message: \"Internal server error\" });\r\n-  }\r\n-});\r\n-\r\n-// Get bookings for a babysitter including client details\r\n-app.get(\"/api/babysitters/:id/bookings\", async (req, res) => {\r\n-  const babysitterId = req.params.id;\r\n-\r\n-  try {\r\n-    const result = await db.query(\r\n-      `\r\n-      SELECT\r\n-        bookings.*,\r\n-        users.name AS parent_name,\r\n-        users.address AS client_address,\r\n-        users.phone AS client_phone,\r\n-        users.region AS client_region,\r\n-        users.children_count AS client_children\r\n-      FROM bookings\r\n-      JOIN users\r\n-        ON bookings.user_id = users.id\r\n-      WHERE bookings.babysitter_id = $1\r\n-      ORDER BY bookings.date DESC\r\n-      `,\r\n-      [babysitterId]\r\n-    );\r\n-\r\n-    res.json(result.rows);\r\n-  } catch (err) {\r\n-    console.error(\"Error fetching babysitter bookings:\", err);\r\n-    res.status(500).json({ message: \"Internal server error\" });\r\n-  }\r\n-});\r\n-\r\n-// Route: Update babysitter profile (protected)\r\n+// Babysitter Profile Update\r\n app.put('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n   const {\r\n     name,\r\n     email,\r\n@@ -507,17 +561,14 @@\n     available_to,\r\n     about,\r\n     rate\r\n   } = req.body;\r\n-\r\n   try {\r\n     const queryBabysitter = `SELECT * FROM babysitters WHERE id = $1`;\r\n     const resultBabysitter = await db.query(queryBabysitter, [req.user.id]);\r\n-\r\n     if (resultBabysitter.rows.length === 0) {\r\n       return res.status(404).json({ error: 'Babysitter not found.' });\r\n     }\r\n-\r\n     const updates = {\r\n       name: name || resultBabysitter.rows[0].name,\r\n       email: email || resultBabysitter.rows[0].email,\r\n       phone: phone || resultBabysitter.rows[0].phone,\r\n@@ -527,9 +578,8 @@\n       available_to: available_to || resultBabysitter.rows[0].available_to,\r\n       about: about || resultBabysitter.rows[0].about,\r\n       rate: rate || resultBabysitter.rows[0].rate\r\n     };\r\n-\r\n     const queryUpdate = `\r\n       UPDATE babysitters\r\n       SET name = $1,\r\n           email = $2,\r\n@@ -542,9 +592,8 @@\n           rate = $9\r\n       WHERE id = $10\r\n       RETURNING id, name, email, region, phone, available_days, available_from, available_to, about, rate, created_at;\r\n     `;\r\n-\r\n     const values = [\r\n       updates.name,\r\n       updates.email,\r\n       updates.phone,\r\n@@ -555,11 +604,9 @@\n       updates.about,\r\n       updates.rate,\r\n       req.user.id\r\n     ];\r\n-\r\n     const result = await db.query(queryUpdate, values);\r\n-\r\n     res.status(200).json({\r\n       message: 'Babysitter profile updated successfully.',\r\n       babysitter: result.rows[0]\r\n     });\r\n@@ -568,41 +615,35 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Delete babysitter account (protected, must have no bookings)\r\n+// Babysitter Delete Account\r\n app.delete('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n   try {\r\n-    // Check if babysitter has related bookings\r\n     const bookingCheck = await db.query(\r\n       `SELECT id FROM bookings WHERE babysitter_id = $1`,\r\n       [req.user.id]\r\n     );\r\n-\r\n     if (bookingCheck.rows.length > 0) {\r\n       return res.status(400).json({\r\n         error: 'You must cancel all bookings before deleting your account.'\r\n       });\r\n     }\r\n-\r\n-    // Delete babysitter\r\n     const result = await db.query(\r\n       `DELETE FROM babysitters WHERE id = $1 RETURNING id`,\r\n       [req.user.id]\r\n     );\r\n-\r\n     if (result.rows.length === 0) {\r\n       return res.status(404).json({ error: 'Babysitter not found.' });\r\n     }\r\n-\r\n     res.status(200).json({ message: 'Babysitter account deleted successfully.' });\r\n   } catch (error) {\r\n     console.error('Error deleting babysitter account:', error.message);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Get all babysitters\r\n+// Babysitter List All\r\n app.get('/api/babysitters', async (req, res) => {\r\n   try {\r\n     const query = `\r\n       SELECT\r\n@@ -628,266 +669,141 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-/* -----------------------------------\r\n-   Users Routes\r\n------------------------------------ */\r\n-\r\n-// Route: Register a new user\r\n-app.post('/api/users/register', async (req, res) => {\r\n-  const { name, email, password } = req.body;\r\n-\r\n+// Babysitter Bookings List\r\n+app.get(\"/api/babysitters/:id/bookings\", async (req, res) => {\r\n+  const babysitterId = req.params.id;\r\n   try {\r\n-    if (!name || !email || !password) {\r\n-      return res.status(400).json({ error: 'Name, email, and password are required.' });\r\n-    }\r\n-\r\n-    const hashedPassword = await bcrypt.hash(password, 10);\r\n-\r\n-    const query = `\r\n-      INSERT INTO users (name, email, password)\r\n-      VALUES ($1, $2, $3)\r\n-      RETURNING id, name, email, created_at;\r\n-    `;\r\n-\r\n-    const values = [name, email, hashedPassword];\r\n-    const result = await db.query(query, values);\r\n-    const token = jwt.sign(\r\n-      { id: result.rows[0].id, email: result.rows[0].email, role: 'user' },\r\n-      process.env.JWT_SECRET,\r\n-      { expiresIn: '3h' }\r\n+    const result = await db.query(\r\n+      `\r\n+      SELECT\r\n+        bookings.*,\r\n+        users.name AS parent_name,\r\n+        users.address AS client_address,\r\n+        users.phone AS client_phone,\r\n+        users.region AS client_region,\r\n+        users.children_count AS client_children\r\n+      FROM bookings\r\n+      JOIN users\r\n+        ON bookings.user_id = users.id\r\n+      WHERE bookings.babysitter_id = $1\r\n+      ORDER BY bookings.date DESC\r\n+      `,\r\n+      [babysitterId]\r\n     );\r\n-    \r\n-    res.status(201).json({\r\n-      message: 'User registered successfully.',\r\n-      token,\r\n-      role: 'user',\r\n-      user: {\r\n-        id: result.rows[0].id,\r\n-        name: result.rows[0].name,\r\n-        email: result.rows[0].email,\r\n-        created_at: result.rows[0].created_at\r\n-      }\r\n-    });\r\n+    res.json(result.rows);\r\n+  } catch (err) {\r\n+    console.error(\"Error fetching babysitter bookings:\", err);\r\n+    res.status(500).json({ message: \"Internal server error\" });\r\n+  }\r\n+});\r\n \r\n-  } catch (error) {\r\n-    console.error('Error registering user:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n+// Babysitter Update Booking Status\r\n+app.put(\"/api/babysitters/bookings/:bookingId/status\", async (req, res) => {\r\n+  const { bookingId } = req.params;\r\n+  const { status } = req.body;\r\n+  if (![\"approved\", \"cancelled\"].includes(status)) {\r\n+    return res.status(400).json({ message: \"Invalid status\" });\r\n   }\r\n+  try {\r\n+    await db.query(\r\n+      \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n+      [status, bookingId]\r\n+    );\r\n+    res.json({ message: \"Booking status updated successfully\" });\r\n+  } catch (err) {\r\n+    console.error(\"Error updating booking status:\", err);\r\n+    res.status(500).json({ message: \"Internal server error\" });\r\n+  }\r\n });\r\n \r\n-// Route: User login with JWT\r\n-app.post('/api/users/login', async (req, res) => {\r\n-  const { email, password } = req.body;\r\n+/* -----------------------------------\r\n+   Password Management Routes\r\n+----------------------------------- */\r\n \r\n+// Babysitter Change Password\r\n+app.put('/api/babysitters/change-password', authMiddleware, async (req, res) => {\r\n+  const { currentPassword, newPassword } = req.body;\r\n   try {\r\n-    if (!email || !password) {\r\n-      return res.status(400).json({ error: 'Email and password are required.' });\r\n+    if (!currentPassword || !newPassword) {\r\n+      return res.status(400).json({ error: 'Current and new password are required.' });\r\n     }\r\n-\r\n-    const query = `SELECT * FROM users WHERE email = $1`;\r\n-    const result = await db.query(query, [email]);\r\n-\r\n+    const query = `SELECT * FROM babysitters WHERE id = $1`;\r\n+    const result = await db.query(query, [req.user.id]);\r\n     if (result.rows.length === 0) {\r\n-      return res.status(401).json({ error: 'Invalid email or password.' });\r\n+      return res.status(404).json({ error: 'Babysitter not found.' });\r\n     }\r\n-\r\n-    const user = result.rows[0];\r\n-    const isMatch = await bcrypt.compare(password, user.password);\r\n-\r\n+    const babysitter = result.rows[0];\r\n+    const isMatch = await bcrypt.compare(currentPassword, babysitter.password);\r\n     if (!isMatch) {\r\n-      return res.status(401).json({ error: 'Invalid email or password.' });\r\n+      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n     }\r\n-\r\n-    const token = jwt.sign(\r\n-      { id: user.id, email: user.email },\r\n-      process.env.JWT_SECRET,\r\n-      { expiresIn: '3h' }\r\n+    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n+    await db.query(\r\n+      `UPDATE babysitters SET password = $1 WHERE id = $2`,\r\n+      [hashedPassword, req.user.id]\r\n     );\r\n-\r\n-    res.status(200).json({\r\n-      message: 'Login successful',\r\n-      token,\r\n-      role: 'user',\r\n-      user: {\r\n-        id: user.id,\r\n-        name: user.name,\r\n-        email: user.email,\r\n-        created_at: user.created_at\r\n-      }\r\n-    });\r\n+    res.status(200).json({ message: 'Password updated successfully.' });\r\n   } catch (error) {\r\n-    console.error('User login error:', error);\r\n+    console.error('Error changing password:', error.message);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Get logged-in user profile (protected)\r\n-app.get('/api/users/profile', authMiddleware, async (req, res) => {\r\n+// User Change Password\r\n+app.put('/api/users/change-password', authMiddleware, async (req, res) => {\r\n+  const { currentPassword, newPassword } = req.body;\r\n   try {\r\n-    const query = `SELECT id, name, email, phone, region, address, children_count, created_at FROM users WHERE id = $1`;\r\n-    const result = await db.query(query, [req.user.id]);\r\n-\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'User not found.' });\r\n+    if (!currentPassword || !newPassword) {\r\n+      return res.status(400).json({ error: 'Both current and new passwords are required.' });\r\n     }\r\n-\r\n-    res.status(200).json(result.rows[0]);\r\n-  } catch (error) {\r\n-    console.error('Profile fetch error:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Update user profile (protected)\r\n-app.put('/api/users/profile', authMiddleware, async (req, res) => {\r\n-  const {\r\n-    name,\r\n-    email,\r\n-    password,\r\n-    phone,\r\n-    region,\r\n-    children_count,\r\n-    address\r\n-  } = req.body;\r\n-\r\n-  try {\r\n     const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n     const resultUser = await db.query(queryUser, [req.user.id]);\r\n-\r\n     if (resultUser.rows.length === 0) {\r\n       return res.status(404).json({ error: 'User not found.' });\r\n     }\r\n-\r\n-    const existingUser = resultUser.rows[0];\r\n-\r\n-    // Safe updates: use old values if not provided\r\n-    const updates = {\r\n-      name: name || existingUser.name,\r\n-      email: email || existingUser.email,\r\n-      phone: phone || existingUser.phone,\r\n-      region: region || existingUser.region,\r\n-      address: address || existingUser.address,\r\n-      children_count:\r\n-        children_count === \"\" || children_count === undefined\r\n-          ? existingUser.children_count\r\n-          : parseInt(children_count, 10)\r\n-    };\r\n-\r\n-    let hashedPassword = existingUser.password;\r\n-    if (password) {\r\n-      hashedPassword = await bcrypt.hash(password, 10);\r\n+    const user = resultUser.rows[0];\r\n+    const isMatch = await bcrypt.compare(currentPassword, user.password);\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n     }\r\n-\r\n-    const queryUpdate = `\r\n-      UPDATE users\r\n-      SET\r\n-        name = $1,\r\n-        email = $2,\r\n-        password = $3,\r\n-        phone = $4,\r\n-        region = $5,\r\n-        children_count = $6,\r\n-        address = $7\r\n-      WHERE id = $8\r\n-      RETURNING id, name, email, phone, region, children_count, address, created_at;\r\n-    `;\r\n-\r\n-    const values = [\r\n-      updates.name,\r\n-      updates.email,\r\n-      hashedPassword,\r\n-      updates.phone,\r\n-      updates.region,\r\n-      updates.children_count,\r\n-      updates.address,\r\n-      req.user.id\r\n-    ];\r\n-\r\n-    const result = await db.query(queryUpdate, values);\r\n-\r\n-    res.status(200).json({\r\n-      message: 'Profile updated successfully.',\r\n-      user: result.rows[0]\r\n-    });\r\n-  } catch (error) {\r\n-    console.error('Error updating profile:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Delete user account (protected, must have no bookings)\r\n-app.delete('/api/users/profile', authMiddleware, async (req, res) => {\r\n-  try {\r\n-    // Check if user has related bookings\r\n-    const bookingCheck = await db.query(\r\n-      `SELECT id FROM bookings WHERE user_id = $1`,\r\n-      [req.user.id]\r\n+    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n+    await db.query(\r\n+      `UPDATE users SET password = $1 WHERE id = $2`,\r\n+      [hashedPassword, req.user.id]\r\n     );\r\n-\r\n-    if (bookingCheck.rows.length > 0) {\r\n-      return res.status(400).json({\r\n-        error: 'You must cancel all bookings before deleting your account.'\r\n-      });\r\n-    }\r\n-\r\n-    // Delete user\r\n-    const result = await db.query(\r\n-      `DELETE FROM users WHERE id = $1 RETURNING id`,\r\n-      [req.user.id]\r\n-    );\r\n-\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'User not found.' });\r\n-    }\r\n-\r\n-    res.status(200).json({ message: 'User account deleted successfully.' });\r\n+    res.status(200).json({ message: 'Password updated successfully.' });\r\n   } catch (error) {\r\n-    console.error('Error deleting user account:', error.message);\r\n+    console.error('Error changing password:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Get all users (protected)\r\n-app.get('/api/users', authMiddleware, async (req, res) => {\r\n-  try {\r\n-    const query = `SELECT id, name, email, created_at FROM users ORDER BY id ASC`;\r\n-    const result = await db.query(query);\r\n+/* -----------------------------------\r\n+   Universal Login\r\n+----------------------------------- */\r\n \r\n-    res.status(200).json(result.rows);\r\n-  } catch (error) {\r\n-    console.error('Error fetching users:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Universal login (users or babysitters)\r\n+// Universal Login (User or Babysitter)\r\n app.post('/api/login', async (req, res) => {\r\n   const { email, password } = req.body;\r\n-\r\n   try {\r\n     if (!email || !password) {\r\n       return res.status(400).json({ error: 'Email and password are required.' });\r\n     }\r\n-\r\n-    // First try to find in users\r\n     const userQuery = `SELECT * FROM users WHERE email = $1`;\r\n     const userResult = await db.query(userQuery, [email]);\r\n-\r\n     if (userResult.rows.length > 0) {\r\n       const user = userResult.rows[0];\r\n       const isMatch = await bcrypt.compare(password, user.password);\r\n       if (!isMatch) {\r\n         return res.status(401).json({ error: 'Invalid email or password.' });\r\n       }\r\n-\r\n       const token = jwt.sign(\r\n         { id: user.id, email: user.email, role: 'user' },\r\n         process.env.JWT_SECRET,\r\n         { expiresIn: '3h' }\r\n       );\r\n-\r\n       return res.status(200).json({\r\n         message: 'Login successful',\r\n         token,\r\n         role: 'user',\r\n@@ -898,26 +814,21 @@\n           created_at: user.created_at\r\n         }\r\n       });\r\n     }\r\n-\r\n-    // If not found, try babysitters\r\n     const babysitterQuery = `SELECT * FROM babysitters WHERE email = $1`;\r\n     const babysitterResult = await db.query(babysitterQuery, [email]);\r\n-\r\n     if (babysitterResult.rows.length > 0) {\r\n       const babysitter = babysitterResult.rows[0];\r\n       const isMatch = await bcrypt.compare(password, babysitter.password);\r\n       if (!isMatch) {\r\n         return res.status(401).json({ error: 'Invalid email or password.' });\r\n       }\r\n-\r\n       const token = jwt.sign(\r\n         { id: babysitter.id, email: babysitter.email, role: 'babysitter' },\r\n         process.env.JWT_SECRET,\r\n         { expiresIn: '3h' }\r\n       );\r\n-\r\n       return res.status(200).json({\r\n         message: 'Login successful',\r\n         token,\r\n         role: 'babysitter',\r\n@@ -928,201 +839,29 @@\n           region: babysitter.region\r\n         }\r\n       });\r\n     }\r\n-\r\n-    // Not found in either table\r\n     return res.status(401).json({ error: 'Invalid email or password.' });\r\n-\r\n   } catch (error) {\r\n     console.error('Universal login error:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n-\r\n-// Route: Change babysitter password (protected)\r\n-app.put('/api/babysitters/change-password', authMiddleware, async (req, res) => {\r\n-  const { currentPassword, newPassword } = req.body;\r\n-\r\n-  try {\r\n-    if (!currentPassword || !newPassword) {\r\n-      return res.status(400).json({ error: 'Current and new password are required.' });\r\n-    }\r\n-\r\n-    // Fetch babysitter from DB\r\n-    const query = `SELECT * FROM babysitters WHERE id = $1`;\r\n-    const result = await db.query(query, [req.user.id]);\r\n-\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'Babysitter not found.' });\r\n-    }\r\n-\r\n-    const babysitter = result.rows[0];\r\n-\r\n-    // Check if current password is correct\r\n-    const isMatch = await bcrypt.compare(currentPassword, babysitter.password);\r\n-    if (!isMatch) {\r\n-      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n-    }\r\n-\r\n-    // Hash new password\r\n-    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n-\r\n-    // Update password in DB\r\n-    const updateQuery = `\r\n-      UPDATE babysitters\r\n-      SET password = $1\r\n-      WHERE id = $2\r\n-    `;\r\n-    await db.query(updateQuery, [hashedPassword, req.user.id]);\r\n-\r\n-    res.status(200).json({ message: 'Password updated successfully.' });\r\n-  } catch (error) {\r\n-    console.error('Error changing password:', error.message);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Change user password (protected)\r\n-app.put('/api/users/change-password', authMiddleware, async (req, res) => {\r\n-  const { currentPassword, newPassword } = req.body;\r\n-\r\n-  try {\r\n-    if (!currentPassword || !newPassword) {\r\n-      return res.status(400).json({ error: 'Both current and new passwords are required.' });\r\n-    }\r\n-\r\n-    // Get the user\r\n-    const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n-    const resultUser = await db.query(queryUser, [req.user.id]);\r\n-\r\n-    if (resultUser.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'User not found.' });\r\n-    }\r\n-\r\n-    const user = resultUser.rows[0];\r\n-\r\n-    // Compare current password\r\n-    const isMatch = await bcrypt.compare(currentPassword, user.password);\r\n-    if (!isMatch) {\r\n-      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n-    }\r\n-\r\n-    // Hash new password\r\n-    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n-\r\n-    // Update password\r\n-    const queryUpdate = `\r\n-      UPDATE users\r\n-      SET password = $1\r\n-      WHERE id = $2\r\n-    `;\r\n-    await db.query(queryUpdate, [hashedPassword, req.user.id]);\r\n-\r\n-    res.status(200).json({ message: 'Password updated successfully.' });\r\n-  } catch (error) {\r\n-    console.error('Error changing password:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Update user password (protected)\r\n-app.put('/api/users/profile/password', authMiddleware, async (req, res) => {\r\n-  const { currentPassword, newPassword } = req.body;\r\n-\r\n-  try {\r\n-    if (!currentPassword || !newPassword) {\r\n-      return res.status(400).json({ error: 'Current and new password are required.' });\r\n-    }\r\n-\r\n-    // Fetch user\r\n-    const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n-    const resultUser = await db.query(queryUser, [req.user.id]);\r\n-\r\n-    if (resultUser.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'User not found.' });\r\n-    }\r\n-\r\n-    const user = resultUser.rows[0];\r\n-\r\n-    // Verify current password\r\n-    const isMatch = await bcrypt.compare(currentPassword, user.password);\r\n-    if (!isMatch) {\r\n-      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n-    }\r\n-\r\n-    // Hash new password\r\n-    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n-\r\n-    // Update password\r\n-    const queryUpdate = `\r\n-      UPDATE users\r\n-      SET password = $1\r\n-      WHERE id = $2\r\n-      RETURNING id;\r\n-    `;\r\n-    await db.query(queryUpdate, [hashedPassword, req.user.id]);\r\n-\r\n-    res.status(200).json({ message: 'Password updated successfully.' });\r\n-  } catch (error) {\r\n-    console.error('Error updating password:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Update booking status (protected)\r\n-app.put('/api/bookings/:id/status', authMiddleware, async (req, res) => {\r\n-  const { id } = req.params;\r\n-  const { status } = req.body;\r\n-\r\n-  try {\r\n-    // Valida status permitido\r\n-    const validStatuses = ['pending', 'confirmed', 'rejected', 'cancelled'];\r\n-    if (!validStatuses.includes(status)) {\r\n-      return res.status(400).json({ error: 'Invalid status value.' });\r\n-    }\r\n-\r\n-    // update database\r\n-    const query = `\r\n-      UPDATE bookings\r\n-      SET status = $1\r\n-      WHERE id = $2\r\n-      RETURNING *;\r\n-    `;\r\n-    const values = [status, id];\r\n-    const result = await db.query(query, values);\r\n-\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'Booking not found.' });\r\n-    }\r\n-\r\n-    res.status(200).json({\r\n-      message: 'Booking status updated successfully.',\r\n-      booking: result.rows[0],\r\n-    });\r\n-  } catch (error) {\r\n-    console.error('Error updating booking status:', error);\r\n-    res.status(500).json({ error: 'Internal server error.' });\r\n-  }\r\n-});\r\n-\r\n /* -----------------------------------\r\n    Bookings Routes\r\n ----------------------------------- */\r\n \r\n-// Route: Create a new booking\r\n+// Create Booking\r\n app.post('/api/bookings', async (req, res) => {\r\n   const { user_id, babysitter_id, date, time_start, time_end } = req.body;\r\n-\r\n   try {\r\n     const query = `\r\n       INSERT INTO bookings (user_id, babysitter_id, date, time_start, time_end)\r\n       VALUES ($1, $2, $3, $4, $5)\r\n       RETURNING *;\r\n     `;\r\n     const values = [user_id, babysitter_id, date, time_start, time_end];\r\n     const result = await db.query(query, values);\r\n-\r\n     res.status(201).json({\r\n       message: 'Booking created successfully.',\r\n       booking: result.rows[0]\r\n     });\r\n@@ -1131,12 +870,11 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Get all bookings for a user\r\n+// Get Bookings for User\r\n app.get('/api/bookings/:user_id', async (req, res) => {\r\n   const { user_id } = req.params;\r\n-\r\n   try {\r\n     const query = `\r\n       SELECT \r\n         b.id, b.date, b.time_start, b.time_end, b.status,\r\n@@ -1146,19 +884,18 @@\n       WHERE b.user_id = $1\r\n       ORDER BY b.date ASC;\r\n     `;\r\n     const result = await db.query(query, [user_id]);\r\n-\r\n     res.status(200).json(result.rows);\r\n   } catch (error) {\r\n     console.error('Error fetching bookings:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n-// Route: Get all bookings for a babysitter\r\n+\r\n+// Get Bookings for Babysitter\r\n app.get('/api/babysitters/:id/bookings', async (req, res) => {\r\n   const babysitterId = req.params.id;\r\n-\r\n   try {\r\n     const query = `\r\n       SELECT \r\n         b.id,\r\n@@ -1171,18 +908,46 @@\n       JOIN users u ON b.user_id = u.id\r\n       WHERE b.babysitter_id = $1\r\n       ORDER BY b.date ASC, b.time_start ASC;\r\n     `;\r\n-\r\n     const result = await db.query(query, [babysitterId]);\r\n-\r\n     res.status(200).json(result.rows);\r\n   } catch (error) {\r\n     console.error('Error fetching babysitter bookings:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+// Update Booking Status (Generic)\r\n+app.put('/api/bookings/:id/status', authMiddleware, async (req, res) => {\r\n+  const { id } = req.params;\r\n+  const { status } = req.body;\r\n+  try {\r\n+    const validStatuses = ['pending', 'confirmed', 'rejected', 'cancelled'];\r\n+    if (!validStatuses.includes(status)) {\r\n+      return res.status(400).json({ error: 'Invalid status value.' });\r\n+    }\r\n+    const query = `\r\n+      UPDATE bookings\r\n+      SET status = $1\r\n+      WHERE id = $2\r\n+      RETURNING *;\r\n+    `;\r\n+    const values = [status, id];\r\n+    const result = await db.query(query, values);\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'Booking not found.' });\r\n+    }\r\n+    res.status(200).json({\r\n+      message: 'Booking status updated successfully.',\r\n+      booking: result.rows[0],\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error updating booking status:', error);\r\n+    res.status(500).json({ error: 'Internal server error.' });\r\n+  }\r\n+});\r\n+\r\n /* -----------------------------------\r\n    Root Endpoint\r\n ----------------------------------- */\r\n app.get('/', (req, res) => {\r\n"
                },
                {
                    "date": 1751601095305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -350,11 +350,9 @@\n       updates.address,\r\n       req.user.id\r\n     ];\r\n     const result = await db.query(queryUpdate, values);\r\n-    res.status(200).json({\r\n-      message: 'Profile updated successfully.',\r\n-      user: result.rows[0]\r\n+    res.status(200).json(result.rows[0];\r\n     });\r\n   } catch (error) {\r\n     console.error('Error updating profile:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n"
                },
                {
                    "date": 1751601134593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -351,10 +351,9 @@\n       req.user.id\r\n     ];\r\n     const result = await db.query(queryUpdate, values);\r\n     res.status(200).json(result.rows[0];\r\n-    });\r\n-  } catch (error) {\r\n+    } catch (error) {\r\n     console.error('Error updating profile:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n"
                },
                {
                    "date": 1751601216044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -350,10 +350,10 @@\n       updates.address,\r\n       req.user.id\r\n     ];\r\n     const result = await db.query(queryUpdate, values);\r\n-    res.status(200).json(result.rows[0];\r\n-    } catch (error) {\r\n+    res.status(200).json(result.rows[0]);\r\n+  } catch (error) {\r\n     console.error('Error updating profile:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n"
                },
                {
                    "date": 1751602138068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,13 @@\n-// -----------------------------------\r\n-// Dependencies and Setup\r\n-// -----------------------------------\r\n+// Import dependencies\r\n const express = require('express');\r\n const app = express();\r\n-require('dotenv').config();\r\n-const bcrypt = require('bcrypt');\r\n-const jwt = require('jsonwebtoken');\r\n-const { Client } = require('pg');\r\n-const authMiddleware = require('./middleware/authMiddleware');\r\n-const cors = require('cors');\r\n+require('dotenv').config(); // Load environment variables\r\n+const bcrypt = require('bcrypt'); // For hashing passwords\r\n+const jwt = require('jsonwebtoken'); // JSON Web Token for authentication\r\n+const { Client } = require('pg'); // PostgreSQL client\r\n+const authMiddleware = require('./middleware/authMiddleware'); // Custom authentication middleware\r\n+const cors = require('cors'); // For handling CORS\r\n \r\n // PostgreSQL client configuration\r\n const db = new Client({\r\n   user: 'postgres',\r\n@@ -23,54 +21,80 @@\n db.connect()\r\n   .then(() => console.log('Connected to PostgreSQL'))\r\n   .catch(err => console.error('Connection error', err.stack));\r\n \r\n-// Middleware\r\n+// Middleware to parse JSON requests\r\n app.use(express.json());\r\n app.use(cors());\r\n \r\n /* -----------------------------------\r\n    Admin Routes\r\n ----------------------------------- */\r\n \r\n-// Admin Register\r\n+/**\r\n+ * Admin Register Endpoint\r\n+ * POST /api/admin/register\r\n+ * Request Body: { name, email, password }\r\n+ * Response: { message }\r\n+ */\r\n app.post(\"/api/admin/register\", async (req, res) => {\r\n   const { name, email, password } = req.body;\r\n+\r\n   try {\r\n+    // Check if admin with this email already exists\r\n     const existing = await db.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n     if (existing.rows.length > 0) {\r\n       return res.status(400).json({ message: \"Admin with this email already exists\" });\r\n     }\r\n+\r\n+    // Hash the password\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n+\r\n+    // Insert new admin\r\n     await db.query(\r\n       \"INSERT INTO admins (name, email, password) VALUES ($1, $2, $3)\",\r\n       [name, email, hashedPassword]\r\n     );\r\n+\r\n     res.json({ message: \"Admin created successfully\" });\r\n   } catch (err) {\r\n     console.error(\"Admin register error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-// Admin Login\r\n+/**\r\n+ * Admin Login Endpoint\r\n+ * POST /api/admin/login\r\n+ * Request Body: { email, password }\r\n+ * Response: { token, user }\r\n+ */\r\n app.post(\"/api/admin/login\", async (req, res) => {\r\n   const { email, password } = req.body;\r\n+\r\n   try {\r\n+    // Find admin by email\r\n     const result = await db.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n+\r\n     if (result.rows.length === 0) {\r\n       return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n+\r\n     const admin = result.rows[0];\r\n+\r\n+    // Compare password hash\r\n     const validPassword = await bcrypt.compare(password, admin.password);\r\n     if (!validPassword) {\r\n       return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n+\r\n+    // Generate JWT\r\n     const token = jwt.sign(\r\n       { id: admin.id, email: admin.email, role: \"admin\" },\r\n       process.env.JWT_SECRET,\r\n       { expiresIn: \"8h\" }\r\n     );\r\n+\r\n     res.json({\r\n       token,\r\n       user: {\r\n         id: admin.id,\r\n@@ -83,21 +107,29 @@\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-// Admin Summary\r\n+/**\r\n+ * Admin Summary Endpoint\r\n+ * GET /api/admin/summary\r\n+ * Response: { usersCount, babysittersCount, bookingsCount, pendingBookings }\r\n+ */\r\n app.get(\"/api/admin/summary\", async (req, res) => {\r\n   try {\r\n     const usersResult = await db.query(\"SELECT COUNT(*) FROM users\");\r\n     const usersCount = parseInt(usersResult.rows[0].count);\r\n+\r\n     const babysittersResult = await db.query(\"SELECT COUNT(*) FROM babysitters\");\r\n     const babysittersCount = parseInt(babysittersResult.rows[0].count);\r\n+\r\n     const bookingsResult = await db.query(\"SELECT COUNT(*) FROM bookings\");\r\n     const bookingsCount = parseInt(bookingsResult.rows[0].count);\r\n+\r\n     const pendingResult = await db.query(\r\n       \"SELECT COUNT(*) FROM bookings WHERE status = 'pending'\"\r\n     );\r\n     const pendingBookings = parseInt(pendingResult.rows[0].count);\r\n+\r\n     res.json({\r\n       usersCount,\r\n       babysittersCount,\r\n       bookingsCount,\r\n@@ -108,9 +140,13 @@\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-// Admin Bookings List\r\n+/**\r\n+ * Admin Bookings Endpoint\r\n+ * GET /api/admin/bookings\r\n+ * Response: array of bookings with client and babysitter names\r\n+ */\r\n app.get(\"/api/admin/bookings\", async (req, res) => {\r\n   try {\r\n     const result = await db.query(`\r\n       SELECT\r\n@@ -125,76 +161,106 @@\n       JOIN users u ON b.user_id = u.id\r\n       JOIN babysitters s ON b.babysitter_id = s.id\r\n       ORDER BY b.date DESC\r\n     `);\r\n+\r\n     res.json(result.rows);\r\n   } catch (err) {\r\n     console.error(\"Admin bookings error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-// Admin Users List\r\n+/**\r\n+ * Admin Users Endpoint\r\n+ * GET /api/admin/users\r\n+ * Response: array of users and babysitters\r\n+ */\r\n app.get(\"/api/admin/users\", async (req, res) => {\r\n   try {\r\n     const usersResult = await db.query(`\r\n       SELECT id, name, email, 'client' AS role, created_at\r\n       FROM users\r\n     `);\r\n+\r\n     const babysittersResult = await db.query(`\r\n       SELECT id, name, email, 'babysitter' AS role, created_at\r\n       FROM babysitters\r\n     `);\r\n+\r\n     const combined = [...usersResult.rows, ...babysittersResult.rows];\r\n+\r\n     res.json(combined);\r\n   } catch (err) {\r\n     console.error(\"Admin users error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n-\r\n-// Admin Update Booking Status\r\n+/**\r\n+ * Admin Update Booking Status Endpoint\r\n+ * PUT /api/admin/bookings/:id/status\r\n+ * Request Body: { status }\r\n+ * Response: { message }\r\n+ */\r\n app.put(\"/api/admin/bookings/:id/status\", async (req, res) => {\r\n   const bookingId = req.params.id;\r\n   const { status } = req.body;\r\n+\r\n+  // Validate status\r\n   const allowedStatuses = [\"pending\", \"approved\", \"cancelled\"];\r\n   if (!allowedStatuses.includes(status)) {\r\n     return res.status(400).json({ message: \"Invalid status value\" });\r\n   }\r\n+\r\n   try {\r\n+    // Update booking status in the database using client\r\n     await db.query(\r\n       \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n       [status, bookingId]\r\n     );\r\n+\r\n     res.json({ message: \"Booking status updated successfully\" });\r\n   } catch (err) {\r\n     console.error(\"Update booking status error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-// Admin Delete User\r\n+/**\r\n+ * Admin Delete User Endpoint\r\n+ * DELETE /api/admin/users/:role/:id\r\n+ * Response: { message }\r\n+ */\r\n app.delete(\"/api/admin/users/:role/:id\", async (req, res) => {\r\n   const { role, id } = req.params;\r\n+\r\n+  // Validate role value\r\n   if (role !== \"client\" && role !== \"babysitter\") {\r\n     return res.status(400).json({ message: \"Invalid role\" });\r\n   }\r\n+\r\n+  // Determine table name\r\n   const table = role === \"client\" ? \"users\" : \"babysitters\";\r\n+\r\n   try {\r\n+    // Delete related bookings first\r\n     if (role === \"client\") {\r\n       await db.query(\"DELETE FROM bookings WHERE user_id = $1\", [id]);\r\n     } else if (role === \"babysitter\") {\r\n       await db.query(\"DELETE FROM bookings WHERE babysitter_id = $1\", [id]);\r\n     }\r\n+\r\n+    // Delete user or babysitter\r\n     await db.query(`DELETE FROM ${table} WHERE id = $1`, [id]);\r\n+\r\n     res.json({ message: `${role} and related bookings deleted successfully` });\r\n   } catch (err) {\r\n     console.error(\"Delete user error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-// Admin Delete Booking\r\n+// DELETE booking by ID (Admin)\r\n app.delete(\"/api/admin/bookings/:id\", async (req, res) => {\r\n   try {\r\n     await db.query(\"DELETE FROM bookings WHERE id = $1\", [req.params.id]);\r\n     res.json({ message: \"Booking deleted successfully\" });\r\n@@ -204,204 +270,12 @@\n   }\r\n });\r\n \r\n /* -----------------------------------\r\n-   Clients Routes\r\n------------------------------------ */\r\n-\r\n-// Client Register\r\n-app.post('/api/users/register', async (req, res) => {\r\n-  const { name, email, password } = req.body;\r\n-  try {\r\n-    if (!name || !email || !password) {\r\n-      return res.status(400).json({ error: 'Name, email, and password are required.' });\r\n-    }\r\n-    const hashedPassword = await bcrypt.hash(password, 10);\r\n-    const query = `\r\n-      INSERT INTO users (name, email, password)\r\n-      VALUES ($1, $2, $3)\r\n-      RETURNING id, name, email, created_at;\r\n-    `;\r\n-    const values = [name, email, hashedPassword];\r\n-    const result = await db.query(query, values);\r\n-    const token = jwt.sign(\r\n-      { id: result.rows[0].id, email: result.rows[0].email, role: 'user' },\r\n-      process.env.JWT_SECRET,\r\n-      { expiresIn: '3h' }\r\n-    );\r\n-    res.status(201).json({\r\n-      message: 'User registered successfully.',\r\n-      token,\r\n-      role: 'user',\r\n-      user: {\r\n-        id: result.rows[0].id,\r\n-        name: result.rows[0].name,\r\n-        email: result.rows[0].email,\r\n-        created_at: result.rows[0].created_at\r\n-      }\r\n-    });\r\n-  } catch (error) {\r\n-    console.error('Error registering user:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-// -----------------------------------\r\n-// Clients Routes\r\n-// -----------------------------------\r\n-\r\n-// Client Login\r\n-app.post('/api/users/login', async (req, res) => {\r\n-  const { email, password } = req.body;\r\n-  try {\r\n-    if (!email || !password) {\r\n-      return res.status(400).json({ error: 'Email and password are required.' });\r\n-    }\r\n-    const query = `SELECT * FROM users WHERE email = $1`;\r\n-    const result = await db.query(query, [email]);\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(401).json({ error: 'Invalid email or password.' });\r\n-    }\r\n-    const user = result.rows[0];\r\n-    const isMatch = await bcrypt.compare(password, user.password);\r\n-    if (!isMatch) {\r\n-      return res.status(401).json({ error: 'Invalid email or password.' });\r\n-    }\r\n-    const token = jwt.sign(\r\n-      { id: user.id, email: user.email },\r\n-      process.env.JWT_SECRET,\r\n-      { expiresIn: '3h' }\r\n-    );\r\n-    res.status(200).json({\r\n-      message: 'Login successful',\r\n-      token,\r\n-      role: 'user',\r\n-      user: {\r\n-        id: user.id,\r\n-        name: user.name,\r\n-        email: user.email,\r\n-        created_at: user.created_at\r\n-      }\r\n-    });\r\n-  } catch (error) {\r\n-    console.error('User login error:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Client Profile Get\r\n-app.get('/api/users/profile', authMiddleware, async (req, res) => {\r\n-  try {\r\n-    const query = `SELECT id, name, email, phone, region, address, children_count, created_at FROM users WHERE id = $1`;\r\n-    const result = await db.query(query, [req.user.id]);\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'User not found.' });\r\n-    }\r\n-    res.status(200).json(result.rows[0]);\r\n-  } catch (error) {\r\n-    console.error('Profile fetch error:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Client Profile Update\r\n-app.put('/api/users/profile', authMiddleware, async (req, res) => {\r\n-  const { name, email, password, phone, region, children_count, address } = req.body;\r\n-  try {\r\n-    const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n-    const resultUser = await db.query(queryUser, [req.user.id]);\r\n-    if (resultUser.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'User not found.' });\r\n-    }\r\n-    const existingUser = resultUser.rows[0];\r\n-    const updates = {\r\n-      name: name || existingUser.name,\r\n-      email: email || existingUser.email,\r\n-      phone: phone || existingUser.phone,\r\n-      region: region || existingUser.region,\r\n-      address: address || existingUser.address,\r\n-      children_count:\r\n-        children_count === \"\" || children_count === undefined\r\n-          ? existingUser.children_count\r\n-          : parseInt(children_count, 10)\r\n-    };\r\n-    let hashedPassword = existingUser.password;\r\n-    if (password) {\r\n-      hashedPassword = await bcrypt.hash(password, 10);\r\n-    }\r\n-    const queryUpdate = `\r\n-      UPDATE users\r\n-      SET\r\n-        name = $1,\r\n-        email = $2,\r\n-        password = $3,\r\n-        phone = $4,\r\n-        region = $5,\r\n-        children_count = $6,\r\n-        address = $7\r\n-      WHERE id = $8\r\n-      RETURNING id, name, email, phone, region, children_count, address, created_at;\r\n-    `;\r\n-    const values = [\r\n-      updates.name,\r\n-      updates.email,\r\n-      hashedPassword,\r\n-      updates.phone,\r\n-      updates.region,\r\n-      updates.children_count,\r\n-      updates.address,\r\n-      req.user.id\r\n-    ];\r\n-    const result = await db.query(queryUpdate, values);\r\n-    res.status(200).json(result.rows[0]);\r\n-  } catch (error) {\r\n-    console.error('Error updating profile:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Client Delete Account\r\n-app.delete('/api/users/profile', authMiddleware, async (req, res) => {\r\n-  try {\r\n-    const bookingCheck = await db.query(\r\n-      `SELECT id FROM bookings WHERE user_id = $1`,\r\n-      [req.user.id]\r\n-    );\r\n-    if (bookingCheck.rows.length > 0) {\r\n-      return res.status(400).json({\r\n-        error: 'You must cancel all bookings before deleting your account.'\r\n-      });\r\n-    }\r\n-    const result = await db.query(\r\n-      `DELETE FROM users WHERE id = $1 RETURNING id`,\r\n-      [req.user.id]\r\n-    );\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'User not found.' });\r\n-    }\r\n-    res.status(200).json({ message: 'User account deleted successfully.' });\r\n-  } catch (error) {\r\n-    console.error('Error deleting user account:', error.message);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Client List All Users\r\n-app.get('/api/users', authMiddleware, async (req, res) => {\r\n-  try {\r\n-    const query = `SELECT id, name, email, created_at FROM users ORDER BY id ASC`;\r\n-    const result = await db.query(query);\r\n-    res.status(200).json(result.rows);\r\n-  } catch (error) {\r\n-    console.error('Error fetching users:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-/* -----------------------------------\r\n    Babysitters Routes\r\n ----------------------------------- */\r\n \r\n-// Babysitter Register\r\n+// Route: Register a new babysitter\r\n app.post('/api/babysitters/register', async (req, res) => {\r\n   const {\r\n     name,\r\n     email,\r\n@@ -413,26 +287,33 @@\n     available_to,\r\n     about,\r\n     rate\r\n   } = req.body;\r\n-  let availableDaysArray = [];\r\n-  if (Array.isArray(available_days)) {\r\n-    availableDaysArray = available_days;\r\n-  } else if (typeof available_days === \"string\") {\r\n-    availableDaysArray = available_days.split(\",\").map(day => day.trim());\r\n+  // Ensure available_days is an array\r\n+    let availableDaysArray = [];\r\n+\r\n+    if (Array.isArray(available_days)) {\r\n+      availableDaysArray = available_days;\r\n+    } else if (typeof available_days === \"string\") {\r\n+      availableDaysArray = available_days.split(\",\").map(day => day.trim());\r\n   }\r\n+\r\n+\r\n   try {\r\n     if (!name || !email || !password || !region || !available_days || !available_from || !available_to || !rate) {\r\n       return res.status(400).json({ error: 'All required fields must be filled.' });\r\n     }\r\n+\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n+\r\n     const query = `\r\n       INSERT INTO babysitters\r\n       (name, email, password, phone, region, available_days, available_from, available_to, about, rate)\r\n       VALUES\r\n       ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\r\n       RETURNING id, name, email, region, created_at;\r\n     `;\r\n+\r\n     const values = [\r\n       name,\r\n       email,\r\n       hashedPassword,\r\n@@ -443,9 +324,11 @@\n       available_to,\r\n       about,\r\n       rate\r\n     ];\r\n+\r\n     const result = await db.query(query, values);\r\n+\r\n     res.status(201).json({\r\n       message: 'Babysitter registered successfully.',\r\n       babysitter: result.rows[0]\r\n     });\r\n@@ -454,30 +337,37 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Babysitter Login\r\n+// Route: Babysitter login with JWT\r\n app.post('/api/babysitters/login', async (req, res) => {\r\n   const { email, password } = req.body;\r\n+\r\n   try {\r\n     if (!email || !password) {\r\n       return res.status(400).json({ error: 'Email and password are required.' });\r\n     }\r\n+\r\n     const query = `SELECT * FROM babysitters WHERE email = $1`;\r\n     const result = await db.query(query, [email]);\r\n+\r\n     if (result.rows.length === 0) {\r\n       return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n+\r\n     const babysitter = result.rows[0];\r\n     const isMatch = await bcrypt.compare(password, babysitter.password);\r\n+\r\n     if (!isMatch) {\r\n       return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n+\r\n     const token = jwt.sign(\r\n       { id: babysitter.id, email: babysitter.email },\r\n       process.env.JWT_SECRET,\r\n       { expiresIn: '3h' }\r\n     );\r\n+\r\n     res.status(200).json({\r\n       message: 'Login successful',\r\n       token,\r\n       role: 'babysitter',\r\n@@ -493,31 +383,35 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Babysitter Profile Get (Self)\r\n+// Route: Get babysitter profile (protected)\r\n app.get('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n   try {\r\n     const query = `\r\n       SELECT id, name, email, region, phone, available_days, available_from, available_to, about, rate, created_at\r\n       FROM babysitters\r\n       WHERE id = $1\r\n     `;\r\n     const result = await db.query(query, [req.user.id]);\r\n+\r\n     if (result.rows.length === 0) {\r\n       return res.status(404).json({ error: 'Babysitter not found.' });\r\n     }\r\n+\r\n     res.status(200).json(result.rows[0]);\r\n   } catch (error) {\r\n     console.error('Error fetching babysitter profile:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n-\r\n-// Babysitter Profile Get by ID\r\n+// Route: Get babysitter profile by ID\r\n app.get(\"/api/babysitters/:id\", async (req, res) => {\r\n   const { id } = req.params;\r\n+\r\n   try {\r\n+\r\n+    // Query to select all relevant fields except password\r\n     const query = `\r\n       SELECT \r\n         id,\r\n         name,\r\n@@ -534,20 +428,75 @@\n         profile_photo\r\n       FROM babysitters\r\n       WHERE id = $1\r\n     `;\r\n+\r\n     const result = await db.query(query, [id]);\r\n+\r\n     if (result.rows.length === 0) {\r\n       return res.status(404).json({ error: \"Babysitter not found.\" });\r\n     }\r\n+\r\n     res.json(result.rows[0]);\r\n   } catch (error) {\r\n     console.error(\"Error fetching babysitter profile:\", error);\r\n     res.status(500).json({ error: \"Internal server error.\" });\r\n   }\r\n });\r\n+// Babysitter approves or cancels a booking\r\n+app.put(\"/api/babysitters/bookings/:bookingId/status\", async (req, res) => {\r\n+  const { bookingId } = req.params;\r\n+  const { status } = req.body;\r\n \r\n-// Babysitter Profile Update\r\n+  if (![\"approved\", \"cancelled\"].includes(status)) {\r\n+    return res.status(400).json({ message: \"Invalid status\" });\r\n+  }\r\n+\r\n+  try {\r\n+    // Update the status\r\n+    await db.query(\r\n+      \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n+      [status, bookingId]\r\n+    );\r\n+\r\n+    res.json({ message: \"Booking status updated successfully\" });\r\n+  } catch (err) {\r\n+    console.error(\"Error updating booking status:\", err);\r\n+    res.status(500).json({ message: \"Internal server error\" });\r\n+  }\r\n+});\r\n+\r\n+// Get bookings for a babysitter including client details\r\n+app.get(\"/api/babysitters/:id/bookings\", async (req, res) => {\r\n+  const babysitterId = req.params.id;\r\n+\r\n+  try {\r\n+    const result = await db.query(\r\n+      `\r\n+      SELECT\r\n+        bookings.*,\r\n+        users.name AS parent_name,\r\n+        users.address AS client_address,\r\n+        users.phone AS client_phone,\r\n+        users.region AS client_region,\r\n+        users.children_count AS client_children\r\n+      FROM bookings\r\n+      JOIN users\r\n+        ON bookings.user_id = users.id\r\n+      WHERE bookings.babysitter_id = $1\r\n+      ORDER BY bookings.date DESC\r\n+      `,\r\n+      [babysitterId]\r\n+    );\r\n+\r\n+    res.json(result.rows);\r\n+  } catch (err) {\r\n+    console.error(\"Error fetching babysitter bookings:\", err);\r\n+    res.status(500).json({ message: \"Internal server error\" });\r\n+  }\r\n+});\r\n+\r\n+// Route: Update babysitter profile (protected)\r\n app.put('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n   const {\r\n     name,\r\n     email,\r\n@@ -558,14 +507,17 @@\n     available_to,\r\n     about,\r\n     rate\r\n   } = req.body;\r\n+\r\n   try {\r\n     const queryBabysitter = `SELECT * FROM babysitters WHERE id = $1`;\r\n     const resultBabysitter = await db.query(queryBabysitter, [req.user.id]);\r\n+\r\n     if (resultBabysitter.rows.length === 0) {\r\n       return res.status(404).json({ error: 'Babysitter not found.' });\r\n     }\r\n+\r\n     const updates = {\r\n       name: name || resultBabysitter.rows[0].name,\r\n       email: email || resultBabysitter.rows[0].email,\r\n       phone: phone || resultBabysitter.rows[0].phone,\r\n@@ -575,8 +527,9 @@\n       available_to: available_to || resultBabysitter.rows[0].available_to,\r\n       about: about || resultBabysitter.rows[0].about,\r\n       rate: rate || resultBabysitter.rows[0].rate\r\n     };\r\n+\r\n     const queryUpdate = `\r\n       UPDATE babysitters\r\n       SET name = $1,\r\n           email = $2,\r\n@@ -589,8 +542,9 @@\n           rate = $9\r\n       WHERE id = $10\r\n       RETURNING id, name, email, region, phone, available_days, available_from, available_to, about, rate, created_at;\r\n     `;\r\n+\r\n     const values = [\r\n       updates.name,\r\n       updates.email,\r\n       updates.phone,\r\n@@ -601,9 +555,11 @@\n       updates.about,\r\n       updates.rate,\r\n       req.user.id\r\n     ];\r\n+\r\n     const result = await db.query(queryUpdate, values);\r\n+\r\n     res.status(200).json({\r\n       message: 'Babysitter profile updated successfully.',\r\n       babysitter: result.rows[0]\r\n     });\r\n@@ -612,35 +568,41 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Babysitter Delete Account\r\n+// Route: Delete babysitter account (protected, must have no bookings)\r\n app.delete('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n   try {\r\n+    // Check if babysitter has related bookings\r\n     const bookingCheck = await db.query(\r\n       `SELECT id FROM bookings WHERE babysitter_id = $1`,\r\n       [req.user.id]\r\n     );\r\n+\r\n     if (bookingCheck.rows.length > 0) {\r\n       return res.status(400).json({\r\n         error: 'You must cancel all bookings before deleting your account.'\r\n       });\r\n     }\r\n+\r\n+    // Delete babysitter\r\n     const result = await db.query(\r\n       `DELETE FROM babysitters WHERE id = $1 RETURNING id`,\r\n       [req.user.id]\r\n     );\r\n+\r\n     if (result.rows.length === 0) {\r\n       return res.status(404).json({ error: 'Babysitter not found.' });\r\n     }\r\n+\r\n     res.status(200).json({ message: 'Babysitter account deleted successfully.' });\r\n   } catch (error) {\r\n     console.error('Error deleting babysitter account:', error.message);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Babysitter List All\r\n+// Route: Get all babysitters\r\n app.get('/api/babysitters', async (req, res) => {\r\n   try {\r\n     const query = `\r\n       SELECT\r\n@@ -666,141 +628,266 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Babysitter Bookings List\r\n-app.get(\"/api/babysitters/:id/bookings\", async (req, res) => {\r\n-  const babysitterId = req.params.id;\r\n+/* -----------------------------------\r\n+   Users Routes\r\n+----------------------------------- */\r\n+\r\n+// Route: Register a new user\r\n+app.post('/api/users/register', async (req, res) => {\r\n+  const { name, email, password } = req.body;\r\n+\r\n   try {\r\n-    const result = await db.query(\r\n-      `\r\n-      SELECT\r\n-        bookings.*,\r\n-        users.name AS parent_name,\r\n-        users.address AS client_address,\r\n-        users.phone AS client_phone,\r\n-        users.region AS client_region,\r\n-        users.children_count AS client_children\r\n-      FROM bookings\r\n-      JOIN users\r\n-        ON bookings.user_id = users.id\r\n-      WHERE bookings.babysitter_id = $1\r\n-      ORDER BY bookings.date DESC\r\n-      `,\r\n-      [babysitterId]\r\n+    if (!name || !email || !password) {\r\n+      return res.status(400).json({ error: 'Name, email, and password are required.' });\r\n+    }\r\n+\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+\r\n+    const query = `\r\n+      INSERT INTO users (name, email, password)\r\n+      VALUES ($1, $2, $3)\r\n+      RETURNING id, name, email, created_at;\r\n+    `;\r\n+\r\n+    const values = [name, email, hashedPassword];\r\n+    const result = await db.query(query, values);\r\n+    const token = jwt.sign(\r\n+      { id: result.rows[0].id, email: result.rows[0].email, role: 'user' },\r\n+      process.env.JWT_SECRET,\r\n+      { expiresIn: '3h' }\r\n     );\r\n-    res.json(result.rows);\r\n-  } catch (err) {\r\n-    console.error(\"Error fetching babysitter bookings:\", err);\r\n-    res.status(500).json({ message: \"Internal server error\" });\r\n-  }\r\n-});\r\n+    \r\n+    res.status(201).json({\r\n+      message: 'User registered successfully.',\r\n+      token,\r\n+      role: 'user',\r\n+      user: {\r\n+        id: result.rows[0].id,\r\n+        name: result.rows[0].name,\r\n+        email: result.rows[0].email,\r\n+        created_at: result.rows[0].created_at\r\n+      }\r\n+    });\r\n \r\n-// Babysitter Update Booking Status\r\n-app.put(\"/api/babysitters/bookings/:bookingId/status\", async (req, res) => {\r\n-  const { bookingId } = req.params;\r\n-  const { status } = req.body;\r\n-  if (![\"approved\", \"cancelled\"].includes(status)) {\r\n-    return res.status(400).json({ message: \"Invalid status\" });\r\n+  } catch (error) {\r\n+    console.error('Error registering user:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n-  try {\r\n-    await db.query(\r\n-      \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n-      [status, bookingId]\r\n-    );\r\n-    res.json({ message: \"Booking status updated successfully\" });\r\n-  } catch (err) {\r\n-    console.error(\"Error updating booking status:\", err);\r\n-    res.status(500).json({ message: \"Internal server error\" });\r\n-  }\r\n });\r\n \r\n-/* -----------------------------------\r\n-   Password Management Routes\r\n------------------------------------ */\r\n+// Route: User login with JWT\r\n+app.post('/api/users/login', async (req, res) => {\r\n+  const { email, password } = req.body;\r\n \r\n-// Babysitter Change Password\r\n-app.put('/api/babysitters/change-password', authMiddleware, async (req, res) => {\r\n-  const { currentPassword, newPassword } = req.body;\r\n   try {\r\n-    if (!currentPassword || !newPassword) {\r\n-      return res.status(400).json({ error: 'Current and new password are required.' });\r\n+    if (!email || !password) {\r\n+      return res.status(400).json({ error: 'Email and password are required.' });\r\n     }\r\n-    const query = `SELECT * FROM babysitters WHERE id = $1`;\r\n-    const result = await db.query(query, [req.user.id]);\r\n+\r\n+    const query = `SELECT * FROM users WHERE email = $1`;\r\n+    const result = await db.query(query, [email]);\r\n+\r\n     if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'Babysitter not found.' });\r\n+      return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n-    const babysitter = result.rows[0];\r\n-    const isMatch = await bcrypt.compare(currentPassword, babysitter.password);\r\n+\r\n+    const user = result.rows[0];\r\n+    const isMatch = await bcrypt.compare(password, user.password);\r\n+\r\n     if (!isMatch) {\r\n-      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n+      return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n-    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n-    await db.query(\r\n-      `UPDATE babysitters SET password = $1 WHERE id = $2`,\r\n-      [hashedPassword, req.user.id]\r\n+\r\n+    const token = jwt.sign(\r\n+      { id: user.id, email: user.email },\r\n+      process.env.JWT_SECRET,\r\n+      { expiresIn: '3h' }\r\n     );\r\n-    res.status(200).json({ message: 'Password updated successfully.' });\r\n+\r\n+    res.status(200).json({\r\n+      message: 'Login successful',\r\n+      token,\r\n+      role: 'user',\r\n+      user: {\r\n+        id: user.id,\r\n+        name: user.name,\r\n+        email: user.email,\r\n+        created_at: user.created_at\r\n+      }\r\n+    });\r\n   } catch (error) {\r\n-    console.error('Error changing password:', error.message);\r\n+    console.error('User login error:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// User Change Password\r\n-app.put('/api/users/change-password', authMiddleware, async (req, res) => {\r\n-  const { currentPassword, newPassword } = req.body;\r\n+// Route: Get logged-in user profile (protected)\r\n+app.get('/api/users/profile', authMiddleware, async (req, res) => {\r\n   try {\r\n-    if (!currentPassword || !newPassword) {\r\n-      return res.status(400).json({ error: 'Both current and new passwords are required.' });\r\n+    const query = `SELECT id, name, email, phone, region, address, children_count, created_at FROM users WHERE id = $1`;\r\n+    const result = await db.query(query, [req.user.id]);\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n     }\r\n+\r\n+    res.status(200).json(result.rows[0]);\r\n+  } catch (error) {\r\n+    console.error('Profile fetch error:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: Update user profile (protected)\r\n+app.put('/api/users/profile', authMiddleware, async (req, res) => {\r\n+  const {\r\n+    name,\r\n+    email,\r\n+    password,\r\n+    phone,\r\n+    region,\r\n+    children_count,\r\n+    address\r\n+  } = req.body;\r\n+\r\n+  try {\r\n     const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n     const resultUser = await db.query(queryUser, [req.user.id]);\r\n+\r\n     if (resultUser.rows.length === 0) {\r\n       return res.status(404).json({ error: 'User not found.' });\r\n     }\r\n-    const user = resultUser.rows[0];\r\n-    const isMatch = await bcrypt.compare(currentPassword, user.password);\r\n-    if (!isMatch) {\r\n-      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n+\r\n+    const existingUser = resultUser.rows[0];\r\n+\r\n+    // Safe updates: use old values if not provided\r\n+    const updates = {\r\n+      name: name || existingUser.name,\r\n+      email: email || existingUser.email,\r\n+      phone: phone || existingUser.phone,\r\n+      region: region || existingUser.region,\r\n+      address: address || existingUser.address,\r\n+      children_count:\r\n+        children_count === \"\" || children_count === undefined\r\n+          ? existingUser.children_count\r\n+          : parseInt(children_count, 10)\r\n+    };\r\n+\r\n+    let hashedPassword = existingUser.password;\r\n+    if (password) {\r\n+      hashedPassword = await bcrypt.hash(password, 10);\r\n     }\r\n-    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n-    await db.query(\r\n-      `UPDATE users SET password = $1 WHERE id = $2`,\r\n-      [hashedPassword, req.user.id]\r\n+\r\n+    const queryUpdate = `\r\n+      UPDATE users\r\n+      SET\r\n+        name = $1,\r\n+        email = $2,\r\n+        password = $3,\r\n+        phone = $4,\r\n+        region = $5,\r\n+        children_count = $6,\r\n+        address = $7\r\n+      WHERE id = $8\r\n+      RETURNING id, name, email, phone, region, children_count, address, created_at;\r\n+    `;\r\n+\r\n+    const values = [\r\n+      updates.name,\r\n+      updates.email,\r\n+      hashedPassword,\r\n+      updates.phone,\r\n+      updates.region,\r\n+      updates.children_count,\r\n+      updates.address,\r\n+      req.user.id\r\n+    ];\r\n+\r\n+    const result = await db.query(queryUpdate, values);\r\n+\r\n+    res.status(200).json({\r\n+      message: 'Profile updated successfully.',\r\n+      user: result.rows[0]\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error updating profile:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: Delete user account (protected, must have no bookings)\r\n+app.delete('/api/users/profile', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    // Check if user has related bookings\r\n+    const bookingCheck = await db.query(\r\n+      `SELECT id FROM bookings WHERE user_id = $1`,\r\n+      [req.user.id]\r\n     );\r\n-    res.status(200).json({ message: 'Password updated successfully.' });\r\n+\r\n+    if (bookingCheck.rows.length > 0) {\r\n+      return res.status(400).json({\r\n+        error: 'You must cancel all bookings before deleting your account.'\r\n+      });\r\n+    }\r\n+\r\n+    // Delete user\r\n+    const result = await db.query(\r\n+      `DELETE FROM users WHERE id = $1 RETURNING id`,\r\n+      [req.user.id]\r\n+    );\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n+    }\r\n+\r\n+    res.status(200).json({ message: 'User account deleted successfully.' });\r\n   } catch (error) {\r\n-    console.error('Error changing password:', error);\r\n+    console.error('Error deleting user account:', error.message);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-/* -----------------------------------\r\n-   Universal Login\r\n------------------------------------ */\r\n+// Route: Get all users (protected)\r\n+app.get('/api/users', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    const query = `SELECT id, name, email, created_at FROM users ORDER BY id ASC`;\r\n+    const result = await db.query(query);\r\n \r\n-// Universal Login (User or Babysitter)\r\n+    res.status(200).json(result.rows);\r\n+  } catch (error) {\r\n+    console.error('Error fetching users:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: Universal login (users or babysitters)\r\n app.post('/api/login', async (req, res) => {\r\n   const { email, password } = req.body;\r\n+\r\n   try {\r\n     if (!email || !password) {\r\n       return res.status(400).json({ error: 'Email and password are required.' });\r\n     }\r\n+\r\n+    // First try to find in users\r\n     const userQuery = `SELECT * FROM users WHERE email = $1`;\r\n     const userResult = await db.query(userQuery, [email]);\r\n+\r\n     if (userResult.rows.length > 0) {\r\n       const user = userResult.rows[0];\r\n       const isMatch = await bcrypt.compare(password, user.password);\r\n       if (!isMatch) {\r\n         return res.status(401).json({ error: 'Invalid email or password.' });\r\n       }\r\n+\r\n       const token = jwt.sign(\r\n         { id: user.id, email: user.email, role: 'user' },\r\n         process.env.JWT_SECRET,\r\n         { expiresIn: '3h' }\r\n       );\r\n+\r\n       return res.status(200).json({\r\n         message: 'Login successful',\r\n         token,\r\n         role: 'user',\r\n@@ -811,21 +898,26 @@\n           created_at: user.created_at\r\n         }\r\n       });\r\n     }\r\n+\r\n+    // If not found, try babysitters\r\n     const babysitterQuery = `SELECT * FROM babysitters WHERE email = $1`;\r\n     const babysitterResult = await db.query(babysitterQuery, [email]);\r\n+\r\n     if (babysitterResult.rows.length > 0) {\r\n       const babysitter = babysitterResult.rows[0];\r\n       const isMatch = await bcrypt.compare(password, babysitter.password);\r\n       if (!isMatch) {\r\n         return res.status(401).json({ error: 'Invalid email or password.' });\r\n       }\r\n+\r\n       const token = jwt.sign(\r\n         { id: babysitter.id, email: babysitter.email, role: 'babysitter' },\r\n         process.env.JWT_SECRET,\r\n         { expiresIn: '3h' }\r\n       );\r\n+\r\n       return res.status(200).json({\r\n         message: 'Login successful',\r\n         token,\r\n         role: 'babysitter',\r\n@@ -836,29 +928,201 @@\n           region: babysitter.region\r\n         }\r\n       });\r\n     }\r\n+\r\n+    // Not found in either table\r\n     return res.status(401).json({ error: 'Invalid email or password.' });\r\n+\r\n   } catch (error) {\r\n     console.error('Universal login error:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n+\r\n+// Route: Change babysitter password (protected)\r\n+app.put('/api/babysitters/change-password', authMiddleware, async (req, res) => {\r\n+  const { currentPassword, newPassword } = req.body;\r\n+\r\n+  try {\r\n+    if (!currentPassword || !newPassword) {\r\n+      return res.status(400).json({ error: 'Current and new password are required.' });\r\n+    }\r\n+\r\n+    // Fetch babysitter from DB\r\n+    const query = `SELECT * FROM babysitters WHERE id = $1`;\r\n+    const result = await db.query(query, [req.user.id]);\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'Babysitter not found.' });\r\n+    }\r\n+\r\n+    const babysitter = result.rows[0];\r\n+\r\n+    // Check if current password is correct\r\n+    const isMatch = await bcrypt.compare(currentPassword, babysitter.password);\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n+    }\r\n+\r\n+    // Hash new password\r\n+    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n+\r\n+    // Update password in DB\r\n+    const updateQuery = `\r\n+      UPDATE babysitters\r\n+      SET password = $1\r\n+      WHERE id = $2\r\n+    `;\r\n+    await db.query(updateQuery, [hashedPassword, req.user.id]);\r\n+\r\n+    res.status(200).json({ message: 'Password updated successfully.' });\r\n+  } catch (error) {\r\n+    console.error('Error changing password:', error.message);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: Change user password (protected)\r\n+app.put('/api/users/change-password', authMiddleware, async (req, res) => {\r\n+  const { currentPassword, newPassword } = req.body;\r\n+\r\n+  try {\r\n+    if (!currentPassword || !newPassword) {\r\n+      return res.status(400).json({ error: 'Both current and new passwords are required.' });\r\n+    }\r\n+\r\n+    // Get the user\r\n+    const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n+    const resultUser = await db.query(queryUser, [req.user.id]);\r\n+\r\n+    if (resultUser.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n+    }\r\n+\r\n+    const user = resultUser.rows[0];\r\n+\r\n+    // Compare current password\r\n+    const isMatch = await bcrypt.compare(currentPassword, user.password);\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n+    }\r\n+\r\n+    // Hash new password\r\n+    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n+\r\n+    // Update password\r\n+    const queryUpdate = `\r\n+      UPDATE users\r\n+      SET password = $1\r\n+      WHERE id = $2\r\n+    `;\r\n+    await db.query(queryUpdate, [hashedPassword, req.user.id]);\r\n+\r\n+    res.status(200).json({ message: 'Password updated successfully.' });\r\n+  } catch (error) {\r\n+    console.error('Error changing password:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: Update user password (protected)\r\n+app.put('/api/users/profile/password', authMiddleware, async (req, res) => {\r\n+  const { currentPassword, newPassword } = req.body;\r\n+\r\n+  try {\r\n+    if (!currentPassword || !newPassword) {\r\n+      return res.status(400).json({ error: 'Current and new password are required.' });\r\n+    }\r\n+\r\n+    // Fetch user\r\n+    const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n+    const resultUser = await db.query(queryUser, [req.user.id]);\r\n+\r\n+    if (resultUser.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n+    }\r\n+\r\n+    const user = resultUser.rows[0];\r\n+\r\n+    // Verify current password\r\n+    const isMatch = await bcrypt.compare(currentPassword, user.password);\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n+    }\r\n+\r\n+    // Hash new password\r\n+    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n+\r\n+    // Update password\r\n+    const queryUpdate = `\r\n+      UPDATE users\r\n+      SET password = $1\r\n+      WHERE id = $2\r\n+      RETURNING id;\r\n+    `;\r\n+    await db.query(queryUpdate, [hashedPassword, req.user.id]);\r\n+\r\n+    res.status(200).json({ message: 'Password updated successfully.' });\r\n+  } catch (error) {\r\n+    console.error('Error updating password:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: Update booking status (protected)\r\n+app.put('/api/bookings/:id/status', authMiddleware, async (req, res) => {\r\n+  const { id } = req.params;\r\n+  const { status } = req.body;\r\n+\r\n+  try {\r\n+    // Valida status permitido\r\n+    const validStatuses = ['pending', 'confirmed', 'rejected', 'cancelled'];\r\n+    if (!validStatuses.includes(status)) {\r\n+      return res.status(400).json({ error: 'Invalid status value.' });\r\n+    }\r\n+\r\n+    // update database\r\n+    const query = `\r\n+      UPDATE bookings\r\n+      SET status = $1\r\n+      WHERE id = $2\r\n+      RETURNING *;\r\n+    `;\r\n+    const values = [status, id];\r\n+    const result = await db.query(query, values);\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'Booking not found.' });\r\n+    }\r\n+\r\n+    res.status(200).json({\r\n+      message: 'Booking status updated successfully.',\r\n+      booking: result.rows[0],\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error updating booking status:', error);\r\n+    res.status(500).json({ error: 'Internal server error.' });\r\n+  }\r\n+});\r\n+\r\n /* -----------------------------------\r\n    Bookings Routes\r\n ----------------------------------- */\r\n \r\n-// Create Booking\r\n+// Route: Create a new booking\r\n app.post('/api/bookings', async (req, res) => {\r\n   const { user_id, babysitter_id, date, time_start, time_end } = req.body;\r\n+\r\n   try {\r\n     const query = `\r\n       INSERT INTO bookings (user_id, babysitter_id, date, time_start, time_end)\r\n       VALUES ($1, $2, $3, $4, $5)\r\n       RETURNING *;\r\n     `;\r\n     const values = [user_id, babysitter_id, date, time_start, time_end];\r\n     const result = await db.query(query, values);\r\n+\r\n     res.status(201).json({\r\n       message: 'Booking created successfully.',\r\n       booking: result.rows[0]\r\n     });\r\n@@ -867,11 +1131,12 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Get Bookings for User\r\n+// Route: Get all bookings for a user\r\n app.get('/api/bookings/:user_id', async (req, res) => {\r\n   const { user_id } = req.params;\r\n+\r\n   try {\r\n     const query = `\r\n       SELECT \r\n         b.id, b.date, b.time_start, b.time_end, b.status,\r\n@@ -881,18 +1146,19 @@\n       WHERE b.user_id = $1\r\n       ORDER BY b.date ASC;\r\n     `;\r\n     const result = await db.query(query, [user_id]);\r\n+\r\n     res.status(200).json(result.rows);\r\n   } catch (error) {\r\n     console.error('Error fetching bookings:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n-\r\n-// Get Bookings for Babysitter\r\n+// Route: Get all bookings for a babysitter\r\n app.get('/api/babysitters/:id/bookings', async (req, res) => {\r\n   const babysitterId = req.params.id;\r\n+\r\n   try {\r\n     const query = `\r\n       SELECT \r\n         b.id,\r\n@@ -905,46 +1171,18 @@\n       JOIN users u ON b.user_id = u.id\r\n       WHERE b.babysitter_id = $1\r\n       ORDER BY b.date ASC, b.time_start ASC;\r\n     `;\r\n+\r\n     const result = await db.query(query, [babysitterId]);\r\n+\r\n     res.status(200).json(result.rows);\r\n   } catch (error) {\r\n     console.error('Error fetching babysitter bookings:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Update Booking Status (Generic)\r\n-app.put('/api/bookings/:id/status', authMiddleware, async (req, res) => {\r\n-  const { id } = req.params;\r\n-  const { status } = req.body;\r\n-  try {\r\n-    const validStatuses = ['pending', 'confirmed', 'rejected', 'cancelled'];\r\n-    if (!validStatuses.includes(status)) {\r\n-      return res.status(400).json({ error: 'Invalid status value.' });\r\n-    }\r\n-    const query = `\r\n-      UPDATE bookings\r\n-      SET status = $1\r\n-      WHERE id = $2\r\n-      RETURNING *;\r\n-    `;\r\n-    const values = [status, id];\r\n-    const result = await db.query(query, values);\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'Booking not found.' });\r\n-    }\r\n-    res.status(200).json({\r\n-      message: 'Booking status updated successfully.',\r\n-      booking: result.rows[0],\r\n-    });\r\n-  } catch (error) {\r\n-    console.error('Error updating booking status:', error);\r\n-    res.status(500).json({ error: 'Internal server error.' });\r\n-  }\r\n-});\r\n-\r\n /* -----------------------------------\r\n    Root Endpoint\r\n ----------------------------------- */\r\n app.get('/', (req, res) => {\r\n"
                },
                {
                    "date": 1751602253440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,15 @@\n-// Import dependencies\r\n+// -----------------------------------\r\n+// Dependencies and Setup\r\n+// -----------------------------------\r\n const express = require('express');\r\n const app = express();\r\n-require('dotenv').config(); // Load environment variables\r\n-const bcrypt = require('bcrypt'); // For hashing passwords\r\n-const jwt = require('jsonwebtoken'); // JSON Web Token for authentication\r\n-const { Client } = require('pg'); // PostgreSQL client\r\n-const authMiddleware = require('./middleware/authMiddleware'); // Custom authentication middleware\r\n-const cors = require('cors'); // For handling CORS\r\n+require('dotenv').config();\r\n+const bcrypt = require('bcrypt');\r\n+const jwt = require('jsonwebtoken');\r\n+const { Client } = require('pg');\r\n+const authMiddleware = require('./middleware/authMiddleware');\r\n+const cors = require('cors');\r\n \r\n // PostgreSQL client configuration\r\n const db = new Client({\r\n   user: 'postgres',\r\n@@ -21,80 +23,54 @@\n db.connect()\r\n   .then(() => console.log('Connected to PostgreSQL'))\r\n   .catch(err => console.error('Connection error', err.stack));\r\n \r\n-// Middleware to parse JSON requests\r\n+// Middleware\r\n app.use(express.json());\r\n app.use(cors());\r\n \r\n /* -----------------------------------\r\n    Admin Routes\r\n ----------------------------------- */\r\n \r\n-/**\r\n- * Admin Register Endpoint\r\n- * POST /api/admin/register\r\n- * Request Body: { name, email, password }\r\n- * Response: { message }\r\n- */\r\n+// Admin Register\r\n app.post(\"/api/admin/register\", async (req, res) => {\r\n   const { name, email, password } = req.body;\r\n-\r\n   try {\r\n-    // Check if admin with this email already exists\r\n     const existing = await db.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n     if (existing.rows.length > 0) {\r\n       return res.status(400).json({ message: \"Admin with this email already exists\" });\r\n     }\r\n-\r\n-    // Hash the password\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n-\r\n-    // Insert new admin\r\n     await db.query(\r\n       \"INSERT INTO admins (name, email, password) VALUES ($1, $2, $3)\",\r\n       [name, email, hashedPassword]\r\n     );\r\n-\r\n     res.json({ message: \"Admin created successfully\" });\r\n   } catch (err) {\r\n     console.error(\"Admin register error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-/**\r\n- * Admin Login Endpoint\r\n- * POST /api/admin/login\r\n- * Request Body: { email, password }\r\n- * Response: { token, user }\r\n- */\r\n+// Admin Login\r\n app.post(\"/api/admin/login\", async (req, res) => {\r\n   const { email, password } = req.body;\r\n-\r\n   try {\r\n-    // Find admin by email\r\n     const result = await db.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n-\r\n     if (result.rows.length === 0) {\r\n       return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n-\r\n     const admin = result.rows[0];\r\n-\r\n-    // Compare password hash\r\n     const validPassword = await bcrypt.compare(password, admin.password);\r\n     if (!validPassword) {\r\n       return res.status(401).json({ message: \"Invalid credentials\" });\r\n     }\r\n-\r\n-    // Generate JWT\r\n     const token = jwt.sign(\r\n       { id: admin.id, email: admin.email, role: \"admin\" },\r\n       process.env.JWT_SECRET,\r\n       { expiresIn: \"8h\" }\r\n     );\r\n-\r\n     res.json({\r\n       token,\r\n       user: {\r\n         id: admin.id,\r\n@@ -107,29 +83,21 @@\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-/**\r\n- * Admin Summary Endpoint\r\n- * GET /api/admin/summary\r\n- * Response: { usersCount, babysittersCount, bookingsCount, pendingBookings }\r\n- */\r\n+// Admin Summary\r\n app.get(\"/api/admin/summary\", async (req, res) => {\r\n   try {\r\n     const usersResult = await db.query(\"SELECT COUNT(*) FROM users\");\r\n     const usersCount = parseInt(usersResult.rows[0].count);\r\n-\r\n     const babysittersResult = await db.query(\"SELECT COUNT(*) FROM babysitters\");\r\n     const babysittersCount = parseInt(babysittersResult.rows[0].count);\r\n-\r\n     const bookingsResult = await db.query(\"SELECT COUNT(*) FROM bookings\");\r\n     const bookingsCount = parseInt(bookingsResult.rows[0].count);\r\n-\r\n     const pendingResult = await db.query(\r\n       \"SELECT COUNT(*) FROM bookings WHERE status = 'pending'\"\r\n     );\r\n     const pendingBookings = parseInt(pendingResult.rows[0].count);\r\n-\r\n     res.json({\r\n       usersCount,\r\n       babysittersCount,\r\n       bookingsCount,\r\n@@ -140,13 +108,9 @@\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-/**\r\n- * Admin Bookings Endpoint\r\n- * GET /api/admin/bookings\r\n- * Response: array of bookings with client and babysitter names\r\n- */\r\n+// Admin Bookings List\r\n app.get(\"/api/admin/bookings\", async (req, res) => {\r\n   try {\r\n     const result = await db.query(`\r\n       SELECT\r\n@@ -161,106 +125,76 @@\n       JOIN users u ON b.user_id = u.id\r\n       JOIN babysitters s ON b.babysitter_id = s.id\r\n       ORDER BY b.date DESC\r\n     `);\r\n-\r\n     res.json(result.rows);\r\n   } catch (err) {\r\n     console.error(\"Admin bookings error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-/**\r\n- * Admin Users Endpoint\r\n- * GET /api/admin/users\r\n- * Response: array of users and babysitters\r\n- */\r\n+// Admin Users List\r\n app.get(\"/api/admin/users\", async (req, res) => {\r\n   try {\r\n     const usersResult = await db.query(`\r\n       SELECT id, name, email, 'client' AS role, created_at\r\n       FROM users\r\n     `);\r\n-\r\n     const babysittersResult = await db.query(`\r\n       SELECT id, name, email, 'babysitter' AS role, created_at\r\n       FROM babysitters\r\n     `);\r\n-\r\n     const combined = [...usersResult.rows, ...babysittersResult.rows];\r\n-\r\n     res.json(combined);\r\n   } catch (err) {\r\n     console.error(\"Admin users error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n-/**\r\n- * Admin Update Booking Status Endpoint\r\n- * PUT /api/admin/bookings/:id/status\r\n- * Request Body: { status }\r\n- * Response: { message }\r\n- */\r\n+\r\n+// Admin Update Booking Status\r\n app.put(\"/api/admin/bookings/:id/status\", async (req, res) => {\r\n   const bookingId = req.params.id;\r\n   const { status } = req.body;\r\n-\r\n-  // Validate status\r\n   const allowedStatuses = [\"pending\", \"approved\", \"cancelled\"];\r\n   if (!allowedStatuses.includes(status)) {\r\n     return res.status(400).json({ message: \"Invalid status value\" });\r\n   }\r\n-\r\n   try {\r\n-    // Update booking status in the database using client\r\n     await db.query(\r\n       \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n       [status, bookingId]\r\n     );\r\n-\r\n     res.json({ message: \"Booking status updated successfully\" });\r\n   } catch (err) {\r\n     console.error(\"Update booking status error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-/**\r\n- * Admin Delete User Endpoint\r\n- * DELETE /api/admin/users/:role/:id\r\n- * Response: { message }\r\n- */\r\n+// Admin Delete User\r\n app.delete(\"/api/admin/users/:role/:id\", async (req, res) => {\r\n   const { role, id } = req.params;\r\n-\r\n-  // Validate role value\r\n   if (role !== \"client\" && role !== \"babysitter\") {\r\n     return res.status(400).json({ message: \"Invalid role\" });\r\n   }\r\n-\r\n-  // Determine table name\r\n   const table = role === \"client\" ? \"users\" : \"babysitters\";\r\n-\r\n   try {\r\n-    // Delete related bookings first\r\n     if (role === \"client\") {\r\n       await db.query(\"DELETE FROM bookings WHERE user_id = $1\", [id]);\r\n     } else if (role === \"babysitter\") {\r\n       await db.query(\"DELETE FROM bookings WHERE babysitter_id = $1\", [id]);\r\n     }\r\n-\r\n-    // Delete user or babysitter\r\n     await db.query(`DELETE FROM ${table} WHERE id = $1`, [id]);\r\n-\r\n     res.json({ message: `${role} and related bookings deleted successfully` });\r\n   } catch (err) {\r\n     console.error(\"Delete user error:\", err);\r\n     res.status(500).json({ message: \"Internal server error\" });\r\n   }\r\n });\r\n \r\n-// DELETE booking by ID (Admin)\r\n+// Admin Delete Booking\r\n app.delete(\"/api/admin/bookings/:id\", async (req, res) => {\r\n   try {\r\n     await db.query(\"DELETE FROM bookings WHERE id = $1\", [req.params.id]);\r\n     res.json({ message: \"Booking deleted successfully\" });\r\n@@ -270,12 +204,205 @@\n   }\r\n });\r\n \r\n /* -----------------------------------\r\n+   Clients Routes\r\n+----------------------------------- */\r\n+\r\n+// Client Register\r\n+app.post('/api/users/register', async (req, res) => {\r\n+  const { name, email, password } = req.body;\r\n+  try {\r\n+    if (!name || !email || !password) {\r\n+      return res.status(400).json({ error: 'Name, email, and password are required.' });\r\n+    }\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+    const query = `\r\n+      INSERT INTO users (name, email, password)\r\n+      VALUES ($1, $2, $3)\r\n+      RETURNING id, name, email, created_at;\r\n+    `;\r\n+    const values = [name, email, hashedPassword];\r\n+    const result = await db.query(query, values);\r\n+    const token = jwt.sign(\r\n+      { id: result.rows[0].id, email: result.rows[0].email, role: 'user' },\r\n+      process.env.JWT_SECRET,\r\n+      { expiresIn: '3h' }\r\n+    );\r\n+    res.status(201).json({\r\n+      message: 'User registered successfully.',\r\n+      token,\r\n+      role: 'user',\r\n+      user: {\r\n+        id: result.rows[0].id,\r\n+        name: result.rows[0].name,\r\n+        email: result.rows[0].email,\r\n+        created_at: result.rows[0].created_at\r\n+      }\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error registering user:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+// -----------------------------------\r\n+// Clients Routes\r\n+// -----------------------------------\r\n+\r\n+// Client Login\r\n+app.post('/api/users/login', async (req, res) => {\r\n+  const { email, password } = req.body;\r\n+  try {\r\n+    if (!email || !password) {\r\n+      return res.status(400).json({ error: 'Email and password are required.' });\r\n+    }\r\n+    const query = `SELECT * FROM users WHERE email = $1`;\r\n+    const result = await db.query(query, [email]);\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(401).json({ error: 'Invalid email or password.' });\r\n+    }\r\n+    const user = result.rows[0];\r\n+    const isMatch = await bcrypt.compare(password, user.password);\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({ error: 'Invalid email or password.' });\r\n+    }\r\n+    const token = jwt.sign(\r\n+      { id: user.id, email: user.email },\r\n+      process.env.JWT_SECRET,\r\n+      { expiresIn: '3h' }\r\n+    );\r\n+    res.status(200).json({\r\n+      message: 'Login successful',\r\n+      token,\r\n+      role: 'user',\r\n+      user: {\r\n+        id: user.id,\r\n+        name: user.name,\r\n+        email: user.email,\r\n+        created_at: user.created_at\r\n+      }\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('User login error:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Client Profile Get\r\n+app.get('/api/users/profile', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    const query = `SELECT id, name, email, phone, region, address, children_count, created_at FROM users WHERE id = $1`;\r\n+    const result = await db.query(query, [req.user.id]);\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n+    }\r\n+    res.status(200).json(result.rows[0]);\r\n+  } catch (error) {\r\n+    console.error('Profile fetch error:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Client Profile Update\r\n+app.put('/api/users/profile', authMiddleware, async (req, res) => {\r\n+  const { name, email, password, phone, region, children_count, address } = req.body;\r\n+  try {\r\n+    const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n+    const resultUser = await db.query(queryUser, [req.user.id]);\r\n+    if (resultUser.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n+    }\r\n+    const existingUser = resultUser.rows[0];\r\n+    const updates = {\r\n+      name: name || existingUser.name,\r\n+      email: email || existingUser.email,\r\n+      phone: phone || existingUser.phone,\r\n+      region: region || existingUser.region,\r\n+      address: address || existingUser.address,\r\n+      children_count:\r\n+        children_count === \"\" || children_count === undefined\r\n+          ? existingUser.children_count\r\n+          : parseInt(children_count, 10)\r\n+    };\r\n+    let hashedPassword = existingUser.password;\r\n+    if (password) {\r\n+      hashedPassword = await bcrypt.hash(password, 10);\r\n+    }\r\n+    const queryUpdate = `\r\n+      UPDATE users\r\n+      SET\r\n+        name = $1,\r\n+        email = $2,\r\n+        password = $3,\r\n+        phone = $4,\r\n+        region = $5,\r\n+        children_count = $6,\r\n+        address = $7\r\n+      WHERE id = $8\r\n+      RETURNING id, name, email, phone, region, children_count, address, created_at;\r\n+    `;\r\n+    const values = [\r\n+      updates.name,\r\n+      updates.email,\r\n+      hashedPassword,\r\n+      updates.phone,\r\n+      updates.region,\r\n+      updates.children_count,\r\n+      updates.address,\r\n+      req.user.id\r\n+    ];\r\n+    const result = await db.query(queryUpdate, values);\r\n+    res.status(200).json(result.rows[0]);\r\n+\r\n+  } catch (error) {\r\n+    console.error('Error updating profile:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Client Delete Account\r\n+app.delete('/api/users/profile', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    const bookingCheck = await db.query(\r\n+      `SELECT id FROM bookings WHERE user_id = $1`,\r\n+      [req.user.id]\r\n+    );\r\n+    if (bookingCheck.rows.length > 0) {\r\n+      return res.status(400).json({\r\n+        error: 'You must cancel all bookings before deleting your account.'\r\n+      });\r\n+    }\r\n+    const result = await db.query(\r\n+      `DELETE FROM users WHERE id = $1 RETURNING id`,\r\n+      [req.user.id]\r\n+    );\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n+    }\r\n+    res.status(200).json({ message: 'User account deleted successfully.' });\r\n+  } catch (error) {\r\n+    console.error('Error deleting user account:', error.message);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Client List All Users\r\n+app.get('/api/users', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    const query = `SELECT id, name, email, created_at FROM users ORDER BY id ASC`;\r\n+    const result = await db.query(query);\r\n+    res.status(200).json(result.rows);\r\n+  } catch (error) {\r\n+    console.error('Error fetching users:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+/* -----------------------------------\r\n    Babysitters Routes\r\n ----------------------------------- */\r\n \r\n-// Route: Register a new babysitter\r\n+// Babysitter Register\r\n app.post('/api/babysitters/register', async (req, res) => {\r\n   const {\r\n     name,\r\n     email,\r\n@@ -287,33 +414,26 @@\n     available_to,\r\n     about,\r\n     rate\r\n   } = req.body;\r\n-  // Ensure available_days is an array\r\n-    let availableDaysArray = [];\r\n-\r\n-    if (Array.isArray(available_days)) {\r\n-      availableDaysArray = available_days;\r\n-    } else if (typeof available_days === \"string\") {\r\n-      availableDaysArray = available_days.split(\",\").map(day => day.trim());\r\n+  let availableDaysArray = [];\r\n+  if (Array.isArray(available_days)) {\r\n+    availableDaysArray = available_days;\r\n+  } else if (typeof available_days === \"string\") {\r\n+    availableDaysArray = available_days.split(\",\").map(day => day.trim());\r\n   }\r\n-\r\n-\r\n   try {\r\n     if (!name || !email || !password || !region || !available_days || !available_from || !available_to || !rate) {\r\n       return res.status(400).json({ error: 'All required fields must be filled.' });\r\n     }\r\n-\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n-\r\n     const query = `\r\n       INSERT INTO babysitters\r\n       (name, email, password, phone, region, available_days, available_from, available_to, about, rate)\r\n       VALUES\r\n       ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\r\n       RETURNING id, name, email, region, created_at;\r\n     `;\r\n-\r\n     const values = [\r\n       name,\r\n       email,\r\n       hashedPassword,\r\n@@ -324,11 +444,9 @@\n       available_to,\r\n       about,\r\n       rate\r\n     ];\r\n-\r\n     const result = await db.query(query, values);\r\n-\r\n     res.status(201).json({\r\n       message: 'Babysitter registered successfully.',\r\n       babysitter: result.rows[0]\r\n     });\r\n@@ -337,37 +455,30 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Babysitter login with JWT\r\n+// Babysitter Login\r\n app.post('/api/babysitters/login', async (req, res) => {\r\n   const { email, password } = req.body;\r\n-\r\n   try {\r\n     if (!email || !password) {\r\n       return res.status(400).json({ error: 'Email and password are required.' });\r\n     }\r\n-\r\n     const query = `SELECT * FROM babysitters WHERE email = $1`;\r\n     const result = await db.query(query, [email]);\r\n-\r\n     if (result.rows.length === 0) {\r\n       return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n-\r\n     const babysitter = result.rows[0];\r\n     const isMatch = await bcrypt.compare(password, babysitter.password);\r\n-\r\n     if (!isMatch) {\r\n       return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n-\r\n     const token = jwt.sign(\r\n       { id: babysitter.id, email: babysitter.email },\r\n       process.env.JWT_SECRET,\r\n       { expiresIn: '3h' }\r\n     );\r\n-\r\n     res.status(200).json({\r\n       message: 'Login successful',\r\n       token,\r\n       role: 'babysitter',\r\n@@ -383,35 +494,31 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Get babysitter profile (protected)\r\n+// Babysitter Profile Get (Self)\r\n app.get('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n   try {\r\n     const query = `\r\n       SELECT id, name, email, region, phone, available_days, available_from, available_to, about, rate, created_at\r\n       FROM babysitters\r\n       WHERE id = $1\r\n     `;\r\n     const result = await db.query(query, [req.user.id]);\r\n-\r\n     if (result.rows.length === 0) {\r\n       return res.status(404).json({ error: 'Babysitter not found.' });\r\n     }\r\n-\r\n     res.status(200).json(result.rows[0]);\r\n   } catch (error) {\r\n     console.error('Error fetching babysitter profile:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n-// Route: Get babysitter profile by ID\r\n+\r\n+// Babysitter Profile Get by ID\r\n app.get(\"/api/babysitters/:id\", async (req, res) => {\r\n   const { id } = req.params;\r\n-\r\n   try {\r\n-\r\n-    // Query to select all relevant fields except password\r\n     const query = `\r\n       SELECT \r\n         id,\r\n         name,\r\n@@ -428,75 +535,20 @@\n         profile_photo\r\n       FROM babysitters\r\n       WHERE id = $1\r\n     `;\r\n-\r\n     const result = await db.query(query, [id]);\r\n-\r\n     if (result.rows.length === 0) {\r\n       return res.status(404).json({ error: \"Babysitter not found.\" });\r\n     }\r\n-\r\n     res.json(result.rows[0]);\r\n   } catch (error) {\r\n     console.error(\"Error fetching babysitter profile:\", error);\r\n     res.status(500).json({ error: \"Internal server error.\" });\r\n   }\r\n });\r\n-// Babysitter approves or cancels a booking\r\n-app.put(\"/api/babysitters/bookings/:bookingId/status\", async (req, res) => {\r\n-  const { bookingId } = req.params;\r\n-  const { status } = req.body;\r\n \r\n-  if (![\"approved\", \"cancelled\"].includes(status)) {\r\n-    return res.status(400).json({ message: \"Invalid status\" });\r\n-  }\r\n-\r\n-  try {\r\n-    // Update the status\r\n-    await db.query(\r\n-      \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n-      [status, bookingId]\r\n-    );\r\n-\r\n-    res.json({ message: \"Booking status updated successfully\" });\r\n-  } catch (err) {\r\n-    console.error(\"Error updating booking status:\", err);\r\n-    res.status(500).json({ message: \"Internal server error\" });\r\n-  }\r\n-});\r\n-\r\n-// Get bookings for a babysitter including client details\r\n-app.get(\"/api/babysitters/:id/bookings\", async (req, res) => {\r\n-  const babysitterId = req.params.id;\r\n-\r\n-  try {\r\n-    const result = await db.query(\r\n-      `\r\n-      SELECT\r\n-        bookings.*,\r\n-        users.name AS parent_name,\r\n-        users.address AS client_address,\r\n-        users.phone AS client_phone,\r\n-        users.region AS client_region,\r\n-        users.children_count AS client_children\r\n-      FROM bookings\r\n-      JOIN users\r\n-        ON bookings.user_id = users.id\r\n-      WHERE bookings.babysitter_id = $1\r\n-      ORDER BY bookings.date DESC\r\n-      `,\r\n-      [babysitterId]\r\n-    );\r\n-\r\n-    res.json(result.rows);\r\n-  } catch (err) {\r\n-    console.error(\"Error fetching babysitter bookings:\", err);\r\n-    res.status(500).json({ message: \"Internal server error\" });\r\n-  }\r\n-});\r\n-\r\n-// Route: Update babysitter profile (protected)\r\n+// Babysitter Profile Update\r\n app.put('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n   const {\r\n     name,\r\n     email,\r\n@@ -507,17 +559,14 @@\n     available_to,\r\n     about,\r\n     rate\r\n   } = req.body;\r\n-\r\n   try {\r\n     const queryBabysitter = `SELECT * FROM babysitters WHERE id = $1`;\r\n     const resultBabysitter = await db.query(queryBabysitter, [req.user.id]);\r\n-\r\n     if (resultBabysitter.rows.length === 0) {\r\n       return res.status(404).json({ error: 'Babysitter not found.' });\r\n     }\r\n-\r\n     const updates = {\r\n       name: name || resultBabysitter.rows[0].name,\r\n       email: email || resultBabysitter.rows[0].email,\r\n       phone: phone || resultBabysitter.rows[0].phone,\r\n@@ -527,9 +576,8 @@\n       available_to: available_to || resultBabysitter.rows[0].available_to,\r\n       about: about || resultBabysitter.rows[0].about,\r\n       rate: rate || resultBabysitter.rows[0].rate\r\n     };\r\n-\r\n     const queryUpdate = `\r\n       UPDATE babysitters\r\n       SET name = $1,\r\n           email = $2,\r\n@@ -542,9 +590,8 @@\n           rate = $9\r\n       WHERE id = $10\r\n       RETURNING id, name, email, region, phone, available_days, available_from, available_to, about, rate, created_at;\r\n     `;\r\n-\r\n     const values = [\r\n       updates.name,\r\n       updates.email,\r\n       updates.phone,\r\n@@ -555,11 +602,9 @@\n       updates.about,\r\n       updates.rate,\r\n       req.user.id\r\n     ];\r\n-\r\n     const result = await db.query(queryUpdate, values);\r\n-\r\n     res.status(200).json({\r\n       message: 'Babysitter profile updated successfully.',\r\n       babysitter: result.rows[0]\r\n     });\r\n@@ -568,41 +613,35 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Delete babysitter account (protected, must have no bookings)\r\n+// Babysitter Delete Account\r\n app.delete('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n   try {\r\n-    // Check if babysitter has related bookings\r\n     const bookingCheck = await db.query(\r\n       `SELECT id FROM bookings WHERE babysitter_id = $1`,\r\n       [req.user.id]\r\n     );\r\n-\r\n     if (bookingCheck.rows.length > 0) {\r\n       return res.status(400).json({\r\n         error: 'You must cancel all bookings before deleting your account.'\r\n       });\r\n     }\r\n-\r\n-    // Delete babysitter\r\n     const result = await db.query(\r\n       `DELETE FROM babysitters WHERE id = $1 RETURNING id`,\r\n       [req.user.id]\r\n     );\r\n-\r\n     if (result.rows.length === 0) {\r\n       return res.status(404).json({ error: 'Babysitter not found.' });\r\n     }\r\n-\r\n     res.status(200).json({ message: 'Babysitter account deleted successfully.' });\r\n   } catch (error) {\r\n     console.error('Error deleting babysitter account:', error.message);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Get all babysitters\r\n+// Babysitter List All\r\n app.get('/api/babysitters', async (req, res) => {\r\n   try {\r\n     const query = `\r\n       SELECT\r\n@@ -628,266 +667,141 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-/* -----------------------------------\r\n-   Users Routes\r\n------------------------------------ */\r\n-\r\n-// Route: Register a new user\r\n-app.post('/api/users/register', async (req, res) => {\r\n-  const { name, email, password } = req.body;\r\n-\r\n+// Babysitter Bookings List\r\n+app.get(\"/api/babysitters/:id/bookings\", async (req, res) => {\r\n+  const babysitterId = req.params.id;\r\n   try {\r\n-    if (!name || !email || !password) {\r\n-      return res.status(400).json({ error: 'Name, email, and password are required.' });\r\n-    }\r\n-\r\n-    const hashedPassword = await bcrypt.hash(password, 10);\r\n-\r\n-    const query = `\r\n-      INSERT INTO users (name, email, password)\r\n-      VALUES ($1, $2, $3)\r\n-      RETURNING id, name, email, created_at;\r\n-    `;\r\n-\r\n-    const values = [name, email, hashedPassword];\r\n-    const result = await db.query(query, values);\r\n-    const token = jwt.sign(\r\n-      { id: result.rows[0].id, email: result.rows[0].email, role: 'user' },\r\n-      process.env.JWT_SECRET,\r\n-      { expiresIn: '3h' }\r\n+    const result = await db.query(\r\n+      `\r\n+      SELECT\r\n+        bookings.*,\r\n+        users.name AS parent_name,\r\n+        users.address AS client_address,\r\n+        users.phone AS client_phone,\r\n+        users.region AS client_region,\r\n+        users.children_count AS client_children\r\n+      FROM bookings\r\n+      JOIN users\r\n+        ON bookings.user_id = users.id\r\n+      WHERE bookings.babysitter_id = $1\r\n+      ORDER BY bookings.date DESC\r\n+      `,\r\n+      [babysitterId]\r\n     );\r\n-    \r\n-    res.status(201).json({\r\n-      message: 'User registered successfully.',\r\n-      token,\r\n-      role: 'user',\r\n-      user: {\r\n-        id: result.rows[0].id,\r\n-        name: result.rows[0].name,\r\n-        email: result.rows[0].email,\r\n-        created_at: result.rows[0].created_at\r\n-      }\r\n-    });\r\n+    res.json(result.rows);\r\n+  } catch (err) {\r\n+    console.error(\"Error fetching babysitter bookings:\", err);\r\n+    res.status(500).json({ message: \"Internal server error\" });\r\n+  }\r\n+});\r\n \r\n-  } catch (error) {\r\n-    console.error('Error registering user:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n+// Babysitter Update Booking Status\r\n+app.put(\"/api/babysitters/bookings/:bookingId/status\", async (req, res) => {\r\n+  const { bookingId } = req.params;\r\n+  const { status } = req.body;\r\n+  if (![\"approved\", \"cancelled\"].includes(status)) {\r\n+    return res.status(400).json({ message: \"Invalid status\" });\r\n   }\r\n+  try {\r\n+    await db.query(\r\n+      \"UPDATE bookings SET status = $1 WHERE id = $2\",\r\n+      [status, bookingId]\r\n+    );\r\n+    res.json({ message: \"Booking status updated successfully\" });\r\n+  } catch (err) {\r\n+    console.error(\"Error updating booking status:\", err);\r\n+    res.status(500).json({ message: \"Internal server error\" });\r\n+  }\r\n });\r\n \r\n-// Route: User login with JWT\r\n-app.post('/api/users/login', async (req, res) => {\r\n-  const { email, password } = req.body;\r\n+/* -----------------------------------\r\n+   Password Management Routes\r\n+----------------------------------- */\r\n \r\n+// Babysitter Change Password\r\n+app.put('/api/babysitters/change-password', authMiddleware, async (req, res) => {\r\n+  const { currentPassword, newPassword } = req.body;\r\n   try {\r\n-    if (!email || !password) {\r\n-      return res.status(400).json({ error: 'Email and password are required.' });\r\n+    if (!currentPassword || !newPassword) {\r\n+      return res.status(400).json({ error: 'Current and new password are required.' });\r\n     }\r\n-\r\n-    const query = `SELECT * FROM users WHERE email = $1`;\r\n-    const result = await db.query(query, [email]);\r\n-\r\n+    const query = `SELECT * FROM babysitters WHERE id = $1`;\r\n+    const result = await db.query(query, [req.user.id]);\r\n     if (result.rows.length === 0) {\r\n-      return res.status(401).json({ error: 'Invalid email or password.' });\r\n+      return res.status(404).json({ error: 'Babysitter not found.' });\r\n     }\r\n-\r\n-    const user = result.rows[0];\r\n-    const isMatch = await bcrypt.compare(password, user.password);\r\n-\r\n+    const babysitter = result.rows[0];\r\n+    const isMatch = await bcrypt.compare(currentPassword, babysitter.password);\r\n     if (!isMatch) {\r\n-      return res.status(401).json({ error: 'Invalid email or password.' });\r\n+      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n     }\r\n-\r\n-    const token = jwt.sign(\r\n-      { id: user.id, email: user.email },\r\n-      process.env.JWT_SECRET,\r\n-      { expiresIn: '3h' }\r\n+    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n+    await db.query(\r\n+      `UPDATE babysitters SET password = $1 WHERE id = $2`,\r\n+      [hashedPassword, req.user.id]\r\n     );\r\n-\r\n-    res.status(200).json({\r\n-      message: 'Login successful',\r\n-      token,\r\n-      role: 'user',\r\n-      user: {\r\n-        id: user.id,\r\n-        name: user.name,\r\n-        email: user.email,\r\n-        created_at: user.created_at\r\n-      }\r\n-    });\r\n+    res.status(200).json({ message: 'Password updated successfully.' });\r\n   } catch (error) {\r\n-    console.error('User login error:', error);\r\n+    console.error('Error changing password:', error.message);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Get logged-in user profile (protected)\r\n-app.get('/api/users/profile', authMiddleware, async (req, res) => {\r\n+// User Change Password\r\n+app.put('/api/users/change-password', authMiddleware, async (req, res) => {\r\n+  const { currentPassword, newPassword } = req.body;\r\n   try {\r\n-    const query = `SELECT id, name, email, phone, region, address, children_count, created_at FROM users WHERE id = $1`;\r\n-    const result = await db.query(query, [req.user.id]);\r\n-\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'User not found.' });\r\n+    if (!currentPassword || !newPassword) {\r\n+      return res.status(400).json({ error: 'Both current and new passwords are required.' });\r\n     }\r\n-\r\n-    res.status(200).json(result.rows[0]);\r\n-  } catch (error) {\r\n-    console.error('Profile fetch error:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Update user profile (protected)\r\n-app.put('/api/users/profile', authMiddleware, async (req, res) => {\r\n-  const {\r\n-    name,\r\n-    email,\r\n-    password,\r\n-    phone,\r\n-    region,\r\n-    children_count,\r\n-    address\r\n-  } = req.body;\r\n-\r\n-  try {\r\n     const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n     const resultUser = await db.query(queryUser, [req.user.id]);\r\n-\r\n     if (resultUser.rows.length === 0) {\r\n       return res.status(404).json({ error: 'User not found.' });\r\n     }\r\n-\r\n-    const existingUser = resultUser.rows[0];\r\n-\r\n-    // Safe updates: use old values if not provided\r\n-    const updates = {\r\n-      name: name || existingUser.name,\r\n-      email: email || existingUser.email,\r\n-      phone: phone || existingUser.phone,\r\n-      region: region || existingUser.region,\r\n-      address: address || existingUser.address,\r\n-      children_count:\r\n-        children_count === \"\" || children_count === undefined\r\n-          ? existingUser.children_count\r\n-          : parseInt(children_count, 10)\r\n-    };\r\n-\r\n-    let hashedPassword = existingUser.password;\r\n-    if (password) {\r\n-      hashedPassword = await bcrypt.hash(password, 10);\r\n+    const user = resultUser.rows[0];\r\n+    const isMatch = await bcrypt.compare(currentPassword, user.password);\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n     }\r\n-\r\n-    const queryUpdate = `\r\n-      UPDATE users\r\n-      SET\r\n-        name = $1,\r\n-        email = $2,\r\n-        password = $3,\r\n-        phone = $4,\r\n-        region = $5,\r\n-        children_count = $6,\r\n-        address = $7\r\n-      WHERE id = $8\r\n-      RETURNING id, name, email, phone, region, children_count, address, created_at;\r\n-    `;\r\n-\r\n-    const values = [\r\n-      updates.name,\r\n-      updates.email,\r\n-      hashedPassword,\r\n-      updates.phone,\r\n-      updates.region,\r\n-      updates.children_count,\r\n-      updates.address,\r\n-      req.user.id\r\n-    ];\r\n-\r\n-    const result = await db.query(queryUpdate, values);\r\n-\r\n-    res.status(200).json({\r\n-      message: 'Profile updated successfully.',\r\n-      user: result.rows[0]\r\n-    });\r\n-  } catch (error) {\r\n-    console.error('Error updating profile:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Delete user account (protected, must have no bookings)\r\n-app.delete('/api/users/profile', authMiddleware, async (req, res) => {\r\n-  try {\r\n-    // Check if user has related bookings\r\n-    const bookingCheck = await db.query(\r\n-      `SELECT id FROM bookings WHERE user_id = $1`,\r\n-      [req.user.id]\r\n+    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n+    await db.query(\r\n+      `UPDATE users SET password = $1 WHERE id = $2`,\r\n+      [hashedPassword, req.user.id]\r\n     );\r\n-\r\n-    if (bookingCheck.rows.length > 0) {\r\n-      return res.status(400).json({\r\n-        error: 'You must cancel all bookings before deleting your account.'\r\n-      });\r\n-    }\r\n-\r\n-    // Delete user\r\n-    const result = await db.query(\r\n-      `DELETE FROM users WHERE id = $1 RETURNING id`,\r\n-      [req.user.id]\r\n-    );\r\n-\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'User not found.' });\r\n-    }\r\n-\r\n-    res.status(200).json({ message: 'User account deleted successfully.' });\r\n+    res.status(200).json({ message: 'Password updated successfully.' });\r\n   } catch (error) {\r\n-    console.error('Error deleting user account:', error.message);\r\n+    console.error('Error changing password:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Get all users (protected)\r\n-app.get('/api/users', authMiddleware, async (req, res) => {\r\n-  try {\r\n-    const query = `SELECT id, name, email, created_at FROM users ORDER BY id ASC`;\r\n-    const result = await db.query(query);\r\n+/* -----------------------------------\r\n+   Universal Login\r\n+----------------------------------- */\r\n \r\n-    res.status(200).json(result.rows);\r\n-  } catch (error) {\r\n-    console.error('Error fetching users:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Universal login (users or babysitters)\r\n+// Universal Login (User or Babysitter)\r\n app.post('/api/login', async (req, res) => {\r\n   const { email, password } = req.body;\r\n-\r\n   try {\r\n     if (!email || !password) {\r\n       return res.status(400).json({ error: 'Email and password are required.' });\r\n     }\r\n-\r\n-    // First try to find in users\r\n     const userQuery = `SELECT * FROM users WHERE email = $1`;\r\n     const userResult = await db.query(userQuery, [email]);\r\n-\r\n     if (userResult.rows.length > 0) {\r\n       const user = userResult.rows[0];\r\n       const isMatch = await bcrypt.compare(password, user.password);\r\n       if (!isMatch) {\r\n         return res.status(401).json({ error: 'Invalid email or password.' });\r\n       }\r\n-\r\n       const token = jwt.sign(\r\n         { id: user.id, email: user.email, role: 'user' },\r\n         process.env.JWT_SECRET,\r\n         { expiresIn: '3h' }\r\n       );\r\n-\r\n       return res.status(200).json({\r\n         message: 'Login successful',\r\n         token,\r\n         role: 'user',\r\n@@ -898,26 +812,21 @@\n           created_at: user.created_at\r\n         }\r\n       });\r\n     }\r\n-\r\n-    // If not found, try babysitters\r\n     const babysitterQuery = `SELECT * FROM babysitters WHERE email = $1`;\r\n     const babysitterResult = await db.query(babysitterQuery, [email]);\r\n-\r\n     if (babysitterResult.rows.length > 0) {\r\n       const babysitter = babysitterResult.rows[0];\r\n       const isMatch = await bcrypt.compare(password, babysitter.password);\r\n       if (!isMatch) {\r\n         return res.status(401).json({ error: 'Invalid email or password.' });\r\n       }\r\n-\r\n       const token = jwt.sign(\r\n         { id: babysitter.id, email: babysitter.email, role: 'babysitter' },\r\n         process.env.JWT_SECRET,\r\n         { expiresIn: '3h' }\r\n       );\r\n-\r\n       return res.status(200).json({\r\n         message: 'Login successful',\r\n         token,\r\n         role: 'babysitter',\r\n@@ -928,201 +837,29 @@\n           region: babysitter.region\r\n         }\r\n       });\r\n     }\r\n-\r\n-    // Not found in either table\r\n     return res.status(401).json({ error: 'Invalid email or password.' });\r\n-\r\n   } catch (error) {\r\n     console.error('Universal login error:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n-\r\n-// Route: Change babysitter password (protected)\r\n-app.put('/api/babysitters/change-password', authMiddleware, async (req, res) => {\r\n-  const { currentPassword, newPassword } = req.body;\r\n-\r\n-  try {\r\n-    if (!currentPassword || !newPassword) {\r\n-      return res.status(400).json({ error: 'Current and new password are required.' });\r\n-    }\r\n-\r\n-    // Fetch babysitter from DB\r\n-    const query = `SELECT * FROM babysitters WHERE id = $1`;\r\n-    const result = await db.query(query, [req.user.id]);\r\n-\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'Babysitter not found.' });\r\n-    }\r\n-\r\n-    const babysitter = result.rows[0];\r\n-\r\n-    // Check if current password is correct\r\n-    const isMatch = await bcrypt.compare(currentPassword, babysitter.password);\r\n-    if (!isMatch) {\r\n-      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n-    }\r\n-\r\n-    // Hash new password\r\n-    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n-\r\n-    // Update password in DB\r\n-    const updateQuery = `\r\n-      UPDATE babysitters\r\n-      SET password = $1\r\n-      WHERE id = $2\r\n-    `;\r\n-    await db.query(updateQuery, [hashedPassword, req.user.id]);\r\n-\r\n-    res.status(200).json({ message: 'Password updated successfully.' });\r\n-  } catch (error) {\r\n-    console.error('Error changing password:', error.message);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Change user password (protected)\r\n-app.put('/api/users/change-password', authMiddleware, async (req, res) => {\r\n-  const { currentPassword, newPassword } = req.body;\r\n-\r\n-  try {\r\n-    if (!currentPassword || !newPassword) {\r\n-      return res.status(400).json({ error: 'Both current and new passwords are required.' });\r\n-    }\r\n-\r\n-    // Get the user\r\n-    const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n-    const resultUser = await db.query(queryUser, [req.user.id]);\r\n-\r\n-    if (resultUser.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'User not found.' });\r\n-    }\r\n-\r\n-    const user = resultUser.rows[0];\r\n-\r\n-    // Compare current password\r\n-    const isMatch = await bcrypt.compare(currentPassword, user.password);\r\n-    if (!isMatch) {\r\n-      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n-    }\r\n-\r\n-    // Hash new password\r\n-    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n-\r\n-    // Update password\r\n-    const queryUpdate = `\r\n-      UPDATE users\r\n-      SET password = $1\r\n-      WHERE id = $2\r\n-    `;\r\n-    await db.query(queryUpdate, [hashedPassword, req.user.id]);\r\n-\r\n-    res.status(200).json({ message: 'Password updated successfully.' });\r\n-  } catch (error) {\r\n-    console.error('Error changing password:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Update user password (protected)\r\n-app.put('/api/users/profile/password', authMiddleware, async (req, res) => {\r\n-  const { currentPassword, newPassword } = req.body;\r\n-\r\n-  try {\r\n-    if (!currentPassword || !newPassword) {\r\n-      return res.status(400).json({ error: 'Current and new password are required.' });\r\n-    }\r\n-\r\n-    // Fetch user\r\n-    const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n-    const resultUser = await db.query(queryUser, [req.user.id]);\r\n-\r\n-    if (resultUser.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'User not found.' });\r\n-    }\r\n-\r\n-    const user = resultUser.rows[0];\r\n-\r\n-    // Verify current password\r\n-    const isMatch = await bcrypt.compare(currentPassword, user.password);\r\n-    if (!isMatch) {\r\n-      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n-    }\r\n-\r\n-    // Hash new password\r\n-    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n-\r\n-    // Update password\r\n-    const queryUpdate = `\r\n-      UPDATE users\r\n-      SET password = $1\r\n-      WHERE id = $2\r\n-      RETURNING id;\r\n-    `;\r\n-    await db.query(queryUpdate, [hashedPassword, req.user.id]);\r\n-\r\n-    res.status(200).json({ message: 'Password updated successfully.' });\r\n-  } catch (error) {\r\n-    console.error('Error updating password:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Update booking status (protected)\r\n-app.put('/api/bookings/:id/status', authMiddleware, async (req, res) => {\r\n-  const { id } = req.params;\r\n-  const { status } = req.body;\r\n-\r\n-  try {\r\n-    // Valida status permitido\r\n-    const validStatuses = ['pending', 'confirmed', 'rejected', 'cancelled'];\r\n-    if (!validStatuses.includes(status)) {\r\n-      return res.status(400).json({ error: 'Invalid status value.' });\r\n-    }\r\n-\r\n-    // update database\r\n-    const query = `\r\n-      UPDATE bookings\r\n-      SET status = $1\r\n-      WHERE id = $2\r\n-      RETURNING *;\r\n-    `;\r\n-    const values = [status, id];\r\n-    const result = await db.query(query, values);\r\n-\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'Booking not found.' });\r\n-    }\r\n-\r\n-    res.status(200).json({\r\n-      message: 'Booking status updated successfully.',\r\n-      booking: result.rows[0],\r\n-    });\r\n-  } catch (error) {\r\n-    console.error('Error updating booking status:', error);\r\n-    res.status(500).json({ error: 'Internal server error.' });\r\n-  }\r\n-});\r\n-\r\n /* -----------------------------------\r\n    Bookings Routes\r\n ----------------------------------- */\r\n \r\n-// Route: Create a new booking\r\n+// Create Booking\r\n app.post('/api/bookings', async (req, res) => {\r\n   const { user_id, babysitter_id, date, time_start, time_end } = req.body;\r\n-\r\n   try {\r\n     const query = `\r\n       INSERT INTO bookings (user_id, babysitter_id, date, time_start, time_end)\r\n       VALUES ($1, $2, $3, $4, $5)\r\n       RETURNING *;\r\n     `;\r\n     const values = [user_id, babysitter_id, date, time_start, time_end];\r\n     const result = await db.query(query, values);\r\n-\r\n     res.status(201).json({\r\n       message: 'Booking created successfully.',\r\n       booking: result.rows[0]\r\n     });\r\n@@ -1131,12 +868,11 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Get all bookings for a user\r\n+// Get Bookings for User\r\n app.get('/api/bookings/:user_id', async (req, res) => {\r\n   const { user_id } = req.params;\r\n-\r\n   try {\r\n     const query = `\r\n       SELECT \r\n         b.id, b.date, b.time_start, b.time_end, b.status,\r\n@@ -1146,19 +882,18 @@\n       WHERE b.user_id = $1\r\n       ORDER BY b.date ASC;\r\n     `;\r\n     const result = await db.query(query, [user_id]);\r\n-\r\n     res.status(200).json(result.rows);\r\n   } catch (error) {\r\n     console.error('Error fetching bookings:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n-// Route: Get all bookings for a babysitter\r\n+\r\n+// Get Bookings for Babysitter\r\n app.get('/api/babysitters/:id/bookings', async (req, res) => {\r\n   const babysitterId = req.params.id;\r\n-\r\n   try {\r\n     const query = `\r\n       SELECT \r\n         b.id,\r\n@@ -1171,18 +906,46 @@\n       JOIN users u ON b.user_id = u.id\r\n       WHERE b.babysitter_id = $1\r\n       ORDER BY b.date ASC, b.time_start ASC;\r\n     `;\r\n-\r\n     const result = await db.query(query, [babysitterId]);\r\n-\r\n     res.status(200).json(result.rows);\r\n   } catch (error) {\r\n     console.error('Error fetching babysitter bookings:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+// Update Booking Status (Generic)\r\n+app.put('/api/bookings/:id/status', authMiddleware, async (req, res) => {\r\n+  const { id } = req.params;\r\n+  const { status } = req.body;\r\n+  try {\r\n+    const validStatuses = ['pending', 'confirmed', 'rejected', 'cancelled'];\r\n+    if (!validStatuses.includes(status)) {\r\n+      return res.status(400).json({ error: 'Invalid status value.' });\r\n+    }\r\n+    const query = `\r\n+      UPDATE bookings\r\n+      SET status = $1\r\n+      WHERE id = $2\r\n+      RETURNING *;\r\n+    `;\r\n+    const values = [status, id];\r\n+    const result = await db.query(query, values);\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'Booking not found.' });\r\n+    }\r\n+    res.status(200).json({\r\n+      message: 'Booking status updated successfully.',\r\n+      booking: result.rows[0],\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error updating booking status:', error);\r\n+    res.status(500).json({ error: 'Internal server error.' });\r\n+  }\r\n+});\r\n+\r\n /* -----------------------------------\r\n    Root Endpoint\r\n ----------------------------------- */\r\n app.get('/', (req, res) => {\r\n"
                },
                {
                    "date": 1751603416828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -350,10 +350,12 @@\n       updates.address,\r\n       req.user.id\r\n     ];\r\n     const result = await db.query(queryUpdate, values);\r\n-    res.status(200).json(result.rows[0]);\r\n-\r\n+    res.status(200).json({\r\n+      message: 'Profile updated successfully.',\r\n+      user: result.rows[0]\r\n+    });\r\n   } catch (error) {\r\n     console.error('Error updating profile:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n"
                },
                {
                    "date": 1751603598851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,9 +318,11 @@\n       phone: phone || existingUser.phone,\r\n       region: region || existingUser.region,\r\n       address: address || existingUser.address,\r\n       children_count:\r\n-        children_count === \"\" || children_count === undefined\r\n+      children_count === \"\" || children_count === undefined\r\n+        ? existingUser.children_count\r\n+        : Number.isNaN(parseInt(children_count, 10))\r\n           ? existingUser.children_count\r\n           : parseInt(children_count, 10)\r\n     };\r\n     let hashedPassword = existingUser.password;\r\n"
                },
                {
                    "date": 1751604240768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -216,10 +216,10 @@\n       return res.status(400).json({ error: 'Name, email, and password are required.' });\r\n     }\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n     const query = `\r\n-      INSERT INTO users (name, email, password)\r\n-      VALUES ($1, $2, $3)\r\n+      INSERT INTO users (name, email, password, phone, region, address, children_count)\r\n+      VALUES ($1, $2, $3, 4, 5, 6, 7)\r\n       RETURNING id, name, email, created_at;\r\n     `;\r\n     const values = [name, email, hashedPassword];\r\n     const result = await db.query(query, values);\r\n"
                },
                {
                    "date": 1751604281012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,20 +209,28 @@\n ----------------------------------- */\r\n \r\n // Client Register\r\n app.post('/api/users/register', async (req, res) => {\r\n-  const { name, email, password } = req.body;\r\n+  const { name, email, password, phone, region, address, children_count } = req.body;\r\n   try {\r\n     if (!name || !email || !password) {\r\n       return res.status(400).json({ error: 'Name, email, and password are required.' });\r\n     }\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n     const query = `\r\n       INSERT INTO users (name, email, password, phone, region, address, children_count)\r\n-      VALUES ($1, $2, $3, 4, 5, 6, 7)\r\n-      RETURNING id, name, email, created_at;\r\n+      VALUES ($1, $2, $3, $4, $5, $6, $7)\r\n+      RETURNING id, name, email, phone, region, address, children_count, created_at;\r\n     `;\r\n-    const values = [name, email, hashedPassword];\r\n+    const values = [\r\n+      name,\r\n+      email,\r\n+      hashedPassword,\r\n+      phone || null,\r\n+      region || null,\r\n+      address || null,\r\n+      children_count === \"\" || children_count === undefined ? null : parseInt(children_count, 10)\r\n+    ];\r\n     const result = await db.query(query, values);\r\n     const token = jwt.sign(\r\n       { id: result.rows[0].id, email: result.rows[0].email, role: 'user' },\r\n       process.env.JWT_SECRET,\r\n@@ -235,16 +243,22 @@\n       user: {\r\n         id: result.rows[0].id,\r\n         name: result.rows[0].name,\r\n         email: result.rows[0].email,\r\n+        phone: result.rows[0].phone,\r\n+        region: result.rows[0].region,\r\n+        address: result.rows[0].address,\r\n+        children_count: result.rows[0].children_count,\r\n         created_at: result.rows[0].created_at\r\n       }\r\n     });\r\n   } catch (error) {\r\n     console.error('Error registering user:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n+\r\n+});\r\n // -----------------------------------\r\n // Clients Routes\r\n // -----------------------------------\r\n \r\n"
                },
                {
                    "date": 1751604427323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,8 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-});\r\n // -----------------------------------\r\n // Clients Routes\r\n // -----------------------------------\r\n \r\n"
                },
                {
                    "date": 1751604726823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,9 +217,9 @@\n     }\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n     const query = `\r\n       INSERT INTO users (name, email, password, phone, region, address, children_count)\r\n-      VALUES ($1, $2, $3, $4, $5, $6, $7)\r\n+      VALUES ($1, $2, $3, $4, $5, $6, $7, 8$)\r\n       RETURNING id, name, email, phone, region, address, children_count, created_at;\r\n     `;\r\n     const values = [\r\n       name,\r\n"
                },
                {
                    "date": 1751605357784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,9 +217,9 @@\n     }\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n     const query = `\r\n       INSERT INTO users (name, email, password, phone, region, address, children_count)\r\n-      VALUES ($1, $2, $3, $4, $5, $6, $7, 8$)\r\n+      VALUES ($1, $2, $3, $4, $5, $6, $7,)\r\n       RETURNING id, name, email, phone, region, address, children_count, created_at;\r\n     `;\r\n     const values = [\r\n       name,\r\n"
                },
                {
                    "date": 1751605462130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,9 +217,9 @@\n     }\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n     const query = `\r\n       INSERT INTO users (name, email, password, phone, region, address, children_count)\r\n-      VALUES ($1, $2, $3, $4, $5, $6, $7,)\r\n+      VALUES ($1, $2, $3, $4, $5, $6, $7)\r\n       RETURNING id, name, email, phone, region, address, children_count, created_at;\r\n     `;\r\n     const values = [\r\n       name,\r\n"
                },
                {
                    "date": 1751681657432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,9 +227,11 @@\n       hashedPassword,\r\n       phone || null,\r\n       region || null,\r\n       address || null,\r\n-      children_count === \"\" || children_count === undefined ? null : parseInt(children_count, 10)\r\n+      children_count === \"\" || children_count === undefined ? null : Number.isNaN(parseInt(children_count, 10))\r\n+        ? null\r\n+        : parseInt(children_count, 10)\r\n     ];\r\n     const result = await db.query(query, values);\r\n     const token = jwt.sign(\r\n       { id: result.rows[0].id, email: result.rows[0].email, role: 'user' },\r\n"
                },
                {
                    "date": 1751682392833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -209,8 +209,9 @@\n ----------------------------------- */\r\n \r\n // Client Register\r\n app.post('/api/users/register', async (req, res) => {\r\n+  console.log(\"BODY RECEBIDO NO REGISTRO:\", req.body);\r\n   const { name, email, password, phone, region, address, children_count } = req.body;\r\n   try {\r\n     if (!name || !email || !password) {\r\n       return res.status(400).json({ error: 'Name, email, and password are required.' });\r\n"
                },
                {
                    "date": 1751682634512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -210,9 +210,9 @@\n \r\n // Client Register\r\n app.post('/api/users/register', async (req, res) => {\r\n   console.log(\"BODY RECEBIDO NO REGISTRO:\", req.body);\r\n-  const { name, email, password, phone, region, address, children_count } = req.body;\r\n+  const { name, email, password, phone, region, address, children } = req.body;\r\n   try {\r\n     if (!name || !email || !password) {\r\n       return res.status(400).json({ error: 'Name, email, and password are required.' });\r\n     }\r\n@@ -228,9 +228,9 @@\n       hashedPassword,\r\n       phone || null,\r\n       region || null,\r\n       address || null,\r\n-      children_count === \"\" || children_count === undefined ? null : Number.isNaN(parseInt(children_count, 10))\r\n+      children === \"\" || children === undefined ? null : Number.isNaN(parseInt(children_count, 10))\r\n         ? null\r\n         : parseInt(children_count, 10)\r\n     ];\r\n     const result = await db.query(query, values);\r\n"
                },
                {
                    "date": 1751682758412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -228,11 +228,9 @@\n       hashedPassword,\r\n       phone || null,\r\n       region || null,\r\n       address || null,\r\n-      children === \"\" || children === undefined ? null : Number.isNaN(parseInt(children_count, 10))\r\n-        ? null\r\n-        : parseInt(children_count, 10)\r\n+      children === \"\" || children === undefined ? null : parseInt(children, 10)\r\n     ];\r\n     const result = await db.query(query, values);\r\n     const token = jwt.sign(\r\n       { id: result.rows[0].id, email: result.rows[0].email, role: 'user' },\r\n"
                }
            ],
            "date": 1751539489446,
            "name": "Commit-0",
            "content": "// Import dependencies\r\nconst express = require('express');\r\nconst app = express();\r\nrequire('dotenv').config(); // Load environment variables\r\nconst bcrypt = require('bcrypt'); // For hashing passwords\r\nconst jwt = require('jsonwebtoken'); // JSON Web Token for authentication\r\nconst { Client } = require('pg'); // PostgreSQL client\r\nconst authMiddleware = require('./middleware/authMiddleware'); // Custom authentication middleware\r\nconst cors = require('cors'); // For handling CORS\r\n\r\n// PostgreSQL client configuration\r\nconst db = new Client({\r\n  user: 'postgres',\r\n  host: 'localhost',\r\n  database: 'trustasitter',\r\n  password: 'Senha00!',\r\n  port: 5432,\r\n});\r\n\r\n// Connect to PostgreSQL\r\ndb.connect()\r\n  .then(() => console.log('Connected to PostgreSQL'))\r\n  .catch(err => console.error('Connection error', err.stack));\r\n\r\n// Middleware to parse JSON requests\r\napp.use(express.json());\r\napp.use(cors());\r\n\r\n/* -----------------------------------\r\n   Addmin Routes\r\n----------------------------------- */\r\n// Import dependencies\r\nconst express = require(\"express\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst { Pool } = require(\"pg\");\r\nconst app = express();\r\n\r\n// Enable JSON parsing\r\napp.use(express.json());\r\n\r\n// Database connection\r\nconst pool = new Pool({\r\n  connectionString: process.env.DATABASE_URL,\r\n});\r\n\r\n// JWT secret key\r\nconst JWT_SECRET = process.env.JWT_SECRET || \"your_secret_key_here\";\r\n\r\n/**\r\n * Admin Login Endpoint\r\n * POST /api/admin/login\r\n * Request Body: { email, password }\r\n * Response: { token, user }\r\n */\r\napp.post(\"/api/admin/login\", async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    // Check if the admin exists\r\n    const result = await pool.query(\"SELECT * FROM admins WHERE email = $1\", [email]);\r\n\r\n    if (result.rows.length === 0) {\r\n      return res.status(401).json({ message: \"Invalid credentials\" });\r\n    }\r\n\r\n    const admin = result.rows[0];\r\n\r\n    // Compare provided password with stored hash\r\n    const validPassword = await bcrypt.compare(password, admin.password);\r\n    if (!validPassword) {\r\n      return res.status(401).json({ message: \"Invalid credentials\" });\r\n    }\r\n\r\n    // Generate JWT token\r\n    const token = jwt.sign(\r\n      {\r\n        id: admin.id,\r\n        email: admin.email,\r\n        role: \"admin\",\r\n      },\r\n      JWT_SECRET,\r\n      { expiresIn: \"8h\" }\r\n    );\r\n\r\n    // Return token and admin data\r\n    res.json({\r\n      token,\r\n      user: {\r\n        id: admin.id,\r\n        name: admin.name,\r\n        email: admin.email,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    console.error(\"Admin login error:\", err);\r\n    res.status(500).json({ message: \"Internal server error\" });\r\n  }\r\n});\r\n\r\n/* -----------------------------------\r\n   Babysitters Routes\r\n----------------------------------- */\r\n\r\n// Route: Register a new babysitter\r\napp.post('/api/babysitters/register', async (req, res) => {\r\n  const {\r\n    name,\r\n    email,\r\n    password,\r\n    phone,\r\n    region,\r\n    available_days,\r\n    available_from,\r\n    available_to,\r\n    about,\r\n    rate\r\n  } = req.body;\r\n  // Ensure available_days is an array\r\n    let availableDaysArray = [];\r\n\r\n    if (Array.isArray(available_days)) {\r\n      availableDaysArray = available_days;\r\n    } else if (typeof available_days === \"string\") {\r\n      availableDaysArray = available_days.split(\",\").map(day => day.trim());\r\n  }\r\n\r\n\r\n  try {\r\n    if (!name || !email || !password || !region || !available_days || !available_from || !available_to || !rate) {\r\n      return res.status(400).json({ error: 'All required fields must be filled.' });\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    const query = `\r\n      INSERT INTO babysitters\r\n      (name, email, password, phone, region, available_days, available_from, available_to, about, rate)\r\n      VALUES\r\n      ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\r\n      RETURNING id, name, email, region, created_at;\r\n    `;\r\n\r\n    const values = [\r\n      name,\r\n      email,\r\n      hashedPassword,\r\n      phone,\r\n      region,\r\n      availableDaysArray,\r\n      available_from,\r\n      available_to,\r\n      about,\r\n      rate\r\n    ];\r\n\r\n    const result = await db.query(query, values);\r\n\r\n    res.status(201).json({\r\n      message: 'Babysitter registered successfully.',\r\n      babysitter: result.rows[0]\r\n    });\r\n  } catch (error) {\r\n    console.error('Error registering babysitter:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Route: Babysitter login with JWT\r\napp.post('/api/babysitters/login', async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    if (!email || !password) {\r\n      return res.status(400).json({ error: 'Email and password are required.' });\r\n    }\r\n\r\n    const query = `SELECT * FROM babysitters WHERE email = $1`;\r\n    const result = await db.query(query, [email]);\r\n\r\n    if (result.rows.length === 0) {\r\n      return res.status(401).json({ error: 'Invalid email or password.' });\r\n    }\r\n\r\n    const babysitter = result.rows[0];\r\n    const isMatch = await bcrypt.compare(password, babysitter.password);\r\n\r\n    if (!isMatch) {\r\n      return res.status(401).json({ error: 'Invalid email or password.' });\r\n    }\r\n\r\n    const token = jwt.sign(\r\n      { id: babysitter.id, email: babysitter.email },\r\n      process.env.JWT_SECRET,\r\n      { expiresIn: '3h' }\r\n    );\r\n\r\n    res.status(200).json({\r\n      message: 'Login successful',\r\n      token,\r\n      role: 'babysitter',\r\n      user: {\r\n        id: babysitter.id,\r\n        name: babysitter.name,\r\n        email: babysitter.email,\r\n        region: babysitter.region\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Babysitter login error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Route: Get babysitter profile (protected)\r\napp.get('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n  try {\r\n    const query = `\r\n      SELECT id, name, email, region, phone, available_days, available_from, available_to, about, rate, created_at\r\n      FROM babysitters\r\n      WHERE id = $1\r\n    `;\r\n    const result = await db.query(query, [req.user.id]);\r\n\r\n    if (result.rows.length === 0) {\r\n      return res.status(404).json({ error: 'Babysitter not found.' });\r\n    }\r\n\r\n    res.status(200).json(result.rows[0]);\r\n  } catch (error) {\r\n    console.error('Error fetching babysitter profile:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n// Route: Get babysitter profile by ID\r\napp.get(\"/api/babysitters/:id\", async (req, res) => {\r\n  const { id } = req.params;\r\n\r\n  try {\r\n\r\n    // Query to select all relevant fields except password\r\n    const query = `\r\n      SELECT \r\n        id,\r\n        name,\r\n        email,\r\n        region,\r\n        background_check_uploaded,\r\n        created_at,\r\n        available_days,\r\n        available_from,\r\n        available_to,\r\n        phone,\r\n        rate,\r\n        about,\r\n        profile_photo\r\n      FROM babysitters\r\n      WHERE id = $1\r\n    `;\r\n\r\n    const result = await db.query(query, [id]);\r\n\r\n    if (result.rows.length === 0) {\r\n      return res.status(404).json({ error: \"Babysitter not found.\" });\r\n    }\r\n\r\n    res.json(result.rows[0]);\r\n  } catch (error) {\r\n    console.error(\"Error fetching babysitter profile:\", error);\r\n    res.status(500).json({ error: \"Internal server error.\" });\r\n  }\r\n});\r\n\r\n// Route: Update babysitter profile (protected)\r\napp.put('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n  const {\r\n    name,\r\n    email,\r\n    phone,\r\n    region,\r\n    available_days,\r\n    available_from,\r\n    available_to,\r\n    about,\r\n    rate\r\n  } = req.body;\r\n\r\n  try {\r\n    const queryBabysitter = `SELECT * FROM babysitters WHERE id = $1`;\r\n    const resultBabysitter = await db.query(queryBabysitter, [req.user.id]);\r\n\r\n    if (resultBabysitter.rows.length === 0) {\r\n      return res.status(404).json({ error: 'Babysitter not found.' });\r\n    }\r\n\r\n    const updates = {\r\n      name: name || resultBabysitter.rows[0].name,\r\n      email: email || resultBabysitter.rows[0].email,\r\n      phone: phone || resultBabysitter.rows[0].phone,\r\n      region: region || resultBabysitter.rows[0].region,\r\n      available_days: available_days || resultBabysitter.rows[0].available_days,\r\n      available_from: available_from || resultBabysitter.rows[0].available_from,\r\n      available_to: available_to || resultBabysitter.rows[0].available_to,\r\n      about: about || resultBabysitter.rows[0].about,\r\n      rate: rate || resultBabysitter.rows[0].rate\r\n    };\r\n\r\n    const queryUpdate = `\r\n      UPDATE babysitters\r\n      SET name = $1,\r\n          email = $2,\r\n          phone = $3,\r\n          region = $4,\r\n          available_days = $5,\r\n          available_from = $6,\r\n          available_to = $7,\r\n          about = $8,\r\n          rate = $9\r\n      WHERE id = $10\r\n      RETURNING id, name, email, region, phone, available_days, available_from, available_to, about, rate, created_at;\r\n    `;\r\n\r\n    const values = [\r\n      updates.name,\r\n      updates.email,\r\n      updates.phone,\r\n      updates.region,\r\n      updates.available_days,\r\n      updates.available_from,\r\n      updates.available_to,\r\n      updates.about,\r\n      updates.rate,\r\n      req.user.id\r\n    ];\r\n\r\n    const result = await db.query(queryUpdate, values);\r\n\r\n    res.status(200).json({\r\n      message: 'Babysitter profile updated successfully.',\r\n      babysitter: result.rows[0]\r\n    });\r\n  } catch (error) {\r\n    console.error('Error updating babysitter profile:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Route: Delete babysitter account (protected, must have no bookings)\r\napp.delete('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n  try {\r\n    // Check if babysitter has related bookings\r\n    const bookingCheck = await db.query(\r\n      `SELECT id FROM bookings WHERE babysitter_id = $1`,\r\n      [req.user.id]\r\n    );\r\n\r\n    if (bookingCheck.rows.length > 0) {\r\n      return res.status(400).json({\r\n        error: 'You must cancel all bookings before deleting your account.'\r\n      });\r\n    }\r\n\r\n    // Delete babysitter\r\n    const result = await db.query(\r\n      `DELETE FROM babysitters WHERE id = $1 RETURNING id`,\r\n      [req.user.id]\r\n    );\r\n\r\n    if (result.rows.length === 0) {\r\n      return res.status(404).json({ error: 'Babysitter not found.' });\r\n    }\r\n\r\n    res.status(200).json({ message: 'Babysitter account deleted successfully.' });\r\n  } catch (error) {\r\n    console.error('Error deleting babysitter account:', error.message);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Route: Get all babysitters\r\napp.get('/api/babysitters', async (req, res) => {\r\n  try {\r\n    const query = `\r\n      SELECT\r\n        id,\r\n        name,\r\n        email,\r\n        phone,\r\n        region,\r\n        rate,\r\n        about,\r\n        available_days,\r\n        available_from,\r\n        available_to,\r\n        profile_photo,\r\n        created_at\r\n      FROM babysitters\r\n      ORDER BY created_at DESC;\r\n    `;\r\n    const result = await db.query(query);\r\n    res.status(200).json(result.rows);\r\n  } catch (error) {\r\n    console.error('Error fetching babysitters:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n/* -----------------------------------\r\n   Users Routes\r\n----------------------------------- */\r\n\r\n// Route: Register a new user\r\napp.post('/api/users/register', async (req, res) => {\r\n  const { name, email, password } = req.body;\r\n\r\n  try {\r\n    if (!name || !email || !password) {\r\n      return res.status(400).json({ error: 'Name, email, and password are required.' });\r\n    }\r\n\r\n    const hashedPassword = await bcrypt.hash(password, 10);\r\n\r\n    const query = `\r\n      INSERT INTO users (name, email, password)\r\n      VALUES ($1, $2, $3)\r\n      RETURNING id, name, email, created_at;\r\n    `;\r\n\r\n    const values = [name, email, hashedPassword];\r\n    const result = await db.query(query, values);\r\n    const token = jwt.sign(\r\n      { id: result.rows[0].id, email: result.rows[0].email, role: 'user' },\r\n      process.env.JWT_SECRET,\r\n      { expiresIn: '3h' }\r\n    );\r\n    \r\n    res.status(201).json({\r\n      message: 'User registered successfully.',\r\n      token,\r\n      role: 'user',\r\n      user: {\r\n        id: result.rows[0].id,\r\n        name: result.rows[0].name,\r\n        email: result.rows[0].email,\r\n        created_at: result.rows[0].created_at\r\n      }\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error registering user:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Route: User login with JWT\r\napp.post('/api/users/login', async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    if (!email || !password) {\r\n      return res.status(400).json({ error: 'Email and password are required.' });\r\n    }\r\n\r\n    const query = `SELECT * FROM users WHERE email = $1`;\r\n    const result = await db.query(query, [email]);\r\n\r\n    if (result.rows.length === 0) {\r\n      return res.status(401).json({ error: 'Invalid email or password.' });\r\n    }\r\n\r\n    const user = result.rows[0];\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n\r\n    if (!isMatch) {\r\n      return res.status(401).json({ error: 'Invalid email or password.' });\r\n    }\r\n\r\n    const token = jwt.sign(\r\n      { id: user.id, email: user.email },\r\n      process.env.JWT_SECRET,\r\n      { expiresIn: '3h' }\r\n    );\r\n\r\n    res.status(200).json({\r\n      message: 'Login successful',\r\n      token,\r\n      role: 'user',\r\n      user: {\r\n        id: user.id,\r\n        name: user.name,\r\n        email: user.email,\r\n        created_at: user.created_at\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('User login error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Route: Get logged-in user profile (protected)\r\napp.get('/api/users/profile', authMiddleware, async (req, res) => {\r\n  try {\r\n    const query = `SELECT id, name, email, created_at FROM users WHERE id = $1`;\r\n    const result = await db.query(query, [req.user.id]);\r\n\r\n    if (result.rows.length === 0) {\r\n      return res.status(404).json({ error: 'User not found.' });\r\n    }\r\n\r\n    res.status(200).json(result.rows[0]);\r\n  } catch (error) {\r\n    console.error('Profile fetch error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Route: Update user profile (protected)\r\napp.put('/api/users/profile', authMiddleware, async (req, res) => {\r\n  const { name, email, password } = req.body;\r\n\r\n  try {\r\n    const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n    const resultUser = await db.query(queryUser, [req.user.id]);\r\n\r\n    if (resultUser.rows.length === 0) {\r\n      return res.status(404).json({ error: 'User not found.' });\r\n    }\r\n\r\n    const updates = {\r\n      name: name || resultUser.rows[0].name,\r\n      email: email || resultUser.rows[0].email\r\n    };\r\n\r\n    let hashedPassword = resultUser.rows[0].password;\r\n    if (password) {\r\n      hashedPassword = await bcrypt.hash(password, 10);\r\n    }\r\n\r\n    const queryUpdate = `\r\n      UPDATE users\r\n      SET name = $1, email = $2, password = $3\r\n      WHERE id = $4\r\n      RETURNING id, name, email, created_at;\r\n    `;\r\n\r\n    const values = [updates.name, updates.email, hashedPassword, req.user.id];\r\n    const result = await db.query(queryUpdate, values);\r\n\r\n    res.status(200).json({\r\n      message: 'Profile updated successfully.',\r\n      user: result.rows[0]\r\n    });\r\n  } catch (error) {\r\n    console.error('Error updating profile:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Route: Delete user account (protected, must have no bookings)\r\napp.delete('/api/users/profile', authMiddleware, async (req, res) => {\r\n  try {\r\n    // Check if user has related bookings\r\n    const bookingCheck = await db.query(\r\n      `SELECT id FROM bookings WHERE user_id = $1`,\r\n      [req.user.id]\r\n    );\r\n\r\n    if (bookingCheck.rows.length > 0) {\r\n      return res.status(400).json({\r\n        error: 'You must cancel all bookings before deleting your account.'\r\n      });\r\n    }\r\n\r\n    // Delete user\r\n    const result = await db.query(\r\n      `DELETE FROM users WHERE id = $1 RETURNING id`,\r\n      [req.user.id]\r\n    );\r\n\r\n    if (result.rows.length === 0) {\r\n      return res.status(404).json({ error: 'User not found.' });\r\n    }\r\n\r\n    res.status(200).json({ message: 'User account deleted successfully.' });\r\n  } catch (error) {\r\n    console.error('Error deleting user account:', error.message);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Route: Get all users (protected)\r\napp.get('/api/users', authMiddleware, async (req, res) => {\r\n  try {\r\n    const query = `SELECT id, name, email, created_at FROM users ORDER BY id ASC`;\r\n    const result = await db.query(query);\r\n\r\n    res.status(200).json(result.rows);\r\n  } catch (error) {\r\n    console.error('Error fetching users:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Route: Universal login (users or babysitters)\r\napp.post('/api/login', async (req, res) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    if (!email || !password) {\r\n      return res.status(400).json({ error: 'Email and password are required.' });\r\n    }\r\n\r\n    // First try to find in users\r\n    const userQuery = `SELECT * FROM users WHERE email = $1`;\r\n    const userResult = await db.query(userQuery, [email]);\r\n\r\n    if (userResult.rows.length > 0) {\r\n      const user = userResult.rows[0];\r\n      const isMatch = await bcrypt.compare(password, user.password);\r\n      if (!isMatch) {\r\n        return res.status(401).json({ error: 'Invalid email or password.' });\r\n      }\r\n\r\n      const token = jwt.sign(\r\n        { id: user.id, email: user.email, role: 'user' },\r\n        process.env.JWT_SECRET,\r\n        { expiresIn: '3h' }\r\n      );\r\n\r\n      return res.status(200).json({\r\n        message: 'Login successful',\r\n        token,\r\n        role: 'user',\r\n        user: {\r\n          id: user.id,\r\n          name: user.name,\r\n          email: user.email,\r\n          created_at: user.created_at\r\n        }\r\n      });\r\n    }\r\n\r\n    // If not found, try babysitters\r\n    const babysitterQuery = `SELECT * FROM babysitters WHERE email = $1`;\r\n    const babysitterResult = await db.query(babysitterQuery, [email]);\r\n\r\n    if (babysitterResult.rows.length > 0) {\r\n      const babysitter = babysitterResult.rows[0];\r\n      const isMatch = await bcrypt.compare(password, babysitter.password);\r\n      if (!isMatch) {\r\n        return res.status(401).json({ error: 'Invalid email or password.' });\r\n      }\r\n\r\n      const token = jwt.sign(\r\n        { id: babysitter.id, email: babysitter.email, role: 'babysitter' },\r\n        process.env.JWT_SECRET,\r\n        { expiresIn: '3h' }\r\n      );\r\n\r\n      return res.status(200).json({\r\n        message: 'Login successful',\r\n        token,\r\n        role: 'babysitter',\r\n        user: {\r\n          id: babysitter.id,\r\n          name: babysitter.name,\r\n          email: babysitter.email,\r\n          region: babysitter.region\r\n        }\r\n      });\r\n    }\r\n\r\n    // Not found in either table\r\n    return res.status(401).json({ error: 'Invalid email or password.' });\r\n\r\n  } catch (error) {\r\n    console.error('Universal login error:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Route: Change babysitter password (protected)\r\napp.put('/api/babysitters/change-password', authMiddleware, async (req, res) => {\r\n  const { currentPassword, newPassword } = req.body;\r\n\r\n  try {\r\n    if (!currentPassword || !newPassword) {\r\n      return res.status(400).json({ error: 'Current and new password are required.' });\r\n    }\r\n\r\n    // Fetch babysitter from DB\r\n    const query = `SELECT * FROM babysitters WHERE id = $1`;\r\n    const result = await db.query(query, [req.user.id]);\r\n\r\n    if (result.rows.length === 0) {\r\n      return res.status(404).json({ error: 'Babysitter not found.' });\r\n    }\r\n\r\n    const babysitter = result.rows[0];\r\n\r\n    // Check if current password is correct\r\n    const isMatch = await bcrypt.compare(currentPassword, babysitter.password);\r\n    if (!isMatch) {\r\n      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n    }\r\n\r\n    // Hash new password\r\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n\r\n    // Update password in DB\r\n    const updateQuery = `\r\n      UPDATE babysitters\r\n      SET password = $1\r\n      WHERE id = $2\r\n    `;\r\n    await db.query(updateQuery, [hashedPassword, req.user.id]);\r\n\r\n    res.status(200).json({ message: 'Password updated successfully.' });\r\n  } catch (error) {\r\n    console.error('Error changing password:', error.message);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Route: Change user password (protected)\r\napp.put('/api/users/change-password', authMiddleware, async (req, res) => {\r\n  const { currentPassword, newPassword } = req.body;\r\n\r\n  try {\r\n    if (!currentPassword || !newPassword) {\r\n      return res.status(400).json({ error: 'Both current and new passwords are required.' });\r\n    }\r\n\r\n    // Get the user\r\n    const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n    const resultUser = await db.query(queryUser, [req.user.id]);\r\n\r\n    if (resultUser.rows.length === 0) {\r\n      return res.status(404).json({ error: 'User not found.' });\r\n    }\r\n\r\n    const user = resultUser.rows[0];\r\n\r\n    // Compare current password\r\n    const isMatch = await bcrypt.compare(currentPassword, user.password);\r\n    if (!isMatch) {\r\n      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n    }\r\n\r\n    // Hash new password\r\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n\r\n    // Update password\r\n    const queryUpdate = `\r\n      UPDATE users\r\n      SET password = $1\r\n      WHERE id = $2\r\n    `;\r\n    await db.query(queryUpdate, [hashedPassword, req.user.id]);\r\n\r\n    res.status(200).json({ message: 'Password updated successfully.' });\r\n  } catch (error) {\r\n    console.error('Error changing password:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Route: Update user password (protected)\r\napp.put('/api/users/profile/password', authMiddleware, async (req, res) => {\r\n  const { currentPassword, newPassword } = req.body;\r\n\r\n  try {\r\n    if (!currentPassword || !newPassword) {\r\n      return res.status(400).json({ error: 'Current and new password are required.' });\r\n    }\r\n\r\n    // Fetch user\r\n    const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n    const resultUser = await db.query(queryUser, [req.user.id]);\r\n\r\n    if (resultUser.rows.length === 0) {\r\n      return res.status(404).json({ error: 'User not found.' });\r\n    }\r\n\r\n    const user = resultUser.rows[0];\r\n\r\n    // Verify current password\r\n    const isMatch = await bcrypt.compare(currentPassword, user.password);\r\n    if (!isMatch) {\r\n      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n    }\r\n\r\n    // Hash new password\r\n    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n\r\n    // Update password\r\n    const queryUpdate = `\r\n      UPDATE users\r\n      SET password = $1\r\n      WHERE id = $2\r\n      RETURNING id;\r\n    `;\r\n    await db.query(queryUpdate, [hashedPassword, req.user.id]);\r\n\r\n    res.status(200).json({ message: 'Password updated successfully.' });\r\n  } catch (error) {\r\n    console.error('Error updating password:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Route: Update booking status (protected)\r\napp.put('/api/bookings/:id/status', authMiddleware, async (req, res) => {\r\n  const { id } = req.params;\r\n  const { status } = req.body;\r\n\r\n  try {\r\n    // Valida status permitido\r\n    const validStatuses = ['pending', 'confirmed', 'rejected', 'cancelled'];\r\n    if (!validStatuses.includes(status)) {\r\n      return res.status(400).json({ error: 'Invalid status value.' });\r\n    }\r\n\r\n    // update database\r\n    const query = `\r\n      UPDATE bookings\r\n      SET status = $1\r\n      WHERE id = $2\r\n      RETURNING *;\r\n    `;\r\n    const values = [status, id];\r\n    const result = await db.query(query, values);\r\n\r\n    if (result.rows.length === 0) {\r\n      return res.status(404).json({ error: 'Booking not found.' });\r\n    }\r\n\r\n    res.status(200).json({\r\n      message: 'Booking status updated successfully.',\r\n      booking: result.rows[0],\r\n    });\r\n  } catch (error) {\r\n    console.error('Error updating booking status:', error);\r\n    res.status(500).json({ error: 'Internal server error.' });\r\n  }\r\n});\r\n\r\n/* -----------------------------------\r\n   Bookings Routes\r\n----------------------------------- */\r\n\r\n// Route: Create a new booking\r\napp.post('/api/bookings', async (req, res) => {\r\n  const { user_id, babysitter_id, date, time_start, time_end } = req.body;\r\n\r\n  try {\r\n    const query = `\r\n      INSERT INTO bookings (user_id, babysitter_id, date, time_start, time_end)\r\n      VALUES ($1, $2, $3, $4, $5)\r\n      RETURNING *;\r\n    `;\r\n    const values = [user_id, babysitter_id, date, time_start, time_end];\r\n    const result = await db.query(query, values);\r\n\r\n    res.status(201).json({\r\n      message: 'Booking created successfully.',\r\n      booking: result.rows[0]\r\n    });\r\n  } catch (error) {\r\n    console.error('Error creating booking:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Route: Get all bookings for a user\r\napp.get('/api/bookings/:user_id', async (req, res) => {\r\n  const { user_id } = req.params;\r\n\r\n  try {\r\n    const query = `\r\n      SELECT \r\n        b.id, b.date, b.time_start, b.time_end, b.status,\r\n        bs.name AS babysitter_name, bs.region\r\n      FROM bookings b\r\n      JOIN babysitters bs ON b.babysitter_id = bs.id\r\n      WHERE b.user_id = $1\r\n      ORDER BY b.date ASC;\r\n    `;\r\n    const result = await db.query(query, [user_id]);\r\n\r\n    res.status(200).json(result.rows);\r\n  } catch (error) {\r\n    console.error('Error fetching bookings:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n// Route: Get all bookings for a babysitter\r\napp.get('/api/babysitters/:id/bookings', async (req, res) => {\r\n  const babysitterId = req.params.id;\r\n\r\n  try {\r\n    const query = `\r\n      SELECT \r\n        b.id,\r\n        b.date,\r\n        b.time_start,\r\n        b.time_end,\r\n        b.status,\r\n        u.name AS parent_name\r\n      FROM bookings b\r\n      JOIN users u ON b.user_id = u.id\r\n      WHERE b.babysitter_id = $1\r\n      ORDER BY b.date ASC, b.time_start ASC;\r\n    `;\r\n\r\n    const result = await db.query(query, [babysitterId]);\r\n\r\n    res.status(200).json(result.rows);\r\n  } catch (error) {\r\n    console.error('Error fetching babysitter bookings:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n/* -----------------------------------\r\n   Root Endpoint\r\n----------------------------------- */\r\napp.get('/', (req, res) => {\r\n  res.send('TrustaSitter backend is running!');\r\n});\r\n\r\n/* -----------------------------------\r\n   Server Initialization\r\n----------------------------------- */\r\nconst PORT = process.env.PORT || 3000;\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running on port ${PORT}`);\r\n});\r\n"
        }
    ]
}