{
    "sourceFile": "trustasitter-frontend/src/pages/AdminDashboard.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1751516745137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1751548639527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,43 @@\n-import React, { useEffect, useState } from \"react\";\r\n+import React, { useEffect, useState, useContext } from \"react\";\r\n+import { AuthContext } from \"../context/AuthContext\";\r\n import axios from \"axios\";\r\n \r\n const AdminDashboard = () => {\r\n+  const { token } = useContext(AuthContext);\r\n+\r\n+  // State for summary data\r\n   const [summary, setSummary] = useState({\r\n-    users: 0,\r\n-    babysitters: 0,\r\n-    bookings: 0,\r\n+    usersCount: 0,\r\n+    babysittersCount: 0,\r\n+    bookingsCount: 0,\r\n     pendingBookings: 0,\r\n   });\r\n \r\n-  const [bookings, setBookings] = useState([]);\r\n-  const [users, setUsers] = useState([]);\r\n+  // State for loading indicator\r\n   const [loading, setLoading] = useState(true);\r\n \r\n+  // Fetch summary data when component mounts\r\n   useEffect(() => {\r\n-    // Future: fetch data from API\r\n-    // For now, use mock data\r\n-    setSummary({\r\n-      users: 5,\r\n-      babysitters: 3,\r\n-      bookings: 12,\r\n-      pendingBookings: 2,\r\n-    });\r\n+    const fetchSummary = async () => {\r\n+      try {\r\n+        const response = await axios.get(\"http://localhost:3000/api/admin/summary\", {\r\n+          headers: {\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        });\r\n \r\n-    setBookings([\r\n-      {\r\n-        id: 1,\r\n-        client: \"John Doe\",\r\n-        babysitter: \"Jane Smith\",\r\n-        date: \"2024-08-15\",\r\n-        status: \"pending\",\r\n-      },\r\n-    ]);\r\n+        setSummary(response.data);\r\n+      } catch (err) {\r\n+        console.error(\"Error fetching summary:\", err);\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n \r\n-    setUsers([\r\n-      { id: 1, name: \"John Doe\", email: \"john@example.com\", role: \"user\" },\r\n-      { id: 2, name: \"Jane Smith\", email: \"jane@example.com\", role: \"babysitter\" },\r\n-    ]);\r\n+    fetchSummary();\r\n+  }, [token]);\r\n \r\n-    setLoading(false);\r\n-  }, []);\r\n-\r\n   if (loading) {\r\n     return (\r\n       <main className=\"flex items-center justify-center min-h-screen\">\r\n         <p className=\"text-gray-600\">Loading admin dashboard...</p>\r\n@@ -49,95 +45,35 @@\n     );\r\n   }\r\n \r\n   return (\r\n-    <main className=\"bg-gradient-to-br from-blue-50 to-purple-100 min-h-screen py-12 px-6\">\r\n-      <h1 className=\"text-3xl font-bold text-center mb-8\">\r\n+    <main className=\"min-h-screen bg-gradient-to-br from-blue-50 to-purple-100 py-12 px-6\">\r\n+      <h1 className=\"text-3xl font-bold mb-8 text-center\">\r\n         Admin Dashboard\r\n       </h1>\r\n \r\n       {/* Summary Cards */}\r\n-      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\r\n+      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-10\">\r\n         <div className=\"bg-white p-4 rounded shadow text-center\">\r\n-          <p className=\"text-gray-500\">Clients</p>\r\n-          <p className=\"text-2xl font-bold\">{summary.users}</p>\r\n+          <h2 className=\"text-xl font-semibold text-gray-800\">Clients</h2>\r\n+          <p className=\"text-3xl text-purple-600\">{summary.usersCount}</p>\r\n         </div>\r\n         <div className=\"bg-white p-4 rounded shadow text-center\">\r\n-          <p className=\"text-gray-500\">Babysitters</p>\r\n-          <p className=\"text-2xl font-bold\">{summary.babysitters}</p>\r\n+          <h2 className=\"text-xl font-semibold text-gray-800\">Babysitters</h2>\r\n+          <p className=\"text-3xl text-purple-600\">{summary.babysittersCount}</p>\r\n         </div>\r\n         <div className=\"bg-white p-4 rounded shadow text-center\">\r\n-          <p className=\"text-gray-500\">Total Bookings</p>\r\n-          <p className=\"text-2xl font-bold\">{summary.bookings}</p>\r\n+          <h2 className=\"text-xl font-semibold text-gray-800\">Total Bookings</h2>\r\n+          <p className=\"text-3xl text-purple-600\">{summary.bookingsCount}</p>\r\n         </div>\r\n         <div className=\"bg-white p-4 rounded shadow text-center\">\r\n-          <p className=\"text-gray-500\">Pending Bookings</p>\r\n-          <p className=\"text-2xl font-bold\">{summary.pendingBookings}</p>\r\n+          <h2 className=\"text-xl font-semibold text-gray-800\">Pending Bookings</h2>\r\n+          <p className=\"text-3xl text-purple-600\">{summary.pendingBookings}</p>\r\n         </div>\r\n       </div>\r\n \r\n-      {/* Bookings Table */}\r\n-      <h2 className=\"text-xl font-semibold mb-2\">Bookings</h2>\r\n-      <div className=\"overflow-x-auto mb-8\">\r\n-        <table className=\"min-w-full bg-white rounded shadow\">\r\n-          <thead>\r\n-            <tr>\r\n-              <th className=\"py-2 px-4 border-b\">Client</th>\r\n-              <th className=\"py-2 px-4 border-b\">Babysitter</th>\r\n-              <th className=\"py-2 px-4 border-b\">Date</th>\r\n-              <th className=\"py-2 px-4 border-b\">Status</th>\r\n-              <th className=\"py-2 px-4 border-b\">Actions</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {bookings.map((booking) => (\r\n-              <tr key={booking.id}>\r\n-                <td className=\"py-2 px-4 border-b\">{booking.client}</td>\r\n-                <td className=\"py-2 px-4 border-b\">{booking.babysitter}</td>\r\n-                <td className=\"py-2 px-4 border-b\">{booking.date}</td>\r\n-                <td className=\"py-2 px-4 border-b capitalize\">{booking.status}</td>\r\n-                <td className=\"py-2 px-4 border-b\">\r\n-                  <button className=\"bg-green-500 text-white px-2 py-1 rounded mr-2\">\r\n-                    Approve\r\n-                  </button>\r\n-                  <button className=\"bg-red-500 text-white px-2 py-1 rounded\">\r\n-                    Cancel\r\n-                  </button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </table>\r\n-      </div>\r\n-\r\n-      {/* Users Table */}\r\n-      <h2 className=\"text-xl font-semibold mb-2\">Users</h2>\r\n-      <div className=\"overflow-x-auto\">\r\n-        <table className=\"min-w-full bg-white rounded shadow\">\r\n-          <thead>\r\n-            <tr>\r\n-              <th className=\"py-2 px-4 border-b\">Name</th>\r\n-              <th className=\"py-2 px-4 border-b\">Email</th>\r\n-              <th className=\"py-2 px-4 border-b\">Role</th>\r\n-              <th className=\"py-2 px-4 border-b\">Actions</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {users.map((user) => (\r\n-              <tr key={user.id}>\r\n-                <td className=\"py-2 px-4 border-b\">{user.name}</td>\r\n-                <td className=\"py-2 px-4 border-b\">{user.email}</td>\r\n-                <td className=\"py-2 px-4 border-b capitalize\">{user.role}</td>\r\n-                <td className=\"py-2 px-4 border-b\">\r\n-                  <button className=\"bg-red-500 text-white px-2 py-1 rounded\">\r\n-                    Delete\r\n-                  </button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </table>\r\n-      </div>\r\n+      {/* Next sections will come in the next steps */}\r\n+      <p className=\"text-gray-600 text-center\">Bookings and Users will be listed below in the next steps.</p>\r\n     </main>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1751548808916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,12 @@\n     babysittersCount: 0,\r\n     bookingsCount: 0,\r\n     pendingBookings: 0,\r\n   });\r\n+  // State for bookings list\r\n+const [bookings, setBookings] = useState([]);\r\n \r\n+\r\n   // State for loading indicator\r\n   const [loading, setLoading] = useState(true);\r\n \r\n   // Fetch summary data when component mounts\r\n@@ -34,8 +37,27 @@\n       }\r\n     };\r\n \r\n     fetchSummary();\r\n+    // Fetch bookings when component mounts\r\n+      useEffect(() => {\r\n+        const fetchBookings = async () => {\r\n+          try {\r\n+            const response = await axios.get(\"http://localhost:3000/api/admin/bookings\", {\r\n+              headers: {\r\n+                Authorization: `Bearer ${token}`,\r\n+              },\r\n+            });\r\n+\r\n+            setBookings(response.data);\r\n+          } catch (err) {\r\n+            console.error(\"Error fetching bookings:\", err);\r\n+          }\r\n+        };\r\n+\r\n+  fetchBookings();\r\n+}, [token]);\r\n+\r\n   }, [token]);\r\n \r\n   if (loading) {\r\n     return (\r\n"
                },
                {
                    "date": 1751548874547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,8 +94,44 @@\n       </div>\r\n \r\n       {/* Next sections will come in the next steps */}\r\n       <p className=\"text-gray-600 text-center\">Bookings and Users will be listed below in the next steps.</p>\r\n+\r\n+      {/* Bookings Table */}\r\n+<div className=\"bg-white p-4 rounded shadow mb-8\">\r\n+  <h2 className=\"text-2xl font-semibold mb-4 text-gray-800\">All Bookings</h2>\r\n+  {bookings.length === 0 ? (\r\n+    <p className=\"text-gray-600\">No bookings found.</p>\r\n+  ) : (\r\n+    <div className=\"overflow-x-auto\">\r\n+      <table className=\"min-w-full border\">\r\n+        <thead>\r\n+          <tr className=\"bg-purple-100\">\r\n+            <th className=\"py-2 px-4 border\">ID</th>\r\n+            <th className=\"py-2 px-4 border\">Client</th>\r\n+            <th className=\"py-2 px-4 border\">Babysitter</th>\r\n+            <th className=\"py-2 px-4 border\">Date</th>\r\n+            <th className=\"py-2 px-4 border\">Status</th>\r\n+          </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+          {bookings.map((booking) => (\r\n+            <tr key={booking.id} className=\"hover:bg-purple-50\">\r\n+              <td className=\"py-2 px-4 border\">{booking.id}</td>\r\n+              <td className=\"py-2 px-4 border\">{booking.client_name}</td>\r\n+              <td className=\"py-2 px-4 border\">{booking.babysitter_name}</td>\r\n+              <td className=\"py-2 px-4 border\">\r\n+                {new Date(booking.date).toLocaleDateString()}\r\n+              </td>\r\n+              <td className=\"py-2 px-4 border\">{booking.status}</td>\r\n+            </tr>\r\n+          ))}\r\n+        </tbody>\r\n+      </table>\r\n+    </div>\r\n+  )}\r\n+</div>\r\n+\r\n     </main>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1751548925730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,12 +11,12 @@\n     babysittersCount: 0,\r\n     bookingsCount: 0,\r\n     pendingBookings: 0,\r\n   });\r\n+\r\n   // State for bookings list\r\n-const [bookings, setBookings] = useState([]);\r\n+  const [bookings, setBookings] = useState([]);\r\n \r\n-\r\n   // State for loading indicator\r\n   const [loading, setLoading] = useState(true);\r\n \r\n   // Fetch summary data when component mounts\r\n@@ -27,9 +27,8 @@\n           headers: {\r\n             Authorization: `Bearer ${token}`,\r\n           },\r\n         });\r\n-\r\n         setSummary(response.data);\r\n       } catch (err) {\r\n         console.error(\"Error fetching summary:\", err);\r\n       } finally {\r\n@@ -37,27 +36,26 @@\n       }\r\n     };\r\n \r\n     fetchSummary();\r\n-    // Fetch bookings when component mounts\r\n-      useEffect(() => {\r\n-        const fetchBookings = async () => {\r\n-          try {\r\n-            const response = await axios.get(\"http://localhost:3000/api/admin/bookings\", {\r\n-              headers: {\r\n-                Authorization: `Bearer ${token}`,\r\n-              },\r\n-            });\r\n+  }, [token]);\r\n \r\n-            setBookings(response.data);\r\n-          } catch (err) {\r\n-            console.error(\"Error fetching bookings:\", err);\r\n-          }\r\n-        };\r\n+  // Fetch bookings when component mounts\r\n+  useEffect(() => {\r\n+    const fetchBookings = async () => {\r\n+      try {\r\n+        const response = await axios.get(\"http://localhost:3000/api/admin/bookings\", {\r\n+          headers: {\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        });\r\n+        setBookings(response.data);\r\n+      } catch (err) {\r\n+        console.error(\"Error fetching bookings:\", err);\r\n+      }\r\n+    };\r\n \r\n-  fetchBookings();\r\n-}, [token]);\r\n-\r\n+    fetchBookings();\r\n   }, [token]);\r\n \r\n   if (loading) {\r\n     return (\r\n@@ -92,46 +90,42 @@\n           <p className=\"text-3xl text-purple-600\">{summary.pendingBookings}</p>\r\n         </div>\r\n       </div>\r\n \r\n-      {/* Next sections will come in the next steps */}\r\n-      <p className=\"text-gray-600 text-center\">Bookings and Users will be listed below in the next steps.</p>\r\n-\r\n       {/* Bookings Table */}\r\n-<div className=\"bg-white p-4 rounded shadow mb-8\">\r\n-  <h2 className=\"text-2xl font-semibold mb-4 text-gray-800\">All Bookings</h2>\r\n-  {bookings.length === 0 ? (\r\n-    <p className=\"text-gray-600\">No bookings found.</p>\r\n-  ) : (\r\n-    <div className=\"overflow-x-auto\">\r\n-      <table className=\"min-w-full border\">\r\n-        <thead>\r\n-          <tr className=\"bg-purple-100\">\r\n-            <th className=\"py-2 px-4 border\">ID</th>\r\n-            <th className=\"py-2 px-4 border\">Client</th>\r\n-            <th className=\"py-2 px-4 border\">Babysitter</th>\r\n-            <th className=\"py-2 px-4 border\">Date</th>\r\n-            <th className=\"py-2 px-4 border\">Status</th>\r\n-          </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-          {bookings.map((booking) => (\r\n-            <tr key={booking.id} className=\"hover:bg-purple-50\">\r\n-              <td className=\"py-2 px-4 border\">{booking.id}</td>\r\n-              <td className=\"py-2 px-4 border\">{booking.client_name}</td>\r\n-              <td className=\"py-2 px-4 border\">{booking.babysitter_name}</td>\r\n-              <td className=\"py-2 px-4 border\">\r\n-                {new Date(booking.date).toLocaleDateString()}\r\n-              </td>\r\n-              <td className=\"py-2 px-4 border\">{booking.status}</td>\r\n-            </tr>\r\n-          ))}\r\n-        </tbody>\r\n-      </table>\r\n-    </div>\r\n-  )}\r\n-</div>\r\n-\r\n+      <div className=\"bg-white p-4 rounded shadow mb-8\">\r\n+        <h2 className=\"text-2xl font-semibold mb-4 text-gray-800\">All Bookings</h2>\r\n+        {bookings.length === 0 ? (\r\n+          <p className=\"text-gray-600\">No bookings found.</p>\r\n+        ) : (\r\n+          <div className=\"overflow-x-auto\">\r\n+            <table className=\"min-w-full border\">\r\n+              <thead>\r\n+                <tr className=\"bg-purple-100\">\r\n+                  <th className=\"py-2 px-4 border\">ID</th>\r\n+                  <th className=\"py-2 px-4 border\">Client</th>\r\n+                  <th className=\"py-2 px-4 border\">Babysitter</th>\r\n+                  <th className=\"py-2 px-4 border\">Date</th>\r\n+                  <th className=\"py-2 px-4 border\">Status</th>\r\n+                </tr>\r\n+              </thead>\r\n+              <tbody>\r\n+                {bookings.map((booking) => (\r\n+                  <tr key={booking.id} className=\"hover:bg-purple-50\">\r\n+                    <td className=\"py-2 px-4 border\">{booking.id}</td>\r\n+                    <td className=\"py-2 px-4 border\">{booking.client_name}</td>\r\n+                    <td className=\"py-2 px-4 border\">{booking.babysitter_name}</td>\r\n+                    <td className=\"py-2 px-4 border\">\r\n+                      {new Date(booking.date).toLocaleDateString()}\r\n+                    </td>\r\n+                    <td className=\"py-2 px-4 border\">{booking.status}</td>\r\n+                  </tr>\r\n+                ))}\r\n+              </tbody>\r\n+            </table>\r\n+          </div>\r\n+        )}\r\n+      </div>\r\n     </main>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1751549086740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,11 @@\n \r\n   // State for bookings list\r\n   const [bookings, setBookings] = useState([]);\r\n \r\n+  // State for users list\r\n+  const [users, setUsers] = useState([]);\r\n+\r\n   // State for loading indicator\r\n   const [loading, setLoading] = useState(true);\r\n \r\n   // Fetch summary data when component mounts\r\n@@ -56,8 +59,26 @@\n \r\n     fetchBookings();\r\n   }, [token]);\r\n \r\n+  // Fetch users when component mounts\r\n+  useEffect(() => {\r\n+    const fetchUsers = async () => {\r\n+      try {\r\n+        const response = await axios.get(\"http://localhost:3000/api/admin/users\", {\r\n+          headers: {\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        });\r\n+        setUsers(response.data);\r\n+      } catch (err) {\r\n+        console.error(\"Error fetching users:\", err);\r\n+      }\r\n+    };\r\n+\r\n+    fetchUsers();\r\n+  }, [token]);\r\n+\r\n   if (loading) {\r\n     return (\r\n       <main className=\"flex items-center justify-center min-h-screen\">\r\n         <p className=\"text-gray-600\">Loading admin dashboard...</p>\r\n@@ -124,8 +145,43 @@\n             </table>\r\n           </div>\r\n         )}\r\n       </div>\r\n+\r\n+      {/* Users Table */}\r\n+      <div className=\"bg-white p-4 rounded shadow\">\r\n+        <h2 className=\"text-2xl font-semibold mb-4 text-gray-800\">All Users</h2>\r\n+        {users.length === 0 ? (\r\n+          <p className=\"text-gray-600\">No users found.</p>\r\n+        ) : (\r\n+          <div className=\"overflow-x-auto\">\r\n+            <table className=\"min-w-full border\">\r\n+              <thead>\r\n+                <tr className=\"bg-purple-100\">\r\n+                  <th className=\"py-2 px-4 border\">ID</th>\r\n+                  <th className=\"py-2 px-4 border\">Name</th>\r\n+                  <th className=\"py-2 px-4 border\">Email</th>\r\n+                  <th className=\"py-2 px-4 border\">Role</th>\r\n+                  <th className=\"py-2 px-4 border\">Created At</th>\r\n+                </tr>\r\n+              </thead>\r\n+              <tbody>\r\n+                {users.map((user) => (\r\n+                  <tr key={`${user.role}-${user.id}`} className=\"hover:bg-purple-50\">\r\n+                    <td className=\"py-2 px-4 border\">{user.id}</td>\r\n+                    <td className=\"py-2 px-4 border\">{user.name}</td>\r\n+                    <td className=\"py-2 px-4 border\">{user.email}</td>\r\n+                    <td className=\"py-2 px-4 border capitalize\">{user.role}</td>\r\n+                    <td className=\"py-2 px-4 border\">\r\n+                      {new Date(user.created_at).toLocaleDateString()}\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+              </tbody>\r\n+            </table>\r\n+          </div>\r\n+        )}\r\n+      </div>\r\n     </main>\r\n   );\r\n };\r\n \r\n"
                },
                {
                    "date": 1751549722851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,8 +143,62 @@\n                 ))}\r\n               </tbody>\r\n             </table>\r\n           </div>\r\n+          {/* Bookings Table */}\r\n+<div className=\"bg-white p-4 rounded shadow mb-8\">\r\n+  <h2 className=\"text-2xl font-semibold mb-4 text-gray-800\">All Bookings</h2>\r\n+  {bookings.length === 0 ? (\r\n+    <p className=\"text-gray-600\">No bookings found.</p>\r\n+  ) : (\r\n+    <div className=\"overflow-x-auto\">\r\n+      <table className=\"min-w-full border\">\r\n+        <thead>\r\n+          <tr className=\"bg-purple-100\">\r\n+            <th className=\"py-2 px-4 border\">ID</th>\r\n+            <th className=\"py-2 px-4 border\">Client</th>\r\n+            <th className=\"py-2 px-4 border\">Babysitter</th>\r\n+            <th className=\"py-2 px-4 border\">Date</th>\r\n+            <th className=\"py-2 px-4 border\">Status</th>\r\n+            <th className=\"py-2 px-4 border\">Actions</th>\r\n+          </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+          {bookings.map((booking) => (\r\n+            <tr key={booking.id} className=\"hover:bg-purple-50\">\r\n+              <td className=\"py-2 px-4 border\">{booking.id}</td>\r\n+              <td className=\"py-2 px-4 border\">{booking.client_name}</td>\r\n+              <td className=\"py-2 px-4 border\">{booking.babysitter_name}</td>\r\n+              <td className=\"py-2 px-4 border\">\r\n+                {new Date(booking.date).toLocaleDateString()}\r\n+              </td>\r\n+              <td className=\"py-2 px-4 border capitalize\">{booking.status}</td>\r\n+              <td className=\"py-2 px-4 border space-x-2\">\r\n+                {booking.status !== \"approved\" && (\r\n+                  <button\r\n+                    onClick={() => updateBookingStatus(booking.id, \"approved\")}\r\n+                    className=\"bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded text-sm\"\r\n+                  >\r\n+                    Approve\r\n+                  </button>\r\n+                )}\r\n+                {booking.status !== \"cancelled\" && (\r\n+                  <button\r\n+                    onClick={() => updateBookingStatus(booking.id, \"cancelled\")}\r\n+                    className=\"bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-sm\"\r\n+                  >\r\n+                    Cancel\r\n+                  </button>\r\n+                )}\r\n+              </td>\r\n+            </tr>\r\n+          ))}\r\n+        </tbody>\r\n+      </table>\r\n+    </div>\r\n+  )}\r\n+</div>\r\n+\r\n         )}\r\n       </div>\r\n \r\n       {/* Users Table */}\r\n"
                },
                {
                    "date": 1751549745339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,40 @@\n     };\r\n \r\n     fetchUsers();\r\n   }, [token]);\r\n+// Function to update booking status\r\n+const updateBookingStatus = async (bookingId, newStatus) => {\r\n+  if (!window.confirm(`Are you sure you want to set status to \"${newStatus}\"?`)) {\r\n+    return;\r\n+  }\r\n \r\n+  try {\r\n+    await axios.put(\r\n+      `http://localhost:3000/api/admin/bookings/${bookingId}/status`,\r\n+      { status: newStatus },\r\n+      {\r\n+        headers: {\r\n+          Authorization: `Bearer ${token}`,\r\n+        },\r\n+      }\r\n+    );\r\n+\r\n+    // Refresh bookings list\r\n+    const response = await axios.get(\"http://localhost:3000/api/admin/bookings\", {\r\n+      headers: {\r\n+        Authorization: `Bearer ${token}`,\r\n+      },\r\n+    });\r\n+    setBookings(response.data);\r\n+\r\n+    alert(`Booking status updated to \"${newStatus}\".`);\r\n+  } catch (err) {\r\n+    console.error(\"Error updating status:\", err);\r\n+    alert(\"Failed to update booking status.\");\r\n+  }\r\n+};\r\n+\r\n   if (loading) {\r\n     return (\r\n       <main className=\"flex items-center justify-center min-h-screen\">\r\n         <p className=\"text-gray-600\">Loading admin dashboard...</p>\r\n"
                },
                {
                    "date": 1751549963274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,97 +142,63 @@\n           <p className=\"text-3xl text-purple-600\">{summary.pendingBookings}</p>\r\n         </div>\r\n       </div>\r\n \r\n-      {/* Bookings Table */}\r\n-      <div className=\"bg-white p-4 rounded shadow mb-8\">\r\n-        <h2 className=\"text-2xl font-semibold mb-4 text-gray-800\">All Bookings</h2>\r\n-        {bookings.length === 0 ? (\r\n-          <p className=\"text-gray-600\">No bookings found.</p>\r\n-        ) : (\r\n-          <div className=\"overflow-x-auto\">\r\n-            <table className=\"min-w-full border\">\r\n-              <thead>\r\n-                <tr className=\"bg-purple-100\">\r\n-                  <th className=\"py-2 px-4 border\">ID</th>\r\n-                  <th className=\"py-2 px-4 border\">Client</th>\r\n-                  <th className=\"py-2 px-4 border\">Babysitter</th>\r\n-                  <th className=\"py-2 px-4 border\">Date</th>\r\n-                  <th className=\"py-2 px-4 border\">Status</th>\r\n-                </tr>\r\n-              </thead>\r\n-              <tbody>\r\n-                {bookings.map((booking) => (\r\n-                  <tr key={booking.id} className=\"hover:bg-purple-50\">\r\n-                    <td className=\"py-2 px-4 border\">{booking.id}</td>\r\n-                    <td className=\"py-2 px-4 border\">{booking.client_name}</td>\r\n-                    <td className=\"py-2 px-4 border\">{booking.babysitter_name}</td>\r\n-                    <td className=\"py-2 px-4 border\">\r\n-                      {new Date(booking.date).toLocaleDateString()}\r\n-                    </td>\r\n-                    <td className=\"py-2 px-4 border\">{booking.status}</td>\r\n-                  </tr>\r\n-                ))}\r\n-              </tbody>\r\n-            </table>\r\n-          </div>\r\n+      \r\n           {/* Bookings Table */}\r\n-<div className=\"bg-white p-4 rounded shadow mb-8\">\r\n-  <h2 className=\"text-2xl font-semibold mb-4 text-gray-800\">All Bookings</h2>\r\n-  {bookings.length === 0 ? (\r\n-    <p className=\"text-gray-600\">No bookings found.</p>\r\n-  ) : (\r\n-    <div className=\"overflow-x-auto\">\r\n-      <table className=\"min-w-full border\">\r\n-        <thead>\r\n-          <tr className=\"bg-purple-100\">\r\n-            <th className=\"py-2 px-4 border\">ID</th>\r\n-            <th className=\"py-2 px-4 border\">Client</th>\r\n-            <th className=\"py-2 px-4 border\">Babysitter</th>\r\n-            <th className=\"py-2 px-4 border\">Date</th>\r\n-            <th className=\"py-2 px-4 border\">Status</th>\r\n-            <th className=\"py-2 px-4 border\">Actions</th>\r\n-          </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-          {bookings.map((booking) => (\r\n-            <tr key={booking.id} className=\"hover:bg-purple-50\">\r\n-              <td className=\"py-2 px-4 border\">{booking.id}</td>\r\n-              <td className=\"py-2 px-4 border\">{booking.client_name}</td>\r\n-              <td className=\"py-2 px-4 border\">{booking.babysitter_name}</td>\r\n-              <td className=\"py-2 px-4 border\">\r\n-                {new Date(booking.date).toLocaleDateString()}\r\n+            <div className=\"bg-white p-4 rounded shadow mb-8\">\r\n+              <h2 className=\"text-2xl font-semibold mb-4 text-gray-800\">All Bookings</h2>\r\n+              {bookings.length === 0 ? (\r\n+                <p className=\"text-gray-600\">No bookings found.</p>\r\n+              ) : (\r\n+                <div className=\"overflow-x-auto\">\r\n+                  <table className=\"min-w-full border\">\r\n+                    <thead>\r\n+                      <tr className=\"bg-purple-100\">\r\n+                        <th className=\"py-2 px-4 border\">ID</th>\r\n+                        <th className=\"py-2 px-4 border\">Client</th>\r\n+                        <th className=\"py-2 px-4 border\">Babysitter</th>\r\n+                        <th className=\"py-2 px-4 border\">Date</th>\r\n+                        <th className=\"py-2 px-4 border\">Status</th>\r\n+                        <th className=\"py-2 px-4 border\">Actions</th>\r\n+                      </tr>\r\n+                    </thead>\r\n+                    <tbody>\r\n+                      {bookings.map((booking) => (\r\n+                        <tr key={booking.id} className=\"hover:bg-purple-50\">\r\n+                          <td className=\"py-2 px-4 border\">{booking.id}</td>\r\n+                          <td className=\"py-2 px-4 border\">{booking.client_name}</td>\r\n+                          <td className=\"py-2 px-4 border\">{booking.babysitter_name}</td>\r\n+                          <td className=\"py-2 px-4 border\">\r\n+                            {new Date(booking.date).toLocaleDateString()}\r\n+                          </td>\r\n+                          <td className=\"py-2 px-4 border capitalize\">{booking.status}</td>\r\n+               <td className=\"py-2 px-4 border space-x-2\">\r\n+                            {booking.status !== \"approved\" && (\r\n+                              <button\r\n+                                onClick={() => updateBookingStatus(booking.id, \"approved\")}\r\n+                                className=\"bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded text-sm\"\r\n+                              >\r\n+                                Approve\r\n+                              </button>\r\n+                            )}\r\n+                            {booking.status !== \"cancelled\" && (\r\n+                              <button\r\n+                                onClick={() => updateBookingStatus(booking.id, \"cancelled\")}\r\n+                                className=\"bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-sm\"\r\n+                              >\r\n+                                Cancel\r\n+                              </button>\r\n+                            )}\r\n               </td>\r\n-              <td className=\"py-2 px-4 border capitalize\">{booking.status}</td>\r\n-              <td className=\"py-2 px-4 border space-x-2\">\r\n-                {booking.status !== \"approved\" && (\r\n-                  <button\r\n-                    onClick={() => updateBookingStatus(booking.id, \"approved\")}\r\n-                    className=\"bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded text-sm\"\r\n-                  >\r\n-                    Approve\r\n-                  </button>\r\n-                )}\r\n-                {booking.status !== \"cancelled\" && (\r\n-                  <button\r\n-                    onClick={() => updateBookingStatus(booking.id, \"cancelled\")}\r\n-                    className=\"bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-sm\"\r\n-                  >\r\n-                    Cancel\r\n-                  </button>\r\n-                )}\r\n-              </td>\r\n             </tr>\r\n           ))}\r\n         </tbody>\r\n       </table>\r\n     </div>\r\n   )}\r\n </div>\r\n \r\n-        )}\r\n-      </div>\r\n-\r\n       {/* Users Table */}\r\n       <div className=\"bg-white p-4 rounded shadow\">\r\n         <h2 className=\"text-2xl font-semibold mb-4 text-gray-800\">All Users</h2>\r\n         {users.length === 0 ? (\r\n@@ -255,11 +221,11 @@\n                     <td className=\"py-2 px-4 border\">{user.id}</td>\r\n                     <td className=\"py-2 px-4 border\">{user.name}</td>\r\n                     <td className=\"py-2 px-4 border\">{user.email}</td>\r\n                     <td className=\"py-2 px-4 border capitalize\">{user.role}</td>\r\n-                    <td className=\"py-2 px-4 border\">\r\n-                      {new Date(user.created_at).toLocaleDateString()}\r\n-                    </td>\r\n+                   <td className=\"py-2 px-4 border\">\r\n+                    {new Date(user.created_at).toLocaleDateString()}\r\n+                  </td>\r\n                   </tr>\r\n                 ))}\r\n               </tbody>\r\n             </table>\r\n"
                },
                {
                    "date": 1751550014955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,36 @@\n     console.error(\"Error updating status:\", err);\r\n     alert(\"Failed to update booking status.\");\r\n   }\r\n };\r\n+// Function to delete a user or babysitter\r\n+const deleteUser = async (role, id) => {\r\n+  if (!window.confirm(`Are you sure you want to delete this ${role}? This action cannot be undone.`)) {\r\n+    return;\r\n+  }\r\n \r\n+  try {\r\n+    await axios.delete(`http://localhost:3000/api/admin/users/${role}/${id}`, {\r\n+      headers: {\r\n+        Authorization: `Bearer ${token}`,\r\n+      },\r\n+    });\r\n+\r\n+    // Refresh users list\r\n+    const response = await axios.get(\"http://localhost:3000/api/admin/users\", {\r\n+      headers: {\r\n+        Authorization: `Bearer ${token}`,\r\n+      },\r\n+    });\r\n+    setUsers(response.data);\r\n+\r\n+    alert(`${role} deleted successfully.`);\r\n+  } catch (err) {\r\n+    console.error(\"Error deleting user:\", err);\r\n+    alert(\"Failed to delete user.\");\r\n+  }\r\n+};\r\n+\r\n   if (loading) {\r\n     return (\r\n       <main className=\"flex items-center justify-center min-h-screen\">\r\n         <p className=\"text-gray-600\">Loading admin dashboard...</p>\r\n"
                },
                {
                    "date": 1751550084298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,142 +1,47 @@\n-import React, { useEffect, useState, useContext } from \"react\";\r\n-import { AuthContext } from \"../context/AuthContext\";\r\n+import React, { useEffect, useState } from \"react\";\r\n import axios from \"axios\";\r\n \r\n const AdminDashboard = () => {\r\n-  const { token } = useContext(AuthContext);\r\n-\r\n-  // State for summary data\r\n   const [summary, setSummary] = useState({\r\n-    usersCount: 0,\r\n-    babysittersCount: 0,\r\n-    bookingsCount: 0,\r\n+    users: 0,\r\n+    babysitters: 0,\r\n+    bookings: 0,\r\n     pendingBookings: 0,\r\n   });\r\n \r\n-  // State for bookings list\r\n   const [bookings, setBookings] = useState([]);\r\n-\r\n-  // State for users list\r\n   const [users, setUsers] = useState([]);\r\n-\r\n-  // State for loading indicator\r\n   const [loading, setLoading] = useState(true);\r\n \r\n-  // Fetch summary data when component mounts\r\n   useEffect(() => {\r\n-    const fetchSummary = async () => {\r\n-      try {\r\n-        const response = await axios.get(\"http://localhost:3000/api/admin/summary\", {\r\n-          headers: {\r\n-            Authorization: `Bearer ${token}`,\r\n-          },\r\n-        });\r\n-        setSummary(response.data);\r\n-      } catch (err) {\r\n-        console.error(\"Error fetching summary:\", err);\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n+    // Future: fetch data from API\r\n+    // For now, use mock data\r\n+    setSummary({\r\n+      users: 5,\r\n+      babysitters: 3,\r\n+      bookings: 12,\r\n+      pendingBookings: 2,\r\n+    });\r\n \r\n-    fetchSummary();\r\n-  }, [token]);\r\n-\r\n-  // Fetch bookings when component mounts\r\n-  useEffect(() => {\r\n-    const fetchBookings = async () => {\r\n-      try {\r\n-        const response = await axios.get(\"http://localhost:3000/api/admin/bookings\", {\r\n-          headers: {\r\n-            Authorization: `Bearer ${token}`,\r\n-          },\r\n-        });\r\n-        setBookings(response.data);\r\n-      } catch (err) {\r\n-        console.error(\"Error fetching bookings:\", err);\r\n-      }\r\n-    };\r\n-\r\n-    fetchBookings();\r\n-  }, [token]);\r\n-\r\n-  // Fetch users when component mounts\r\n-  useEffect(() => {\r\n-    const fetchUsers = async () => {\r\n-      try {\r\n-        const response = await axios.get(\"http://localhost:3000/api/admin/users\", {\r\n-          headers: {\r\n-            Authorization: `Bearer ${token}`,\r\n-          },\r\n-        });\r\n-        setUsers(response.data);\r\n-      } catch (err) {\r\n-        console.error(\"Error fetching users:\", err);\r\n-      }\r\n-    };\r\n-\r\n-    fetchUsers();\r\n-  }, [token]);\r\n-// Function to update booking status\r\n-const updateBookingStatus = async (bookingId, newStatus) => {\r\n-  if (!window.confirm(`Are you sure you want to set status to \"${newStatus}\"?`)) {\r\n-    return;\r\n-  }\r\n-\r\n-  try {\r\n-    await axios.put(\r\n-      `http://localhost:3000/api/admin/bookings/${bookingId}/status`,\r\n-      { status: newStatus },\r\n+    setBookings([\r\n       {\r\n-        headers: {\r\n-          Authorization: `Bearer ${token}`,\r\n-        },\r\n-      }\r\n-    );\r\n-\r\n-    // Refresh bookings list\r\n-    const response = await axios.get(\"http://localhost:3000/api/admin/bookings\", {\r\n-      headers: {\r\n-        Authorization: `Bearer ${token}`,\r\n+        id: 1,\r\n+        client: \"John Doe\",\r\n+        babysitter: \"Jane Smith\",\r\n+        date: \"2024-08-15\",\r\n+        status: \"pending\",\r\n       },\r\n-    });\r\n-    setBookings(response.data);\r\n+    ]);\r\n \r\n-    alert(`Booking status updated to \"${newStatus}\".`);\r\n-  } catch (err) {\r\n-    console.error(\"Error updating status:\", err);\r\n-    alert(\"Failed to update booking status.\");\r\n-  }\r\n-};\r\n-// Function to delete a user or babysitter\r\n-const deleteUser = async (role, id) => {\r\n-  if (!window.confirm(`Are you sure you want to delete this ${role}? This action cannot be undone.`)) {\r\n-    return;\r\n-  }\r\n+    setUsers([\r\n+      { id: 1, name: \"John Doe\", email: \"john@example.com\", role: \"user\" },\r\n+      { id: 2, name: \"Jane Smith\", email: \"jane@example.com\", role: \"babysitter\" },\r\n+    ]);\r\n \r\n-  try {\r\n-    await axios.delete(`http://localhost:3000/api/admin/users/${role}/${id}`, {\r\n-      headers: {\r\n-        Authorization: `Bearer ${token}`,\r\n-      },\r\n-    });\r\n+    setLoading(false);\r\n+  }, []);\r\n \r\n-    // Refresh users list\r\n-    const response = await axios.get(\"http://localhost:3000/api/admin/users\", {\r\n-      headers: {\r\n-        Authorization: `Bearer ${token}`,\r\n-      },\r\n-    });\r\n-    setUsers(response.data);\r\n-\r\n-    alert(`${role} deleted successfully.`);\r\n-  } catch (err) {\r\n-    console.error(\"Error deleting user:\", err);\r\n-    alert(\"Failed to delete user.\");\r\n-  }\r\n-};\r\n-\r\n   if (loading) {\r\n     return (\r\n       <main className=\"flex items-center justify-center min-h-screen\">\r\n         <p className=\"text-gray-600\">Loading admin dashboard...</p>\r\n@@ -144,121 +49,94 @@\n     );\r\n   }\r\n \r\n   return (\r\n-    <main className=\"min-h-screen bg-gradient-to-br from-blue-50 to-purple-100 py-12 px-6\">\r\n-      <h1 className=\"text-3xl font-bold mb-8 text-center\">\r\n+    <main className=\"bg-gradient-to-br from-blue-50 to-purple-100 min-h-screen py-12 px-6\">\r\n+      <h1 className=\"text-3xl font-bold text-center mb-8\">\r\n         Admin Dashboard\r\n       </h1>\r\n \r\n       {/* Summary Cards */}\r\n-      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-10\">\r\n+      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\r\n         <div className=\"bg-white p-4 rounded shadow text-center\">\r\n-          <h2 className=\"text-xl font-semibold text-gray-800\">Clients</h2>\r\n-          <p className=\"text-3xl text-purple-600\">{summary.usersCount}</p>\r\n+          <p className=\"text-gray-500\">Clients</p>\r\n+          <p className=\"text-2xl font-bold\">{summary.users}</p>\r\n         </div>\r\n         <div className=\"bg-white p-4 rounded shadow text-center\">\r\n-          <h2 className=\"text-xl font-semibold text-gray-800\">Babysitters</h2>\r\n-          <p className=\"text-3xl text-purple-600\">{summary.babysittersCount}</p>\r\n+          <p className=\"text-gray-500\">Babysitters</p>\r\n+          <p className=\"text-2xl font-bold\">{summary.babysitters}</p>\r\n         </div>\r\n         <div className=\"bg-white p-4 rounded shadow text-center\">\r\n-          <h2 className=\"text-xl font-semibold text-gray-800\">Total Bookings</h2>\r\n-          <p className=\"text-3xl text-purple-600\">{summary.bookingsCount}</p>\r\n+          <p className=\"text-gray-500\">Total Bookings</p>\r\n+          <p className=\"text-2xl font-bold\">{summary.bookings}</p>\r\n         </div>\r\n         <div className=\"bg-white p-4 rounded shadow text-center\">\r\n-          <h2 className=\"text-xl font-semibold text-gray-800\">Pending Bookings</h2>\r\n-          <p className=\"text-3xl text-purple-600\">{summary.pendingBookings}</p>\r\n+          <p className=\"text-gray-500\">Pending Bookings</p>\r\n+          <p className=\"text-2xl font-bold\">{summary.pendingBookings}</p>\r\n         </div>\r\n       </div>\r\n \r\n-      \r\n-          {/* Bookings Table */}\r\n-            <div className=\"bg-white p-4 rounded shadow mb-8\">\r\n-              <h2 className=\"text-2xl font-semibold mb-4 text-gray-800\">All Bookings</h2>\r\n-              {bookings.length === 0 ? (\r\n-                <p className=\"text-gray-600\">No bookings found.</p>\r\n-              ) : (\r\n-                <div className=\"overflow-x-auto\">\r\n-                  <table className=\"min-w-full border\">\r\n-                    <thead>\r\n-                      <tr className=\"bg-purple-100\">\r\n-                        <th className=\"py-2 px-4 border\">ID</th>\r\n-                        <th className=\"py-2 px-4 border\">Client</th>\r\n-                        <th className=\"py-2 px-4 border\">Babysitter</th>\r\n-                        <th className=\"py-2 px-4 border\">Date</th>\r\n-                        <th className=\"py-2 px-4 border\">Status</th>\r\n-                        <th className=\"py-2 px-4 border\">Actions</th>\r\n-                      </tr>\r\n-                    </thead>\r\n-                    <tbody>\r\n-                      {bookings.map((booking) => (\r\n-                        <tr key={booking.id} className=\"hover:bg-purple-50\">\r\n-                          <td className=\"py-2 px-4 border\">{booking.id}</td>\r\n-                          <td className=\"py-2 px-4 border\">{booking.client_name}</td>\r\n-                          <td className=\"py-2 px-4 border\">{booking.babysitter_name}</td>\r\n-                          <td className=\"py-2 px-4 border\">\r\n-                            {new Date(booking.date).toLocaleDateString()}\r\n-                          </td>\r\n-                          <td className=\"py-2 px-4 border capitalize\">{booking.status}</td>\r\n-               <td className=\"py-2 px-4 border space-x-2\">\r\n-                            {booking.status !== \"approved\" && (\r\n-                              <button\r\n-                                onClick={() => updateBookingStatus(booking.id, \"approved\")}\r\n-                                className=\"bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded text-sm\"\r\n-                              >\r\n-                                Approve\r\n-                              </button>\r\n-                            )}\r\n-                            {booking.status !== \"cancelled\" && (\r\n-                              <button\r\n-                                onClick={() => updateBookingStatus(booking.id, \"cancelled\")}\r\n-                                className=\"bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-sm\"\r\n-                              >\r\n-                                Cancel\r\n-                              </button>\r\n-                            )}\r\n-              </td>\r\n+      {/* Bookings Table */}\r\n+      <h2 className=\"text-xl font-semibold mb-2\">Bookings</h2>\r\n+      <div className=\"overflow-x-auto mb-8\">\r\n+        <table className=\"min-w-full bg-white rounded shadow\">\r\n+          <thead>\r\n+            <tr>\r\n+              <th className=\"py-2 px-4 border-b\">Client</th>\r\n+              <th className=\"py-2 px-4 border-b\">Babysitter</th>\r\n+              <th className=\"py-2 px-4 border-b\">Date</th>\r\n+              <th className=\"py-2 px-4 border-b\">Status</th>\r\n+              <th className=\"py-2 px-4 border-b\">Actions</th>\r\n             </tr>\r\n-          ))}\r\n-        </tbody>\r\n-      </table>\r\n-    </div>\r\n-  )}\r\n-</div>\r\n+          </thead>\r\n+          <tbody>\r\n+            {bookings.map((booking) => (\r\n+              <tr key={booking.id}>\r\n+                <td className=\"py-2 px-4 border-b\">{booking.client}</td>\r\n+                <td className=\"py-2 px-4 border-b\">{booking.babysitter}</td>\r\n+                <td className=\"py-2 px-4 border-b\">{booking.date}</td>\r\n+                <td className=\"py-2 px-4 border-b capitalize\">{booking.status}</td>\r\n+                <td className=\"py-2 px-4 border-b\">\r\n+                  <button className=\"bg-green-500 text-white px-2 py-1 rounded mr-2\">\r\n+                    Approve\r\n+                  </button>\r\n+                  <button className=\"bg-red-500 text-white px-2 py-1 rounded\">\r\n+                    Cancel\r\n+                  </button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </table>\r\n+      </div>\r\n \r\n       {/* Users Table */}\r\n-      <div className=\"bg-white p-4 rounded shadow\">\r\n-        <h2 className=\"text-2xl font-semibold mb-4 text-gray-800\">All Users</h2>\r\n-        {users.length === 0 ? (\r\n-          <p className=\"text-gray-600\">No users found.</p>\r\n-        ) : (\r\n-          <div className=\"overflow-x-auto\">\r\n-            <table className=\"min-w-full border\">\r\n-              <thead>\r\n-                <tr className=\"bg-purple-100\">\r\n-                  <th className=\"py-2 px-4 border\">ID</th>\r\n-                  <th className=\"py-2 px-4 border\">Name</th>\r\n-                  <th className=\"py-2 px-4 border\">Email</th>\r\n-                  <th className=\"py-2 px-4 border\">Role</th>\r\n-                  <th className=\"py-2 px-4 border\">Created At</th>\r\n-                </tr>\r\n-              </thead>\r\n-              <tbody>\r\n-                {users.map((user) => (\r\n-                  <tr key={`${user.role}-${user.id}`} className=\"hover:bg-purple-50\">\r\n-                    <td className=\"py-2 px-4 border\">{user.id}</td>\r\n-                    <td className=\"py-2 px-4 border\">{user.name}</td>\r\n-                    <td className=\"py-2 px-4 border\">{user.email}</td>\r\n-                    <td className=\"py-2 px-4 border capitalize\">{user.role}</td>\r\n-                   <td className=\"py-2 px-4 border\">\r\n-                    {new Date(user.created_at).toLocaleDateString()}\r\n-                  </td>\r\n-                  </tr>\r\n-                ))}\r\n-              </tbody>\r\n-            </table>\r\n-          </div>\r\n-        )}\r\n+      <h2 className=\"text-xl font-semibold mb-2\">Users</h2>\r\n+      <div className=\"overflow-x-auto\">\r\n+        <table className=\"min-w-full bg-white rounded shadow\">\r\n+          <thead>\r\n+            <tr>\r\n+              <th className=\"py-2 px-4 border-b\">Name</th>\r\n+              <th className=\"py-2 px-4 border-b\">Email</th>\r\n+              <th className=\"py-2 px-4 border-b\">Role</th>\r\n+              <th className=\"py-2 px-4 border-b\">Actions</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {users.map((user) => (\r\n+              <tr key={user.id}>\r\n+                <td className=\"py-2 px-4 border-b\">{user.name}</td>\r\n+                <td className=\"py-2 px-4 border-b\">{user.email}</td>\r\n+                <td className=\"py-2 px-4 border-b capitalize\">{user.role}</td>\r\n+                <td className=\"py-2 px-4 border-b\">\r\n+                  <button className=\"bg-red-500 text-white px-2 py-1 rounded\">\r\n+                    Delete\r\n+                  </button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </table>\r\n       </div>\r\n     </main>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1751550175469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,142 @@\n-import React, { useEffect, useState } from \"react\";\r\n+import React, { useEffect, useState, useContext } from \"react\";\r\n+import { AuthContext } from \"../context/AuthContext\";\r\n import axios from \"axios\";\r\n \r\n const AdminDashboard = () => {\r\n+  const { token } = useContext(AuthContext);\r\n+\r\n+  // State for summary data\r\n   const [summary, setSummary] = useState({\r\n-    users: 0,\r\n-    babysitters: 0,\r\n-    bookings: 0,\r\n+    usersCount: 0,\r\n+    babysittersCount: 0,\r\n+    bookingsCount: 0,\r\n     pendingBookings: 0,\r\n   });\r\n \r\n+  // State for bookings list\r\n   const [bookings, setBookings] = useState([]);\r\n+\r\n+  // State for users list\r\n   const [users, setUsers] = useState([]);\r\n+\r\n+  // State for loading indicator\r\n   const [loading, setLoading] = useState(true);\r\n \r\n+  // Fetch summary data when component mounts\r\n   useEffect(() => {\r\n-    // Future: fetch data from API\r\n-    // For now, use mock data\r\n-    setSummary({\r\n-      users: 5,\r\n-      babysitters: 3,\r\n-      bookings: 12,\r\n-      pendingBookings: 2,\r\n-    });\r\n+    const fetchSummary = async () => {\r\n+      try {\r\n+        const response = await axios.get(\"http://localhost:3000/api/admin/summary\", {\r\n+          headers: {\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        });\r\n+        setSummary(response.data);\r\n+      } catch (err) {\r\n+        console.error(\"Error fetching summary:\", err);\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n \r\n-    setBookings([\r\n+    fetchSummary();\r\n+  }, [token]);\r\n+\r\n+  // Fetch bookings when component mounts\r\n+  useEffect(() => {\r\n+    const fetchBookings = async () => {\r\n+      try {\r\n+        const response = await axios.get(\"http://localhost:3000/api/admin/bookings\", {\r\n+          headers: {\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        });\r\n+        setBookings(response.data);\r\n+      } catch (err) {\r\n+        console.error(\"Error fetching bookings:\", err);\r\n+      }\r\n+    };\r\n+\r\n+    fetchBookings();\r\n+  }, [token]);\r\n+\r\n+  // Fetch users when component mounts\r\n+  useEffect(() => {\r\n+    const fetchUsers = async () => {\r\n+      try {\r\n+        const response = await axios.get(\"http://localhost:3000/api/admin/users\", {\r\n+          headers: {\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        });\r\n+        setUsers(response.data);\r\n+      } catch (err) {\r\n+        console.error(\"Error fetching users:\", err);\r\n+      }\r\n+    };\r\n+\r\n+    fetchUsers();\r\n+  }, [token]);\r\n+// Function to update booking status\r\n+const updateBookingStatus = async (bookingId, newStatus) => {\r\n+  if (!window.confirm(`Are you sure you want to set status to \"${newStatus}\"?`)) {\r\n+    return;\r\n+  }\r\n+\r\n+  try {\r\n+    await axios.put(\r\n+      `http://localhost:3000/api/admin/bookings/${bookingId}/status`,\r\n+      { status: newStatus },\r\n       {\r\n-        id: 1,\r\n-        client: \"John Doe\",\r\n-        babysitter: \"Jane Smith\",\r\n-        date: \"2024-08-15\",\r\n-        status: \"pending\",\r\n+        headers: {\r\n+          Authorization: `Bearer ${token}`,\r\n+        },\r\n+      }\r\n+    );\r\n+\r\n+    // Refresh bookings list\r\n+    const response = await axios.get(\"http://localhost:3000/api/admin/bookings\", {\r\n+      headers: {\r\n+        Authorization: `Bearer ${token}`,\r\n       },\r\n-    ]);\r\n+    });\r\n+    setBookings(response.data);\r\n \r\n-    setUsers([\r\n-      { id: 1, name: \"John Doe\", email: \"john@example.com\", role: \"user\" },\r\n-      { id: 2, name: \"Jane Smith\", email: \"jane@example.com\", role: \"babysitter\" },\r\n-    ]);\r\n+    alert(`Booking status updated to \"${newStatus}\".`);\r\n+  } catch (err) {\r\n+    console.error(\"Error updating status:\", err);\r\n+    alert(\"Failed to update booking status.\");\r\n+  }\r\n+};\r\n+// Function to delete a user or babysitter\r\n+const deleteUser = async (role, id) => {\r\n+  if (!window.confirm(`Are you sure you want to delete this ${role}? This action cannot be undone.`)) {\r\n+    return;\r\n+  }\r\n \r\n-    setLoading(false);\r\n-  }, []);\r\n+  try {\r\n+    await axios.delete(`http://localhost:3000/api/admin/users/${role}/${id}`, {\r\n+      headers: {\r\n+        Authorization: `Bearer ${token}`,\r\n+      },\r\n+    });\r\n \r\n+    // Refresh users list\r\n+    const response = await axios.get(\"http://localhost:3000/api/admin/users\", {\r\n+      headers: {\r\n+        Authorization: `Bearer ${token}`,\r\n+      },\r\n+    });\r\n+    setUsers(response.data);\r\n+\r\n+    alert(`${role} deleted successfully.`);\r\n+  } catch (err) {\r\n+    console.error(\"Error deleting user:\", err);\r\n+    alert(\"Failed to delete user.\");\r\n+  }\r\n+};\r\n+\r\n   if (loading) {\r\n     return (\r\n       <main className=\"flex items-center justify-center min-h-screen\">\r\n         <p className=\"text-gray-600\">Loading admin dashboard...</p>\r\n@@ -49,94 +144,121 @@\n     );\r\n   }\r\n \r\n   return (\r\n-    <main className=\"bg-gradient-to-br from-blue-50 to-purple-100 min-h-screen py-12 px-6\">\r\n-      <h1 className=\"text-3xl font-bold text-center mb-8\">\r\n+    <main className=\"min-h-screen bg-gradient-to-br from-blue-50 to-purple-100 py-12 px-6\">\r\n+      <h1 className=\"text-3xl font-bold mb-8 text-center\">\r\n         Admin Dashboard\r\n       </h1>\r\n \r\n       {/* Summary Cards */}\r\n-      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\r\n+      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-10\">\r\n         <div className=\"bg-white p-4 rounded shadow text-center\">\r\n-          <p className=\"text-gray-500\">Clients</p>\r\n-          <p className=\"text-2xl font-bold\">{summary.users}</p>\r\n+          <h2 className=\"text-xl font-semibold text-gray-800\">Clients</h2>\r\n+          <p className=\"text-3xl text-purple-600\">{summary.usersCount}</p>\r\n         </div>\r\n         <div className=\"bg-white p-4 rounded shadow text-center\">\r\n-          <p className=\"text-gray-500\">Babysitters</p>\r\n-          <p className=\"text-2xl font-bold\">{summary.babysitters}</p>\r\n+          <h2 className=\"text-xl font-semibold text-gray-800\">Babysitters</h2>\r\n+          <p className=\"text-3xl text-purple-600\">{summary.babysittersCount}</p>\r\n         </div>\r\n         <div className=\"bg-white p-4 rounded shadow text-center\">\r\n-          <p className=\"text-gray-500\">Total Bookings</p>\r\n-          <p className=\"text-2xl font-bold\">{summary.bookings}</p>\r\n+          <h2 className=\"text-xl font-semibold text-gray-800\">Total Bookings</h2>\r\n+          <p className=\"text-3xl text-purple-600\">{summary.bookingsCount}</p>\r\n         </div>\r\n         <div className=\"bg-white p-4 rounded shadow text-center\">\r\n-          <p className=\"text-gray-500\">Pending Bookings</p>\r\n-          <p className=\"text-2xl font-bold\">{summary.pendingBookings}</p>\r\n+          <h2 className=\"text-xl font-semibold text-gray-800\">Pending Bookings</h2>\r\n+          <p className=\"text-3xl text-purple-600\">{summary.pendingBookings}</p>\r\n         </div>\r\n       </div>\r\n \r\n-      {/* Bookings Table */}\r\n-      <h2 className=\"text-xl font-semibold mb-2\">Bookings</h2>\r\n-      <div className=\"overflow-x-auto mb-8\">\r\n-        <table className=\"min-w-full bg-white rounded shadow\">\r\n-          <thead>\r\n-            <tr>\r\n-              <th className=\"py-2 px-4 border-b\">Client</th>\r\n-              <th className=\"py-2 px-4 border-b\">Babysitter</th>\r\n-              <th className=\"py-2 px-4 border-b\">Date</th>\r\n-              <th className=\"py-2 px-4 border-b\">Status</th>\r\n-              <th className=\"py-2 px-4 border-b\">Actions</th>\r\n+      \r\n+          {/* Bookings Table */}\r\n+            <div className=\"bg-white p-4 rounded shadow mb-8\">\r\n+              <h2 className=\"text-2xl font-semibold mb-4 text-gray-800\">All Bookings</h2>\r\n+              {bookings.length === 0 ? (\r\n+                <p className=\"text-gray-600\">No bookings found.</p>\r\n+              ) : (\r\n+                <div className=\"overflow-x-auto\">\r\n+                  <table className=\"min-w-full border\">\r\n+                    <thead>\r\n+                      <tr className=\"bg-purple-100\">\r\n+                        <th className=\"py-2 px-4 border\">ID</th>\r\n+                        <th className=\"py-2 px-4 border\">Client</th>\r\n+                        <th className=\"py-2 px-4 border\">Babysitter</th>\r\n+                        <th className=\"py-2 px-4 border\">Date</th>\r\n+                        <th className=\"py-2 px-4 border\">Status</th>\r\n+                        <th className=\"py-2 px-4 border\">Actions</th>\r\n+                      </tr>\r\n+                    </thead>\r\n+                    <tbody>\r\n+                      {bookings.map((booking) => (\r\n+                        <tr key={booking.id} className=\"hover:bg-purple-50\">\r\n+                          <td className=\"py-2 px-4 border\">{booking.id}</td>\r\n+                          <td className=\"py-2 px-4 border\">{booking.client_name}</td>\r\n+                          <td className=\"py-2 px-4 border\">{booking.babysitter_name}</td>\r\n+                          <td className=\"py-2 px-4 border\">\r\n+                            {new Date(booking.date).toLocaleDateString()}\r\n+                          </td>\r\n+                          <td className=\"py-2 px-4 border capitalize\">{booking.status}</td>\r\n+               <td className=\"py-2 px-4 border space-x-2\">\r\n+                            {booking.status !== \"approved\" && (\r\n+                              <button\r\n+                                onClick={() => updateBookingStatus(booking.id, \"approved\")}\r\n+                                className=\"bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded text-sm\"\r\n+                              >\r\n+                                Approve\r\n+                              </button>\r\n+                            )}\r\n+                            {booking.status !== \"cancelled\" && (\r\n+                              <button\r\n+                                onClick={() => updateBookingStatus(booking.id, \"cancelled\")}\r\n+                                className=\"bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-sm\"\r\n+                              >\r\n+                                Cancel\r\n+                              </button>\r\n+                            )}\r\n+              </td>\r\n             </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {bookings.map((booking) => (\r\n-              <tr key={booking.id}>\r\n-                <td className=\"py-2 px-4 border-b\">{booking.client}</td>\r\n-                <td className=\"py-2 px-4 border-b\">{booking.babysitter}</td>\r\n-                <td className=\"py-2 px-4 border-b\">{booking.date}</td>\r\n-                <td className=\"py-2 px-4 border-b capitalize\">{booking.status}</td>\r\n-                <td className=\"py-2 px-4 border-b\">\r\n-                  <button className=\"bg-green-500 text-white px-2 py-1 rounded mr-2\">\r\n-                    Approve\r\n-                  </button>\r\n-                  <button className=\"bg-red-500 text-white px-2 py-1 rounded\">\r\n-                    Cancel\r\n-                  </button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </table>\r\n-      </div>\r\n+          ))}\r\n+        </tbody>\r\n+      </table>\r\n+    </div>\r\n+  )}\r\n+</div>\r\n \r\n       {/* Users Table */}\r\n-      <h2 className=\"text-xl font-semibold mb-2\">Users</h2>\r\n-      <div className=\"overflow-x-auto\">\r\n-        <table className=\"min-w-full bg-white rounded shadow\">\r\n-          <thead>\r\n-            <tr>\r\n-              <th className=\"py-2 px-4 border-b\">Name</th>\r\n-              <th className=\"py-2 px-4 border-b\">Email</th>\r\n-              <th className=\"py-2 px-4 border-b\">Role</th>\r\n-              <th className=\"py-2 px-4 border-b\">Actions</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {users.map((user) => (\r\n-              <tr key={user.id}>\r\n-                <td className=\"py-2 px-4 border-b\">{user.name}</td>\r\n-                <td className=\"py-2 px-4 border-b\">{user.email}</td>\r\n-                <td className=\"py-2 px-4 border-b capitalize\">{user.role}</td>\r\n-                <td className=\"py-2 px-4 border-b\">\r\n-                  <button className=\"bg-red-500 text-white px-2 py-1 rounded\">\r\n-                    Delete\r\n-                  </button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </table>\r\n+      <div className=\"bg-white p-4 rounded shadow\">\r\n+        <h2 className=\"text-2xl font-semibold mb-4 text-gray-800\">All Users</h2>\r\n+        {users.length === 0 ? (\r\n+          <p className=\"text-gray-600\">No users found.</p>\r\n+        ) : (\r\n+          <div className=\"overflow-x-auto\">\r\n+            <table className=\"min-w-full border\">\r\n+              <thead>\r\n+                <tr className=\"bg-purple-100\">\r\n+                  <th className=\"py-2 px-4 border\">ID</th>\r\n+                  <th className=\"py-2 px-4 border\">Name</th>\r\n+                  <th className=\"py-2 px-4 border\">Email</th>\r\n+                  <th className=\"py-2 px-4 border\">Role</th>\r\n+                  <th className=\"py-2 px-4 border\">Created At</th>\r\n+                </tr>\r\n+              </thead>\r\n+              <tbody>\r\n+                {users.map((user) => (\r\n+                  <tr key={`${user.role}-${user.id}`} className=\"hover:bg-purple-50\">\r\n+                    <td className=\"py-2 px-4 border\">{user.id}</td>\r\n+                    <td className=\"py-2 px-4 border\">{user.name}</td>\r\n+                    <td className=\"py-2 px-4 border\">{user.email}</td>\r\n+                    <td className=\"py-2 px-4 border capitalize\">{user.role}</td>\r\n+                   <td className=\"py-2 px-4 border\">\r\n+                    {new Date(user.created_at).toLocaleDateString()}\r\n+                  </td>\r\n+                  </tr>\r\n+                ))}\r\n+              </tbody>\r\n+            </table>\r\n+          </div>\r\n+        )}\r\n       </div>\r\n     </main>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1751550591364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,67 +76,97 @@\n     };\r\n \r\n     fetchUsers();\r\n   }, [token]);\r\n-// Function to update booking status\r\n-const updateBookingStatus = async (bookingId, newStatus) => {\r\n-  if (!window.confirm(`Are you sure you want to set status to \"${newStatus}\"?`)) {\r\n-    return;\r\n-  }\r\n \r\n-  try {\r\n-    await axios.put(\r\n-      `http://localhost:3000/api/admin/bookings/${bookingId}/status`,\r\n-      { status: newStatus },\r\n-      {\r\n+  // Function to update booking status\r\n+  const updateBookingStatus = async (bookingId, newStatus) => {\r\n+    if (!window.confirm(`Are you sure you want to set status to \"${newStatus}\"?`)) {\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      await axios.put(\r\n+        `http://localhost:3000/api/admin/bookings/${bookingId}/status`,\r\n+        { status: newStatus },\r\n+        {\r\n+          headers: {\r\n+            Authorization: `Bearer ${token}`,\r\n+          },\r\n+        }\r\n+      );\r\n+\r\n+      // Refresh bookings list\r\n+      const response = await axios.get(\"http://localhost:3000/api/admin/bookings\", {\r\n         headers: {\r\n           Authorization: `Bearer ${token}`,\r\n         },\r\n-      }\r\n-    );\r\n+      });\r\n+      setBookings(response.data);\r\n \r\n-    // Refresh bookings list\r\n-    const response = await axios.get(\"http://localhost:3000/api/admin/bookings\", {\r\n-      headers: {\r\n-        Authorization: `Bearer ${token}`,\r\n-      },\r\n-    });\r\n-    setBookings(response.data);\r\n+      alert(`Booking status updated to \"${newStatus}\".`);\r\n+    } catch (err) {\r\n+      console.error(\"Error updating status:\", err);\r\n+      alert(\"Failed to update booking status.\");\r\n+    }\r\n+  };\r\n \r\n-    alert(`Booking status updated to \"${newStatus}\".`);\r\n-  } catch (err) {\r\n-    console.error(\"Error updating status:\", err);\r\n-    alert(\"Failed to update booking status.\");\r\n-  }\r\n-};\r\n-// Function to delete a user or babysitter\r\n-const deleteUser = async (role, id) => {\r\n-  if (!window.confirm(`Are you sure you want to delete this ${role}? This action cannot be undone.`)) {\r\n-    return;\r\n-  }\r\n+  // Function to delete a booking\r\n+  const deleteBooking = async (bookingId) => {\r\n+    if (!window.confirm(\"Are you sure you want to delete this booking?\")) {\r\n+      return;\r\n+    }\r\n \r\n-  try {\r\n-    await axios.delete(`http://localhost:3000/api/admin/users/${role}/${id}`, {\r\n-      headers: {\r\n-        Authorization: `Bearer ${token}`,\r\n-      },\r\n-    });\r\n+    try {\r\n+      await axios.delete(`http://localhost:3000/api/bookings/${bookingId}`, {\r\n+        headers: {\r\n+          Authorization: `Bearer ${token}`,\r\n+        },\r\n+      });\r\n \r\n-    // Refresh users list\r\n-    const response = await axios.get(\"http://localhost:3000/api/admin/users\", {\r\n-      headers: {\r\n-        Authorization: `Bearer ${token}`,\r\n-      },\r\n-    });\r\n-    setUsers(response.data);\r\n+      // Refresh bookings list\r\n+      const response = await axios.get(\"http://localhost:3000/api/admin/bookings\", {\r\n+        headers: {\r\n+          Authorization: `Bearer ${token}`,\r\n+        },\r\n+      });\r\n+      setBookings(response.data);\r\n \r\n-    alert(`${role} deleted successfully.`);\r\n-  } catch (err) {\r\n-    console.error(\"Error deleting user:\", err);\r\n-    alert(\"Failed to delete user.\");\r\n-  }\r\n-};\r\n+      alert(\"Booking deleted successfully.\");\r\n+    } catch (err) {\r\n+      console.error(\"Error deleting booking:\", err);\r\n+      alert(\"Failed to delete booking.\");\r\n+    }\r\n+  };\r\n \r\n+  // Function to delete a user or babysitter\r\n+  const deleteUser = async (role, id) => {\r\n+    if (!window.confirm(`Are you sure you want to delete this ${role}? This action cannot be undone.`)) {\r\n+      return;\r\n+    }\r\n+\r\n+    try {\r\n+      await axios.delete(`http://localhost:3000/api/admin/users/${role}/${id}`, {\r\n+        headers: {\r\n+          Authorization: `Bearer ${token}`,\r\n+        },\r\n+      });\r\n+\r\n+      // Refresh users list\r\n+      const response = await axios.get(\"http://localhost:3000/api/admin/users\", {\r\n+        headers: {\r\n+          Authorization: `Bearer ${token}`,\r\n+        },\r\n+      });\r\n+      setUsers(response.data);\r\n+\r\n+      alert(`${role} deleted successfully.`);\r\n+    } catch (err) {\r\n+      console.error(\"Error deleting user:\", err);\r\n+      alert(\"Failed to delete user.\");\r\n+    }\r\n+  };\r\n+\r\n   if (loading) {\r\n     return (\r\n       <main className=\"flex items-center justify-center min-h-screen\">\r\n         <p className=\"text-gray-600\">Loading admin dashboard...</p>\r\n@@ -169,62 +199,63 @@\n           <p className=\"text-3xl text-purple-600\">{summary.pendingBookings}</p>\r\n         </div>\r\n       </div>\r\n \r\n-      \r\n-          {/* Bookings Table */}\r\n-            <div className=\"bg-white p-4 rounded shadow mb-8\">\r\n-              <h2 className=\"text-2xl font-semibold mb-4 text-gray-800\">All Bookings</h2>\r\n-              {bookings.length === 0 ? (\r\n-                <p className=\"text-gray-600\">No bookings found.</p>\r\n-              ) : (\r\n-                <div className=\"overflow-x-auto\">\r\n-                  <table className=\"min-w-full border\">\r\n-                    <thead>\r\n-                      <tr className=\"bg-purple-100\">\r\n-                        <th className=\"py-2 px-4 border\">ID</th>\r\n-                        <th className=\"py-2 px-4 border\">Client</th>\r\n-                        <th className=\"py-2 px-4 border\">Babysitter</th>\r\n-                        <th className=\"py-2 px-4 border\">Date</th>\r\n-                        <th className=\"py-2 px-4 border\">Status</th>\r\n-                        <th className=\"py-2 px-4 border\">Actions</th>\r\n-                      </tr>\r\n-                    </thead>\r\n-                    <tbody>\r\n-                      {bookings.map((booking) => (\r\n-                        <tr key={booking.id} className=\"hover:bg-purple-50\">\r\n-                          <td className=\"py-2 px-4 border\">{booking.id}</td>\r\n-                          <td className=\"py-2 px-4 border\">{booking.client_name}</td>\r\n-                          <td className=\"py-2 px-4 border\">{booking.babysitter_name}</td>\r\n-                          <td className=\"py-2 px-4 border\">\r\n-                            {new Date(booking.date).toLocaleDateString()}\r\n-                          </td>\r\n-                          <td className=\"py-2 px-4 border capitalize\">{booking.status}</td>\r\n-               <td className=\"py-2 px-4 border space-x-2\">\r\n-                            {booking.status !== \"approved\" && (\r\n-                              <button\r\n-                                onClick={() => updateBookingStatus(booking.id, \"approved\")}\r\n-                                className=\"bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded text-sm\"\r\n-                              >\r\n-                                Approve\r\n-                              </button>\r\n-                            )}\r\n-                            {booking.status !== \"cancelled\" && (\r\n-                              <button\r\n-                                onClick={() => updateBookingStatus(booking.id, \"cancelled\")}\r\n-                                className=\"bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-sm\"\r\n-                              >\r\n-                                Cancel\r\n-                              </button>\r\n-                            )}\r\n-              </td>\r\n-            </tr>\r\n-          ))}\r\n-        </tbody>\r\n-      </table>\r\n-    </div>\r\n-  )}\r\n-</div>\r\n+      {/* Bookings Table */}\r\n+      <div className=\"bg-white p-4 rounded shadow mb-8\">\r\n+        <h2 className=\"text-2xl font-semibold mb-4 text-gray-800\">All Bookings</h2>\r\n+        {bookings.length === 0 ? (\r\n+          <p className=\"text-gray-600\">No bookings found.</p>\r\n+        ) : (\r\n+          <div className=\"overflow-x-auto\">\r\n+            <table className=\"min-w-full border\">\r\n+              <thead>\r\n+                <tr className=\"bg-purple-100\">\r\n+                  <th className=\"py-2 px-4 border\">ID</th>\r\n+                  <th className=\"py-2 px-4 border\">Client</th>\r\n+                  <th className=\"py-2 px-4 border\">Babysitter</th>\r\n+                  <th className=\"py-2 px-4 border\">Date</th>\r\n+                  <th className=\"py-2 px-4 border\">Status</th>\r\n+                  <th className=\"py-2 px-4 border\">Actions</th>\r\n+                </tr>\r\n+              </thead>\r\n+              <tbody>\r\n+                {bookings.map((booking) => (\r\n+                  <tr key={booking.id} className=\"hover:bg-purple-50\">\r\n+                    <td className=\"py-2 px-4 border\">{booking.id}</td>\r\n+                    <td className=\"py-2 px-4 border\">{booking.client_name}</td>\r\n+                    <td className=\"py-2 px-4 border\">{booking.babysitter_name}</td>\r\n+                    <td className=\"py-2 px-4 border\">\r\n+                      {new Date(booking.date).toLocaleDateString()}\r\n+                    </td>\r\n+                    <td className=\"py-2 px-4 border capitalize\">{booking.status}</td>\r\n+                    <td className=\"py-2 px-4 border space-x-2\">\r\n+                      <button\r\n+                        onClick={() => updateBookingStatus(booking.id, \"approved\")}\r\n+                        className=\"bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded text-sm\"\r\n+                      >\r\n+                        Approve\r\n+                      </button>\r\n+                      <button\r\n+                        onClick={() => updateBookingStatus(booking.id, \"cancelled\")}\r\n+                        className=\"bg-yellow-500 hover:bg-yellow-600 text-white px-2 py-1 rounded text-sm\"\r\n+                      >\r\n+                        Cancel\r\n+                      </button>\r\n+                      <button\r\n+                        onClick={() => deleteBooking(booking.id)}\r\n+                        className=\"bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-sm\"\r\n+                      >\r\n+                        Delete\r\n+                      </button>\r\n+                    </td>\r\n+                  </tr>\r\n+                ))}\r\n+              </tbody>\r\n+            </table>\r\n+          </div>\r\n+        )}\r\n+      </div>\r\n \r\n       {/* Users Table */}\r\n       <div className=\"bg-white p-4 rounded shadow\">\r\n         <h2 className=\"text-2xl font-semibold mb-4 text-gray-800\">All Users</h2>\r\n@@ -239,8 +270,9 @@\n                   <th className=\"py-2 px-4 border\">Name</th>\r\n                   <th className=\"py-2 px-4 border\">Email</th>\r\n                   <th className=\"py-2 px-4 border\">Role</th>\r\n                   <th className=\"py-2 px-4 border\">Created At</th>\r\n+                  <th className=\"py-2 px-4 border\">Actions</th>\r\n                 </tr>\r\n               </thead>\r\n               <tbody>\r\n                 {users.map((user) => (\r\n@@ -248,11 +280,19 @@\n                     <td className=\"py-2 px-4 border\">{user.id}</td>\r\n                     <td className=\"py-2 px-4 border\">{user.name}</td>\r\n                     <td className=\"py-2 px-4 border\">{user.email}</td>\r\n                     <td className=\"py-2 px-4 border capitalize\">{user.role}</td>\r\n-                   <td className=\"py-2 px-4 border\">\r\n-                    {new Date(user.created_at).toLocaleDateString()}\r\n-                  </td>\r\n+                    <td className=\"py-2 px-4 border\">\r\n+                      {new Date(user.created_at).toLocaleDateString()}\r\n+                    </td>\r\n+                    <td className=\"py-2 px-4 border\">\r\n+                      <button\r\n+                        onClick={() => deleteUser(user.role, user.id)}\r\n+                        className=\"bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-sm\"\r\n+                      >\r\n+                        Delete\r\n+                      </button>\r\n+                    </td>\r\n                   </tr>\r\n                 ))}\r\n               </tbody>\r\n             </table>\r\n"
                },
                {
                    "date": 1751550952723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,16 @@\n \r\n   // State for loading indicator\r\n   const [loading, setLoading] = useState(true);\r\n \r\n+  // State for confirm modal\r\n+const [confirmModal, setConfirmModal] = useState({\r\n+  visible: false,\r\n+  title: \"\",\r\n+  message: \"\",\r\n+  onConfirm: () => {},\r\n+});\r\n+\r\n   // Fetch summary data when component mounts\r\n   useEffect(() => {\r\n     const fetchSummary = async () => {\r\n       try {\r\n"
                },
                {
                    "date": 1751551027361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,8 +172,33 @@\n       console.error(\"Error deleting user:\", err);\r\n       alert(\"Failed to delete user.\");\r\n     }\r\n   };\r\n+  {confirmModal.visible && (\r\n+    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n+      <div className=\"bg-white rounded-lg p-6 w-full max-w-md shadow-xl text-center\">\r\n+        <h2 className=\"text-xl font-semibold mb-2 text-gray-800\">{confirmModal.title}</h2>\r\n+        <p className=\"text-gray-600 mb-4\">{confirmModal.message}</p>\r\n+        <div className=\"flex justify-center space-x-4\">\r\n+          <button\r\n+            onClick={() => setConfirmModal({ visible: false })}\r\n+            className=\"px-4 py-2 bg-gray-300 hover:bg-gray-400 rounded\"\r\n+          >\r\n+            Cancel\r\n+          </button>\r\n+          <button\r\n+            onClick={() => {\r\n+              confirmModal.onConfirm();\r\n+              setConfirmModal({ visible: false });\r\n+            }}\r\n+            className=\"px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded\"\r\n+          >\r\n+            Confirm\r\n+          </button>\r\n+        </div>\r\n+      </div>\r\n+    </div>\r\n+  )}\r\n \r\n   if (loading) {\r\n     return (\r\n       <main className=\"flex items-center justify-center min-h-screen\">\r\n"
                },
                {
                    "date": 1751551097688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -262,14 +262,21 @@\n                     </td>\r\n                     <td className=\"py-2 px-4 border capitalize\">{booking.status}</td>\r\n                     <td className=\"py-2 px-4 border space-x-2\">\r\n                       <button\r\n-                        onClick={() => updateBookingStatus(booking.id, \"approved\")}\r\n+                        onClick={() =>\r\n+                          setConfirmModal({\r\n+                            visible: true,\r\n+                            title: \"Approve Booking\",\r\n+                            message: \"Are you sure you want to approve this booking?\",\r\n+                            onConfirm: () => updateBookingStatus(booking.id, \"approved\"),\r\n+                          })\r\n+                        }\r\n                         className=\"bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded text-sm\"\r\n                       >\r\n                         Approve\r\n                       </button>\r\n-                      <button\r\n+\r\n                         onClick={() => updateBookingStatus(booking.id, \"cancelled\")}\r\n                         className=\"bg-yellow-500 hover:bg-yellow-600 text-white px-2 py-1 rounded text-sm\"\r\n                       >\r\n                         Cancel\r\n"
                },
                {
                    "date": 1751551138072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,18 +265,19 @@\n                       <button\r\n                         onClick={() =>\r\n                           setConfirmModal({\r\n                             visible: true,\r\n-                            title: \"Approve Booking\",\r\n-                            message: \"Are you sure you want to approve this booking?\",\r\n-                            onConfirm: () => updateBookingStatus(booking.id, \"approved\"),\r\n+                            title: \"Cancel Booking\",\r\n+                            message: \"Are you sure you want to cancel this booking?\",\r\n+                            onConfirm: () => updateBookingStatus(booking.id, \"cancelled\"),\r\n                           })\r\n                         }\r\n-                        className=\"bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded text-sm\"\r\n+                        className=\"bg-yellow-500 hover:bg-yellow-600 text-white px-2 py-1 rounded text-sm\"\r\n                       >\r\n-                        Approve\r\n+                        Cancel\r\n                       </button>\r\n \r\n+                      <button\r\n                         onClick={() => updateBookingStatus(booking.id, \"cancelled\")}\r\n                         className=\"bg-yellow-500 hover:bg-yellow-600 text-white px-2 py-1 rounded text-sm\"\r\n                       >\r\n                         Cancel\r\n"
                },
                {
                    "date": 1751551174573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,16 +265,16 @@\n                       <button\r\n                         onClick={() =>\r\n                           setConfirmModal({\r\n                             visible: true,\r\n-                            title: \"Cancel Booking\",\r\n-                            message: \"Are you sure you want to cancel this booking?\",\r\n-                            onConfirm: () => updateBookingStatus(booking.id, \"cancelled\"),\r\n+                            title: \"Approve Booking\",\r\n+                            message: \"Are you sure you want to approve this booking?\",\r\n+                            onConfirm: () => updateBookingStatus(booking.id, \"approved\"),\r\n                           })\r\n                         }\r\n-                        className=\"bg-yellow-500 hover:bg-yellow-600 text-white px-2 py-1 rounded text-sm\"\r\n+                        className=\"bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded text-sm\"\r\n                       >\r\n-                        Cancel\r\n+                        Approve\r\n                       </button>\r\n \r\n                       <button\r\n                         onClick={() => updateBookingStatus(booking.id, \"cancelled\")}\r\n"
                },
                {
                    "date": 1751551201642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -276,13 +276,21 @@\n                         Approve\r\n                       </button>\r\n \r\n                       <button\r\n-                        onClick={() => updateBookingStatus(booking.id, \"cancelled\")}\r\n+                        onClick={() =>\r\n+                          setConfirmModal({\r\n+                            visible: true,\r\n+                            title: \"Cancel Booking\",\r\n+                            message: \"Are you sure you want to cancel this booking?\",\r\n+                            onConfirm: () => updateBookingStatus(booking.id, \"cancelled\"),\r\n+                          })\r\n+                        }\r\n                         className=\"bg-yellow-500 hover:bg-yellow-600 text-white px-2 py-1 rounded text-sm\"\r\n                       >\r\n                         Cancel\r\n                       </button>\r\n+\r\n                       <button\r\n                         onClick={() => deleteBooking(booking.id)}\r\n                         className=\"bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-sm\"\r\n                       >\r\n"
                },
                {
                    "date": 1751551226246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -290,13 +290,21 @@\n                         Cancel\r\n                       </button>\r\n \r\n                       <button\r\n-                        onClick={() => deleteBooking(booking.id)}\r\n+                        onClick={() =>\r\n+                          setConfirmModal({\r\n+                            visible: true,\r\n+                            title: \"Delete Booking\",\r\n+                            message: \"Are you sure you want to delete this booking?\",\r\n+                            onConfirm: () => deleteBooking(booking.id),\r\n+                          })\r\n+                        }\r\n                         className=\"bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-sm\"\r\n                       >\r\n                         Delete\r\n                       </button>\r\n+\r\n                     </td>\r\n                   </tr>\r\n                 ))}\r\n               </tbody>\r\n"
                },
                {
                    "date": 1751551250924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -342,13 +342,21 @@\n                       {new Date(user.created_at).toLocaleDateString()}\r\n                     </td>\r\n                     <td className=\"py-2 px-4 border\">\r\n                       <button\r\n-                        onClick={() => deleteUser(user.role, user.id)}\r\n+                        onClick={() =>\r\n+                          setConfirmModal({\r\n+                            visible: true,\r\n+                            title: \"Delete User\",\r\n+                            message: `Are you sure you want to delete this ${user.role}?`,\r\n+                            onConfirm: () => deleteUser(user.role, user.id),\r\n+                          })\r\n+                        }\r\n                         className=\"bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-sm\"\r\n                       >\r\n                         Delete\r\n                       </button>\r\n+\r\n                     </td>\r\n                   </tr>\r\n                 ))}\r\n               </tbody>\r\n"
                },
                {
                    "date": 1751551453438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,183 +22,115 @@\n   // State for loading indicator\r\n   const [loading, setLoading] = useState(true);\r\n \r\n   // State for confirm modal\r\n-const [confirmModal, setConfirmModal] = useState({\r\n-  visible: false,\r\n-  title: \"\",\r\n-  message: \"\",\r\n-  onConfirm: () => {},\r\n-});\r\n+  const [confirmModal, setConfirmModal] = useState({\r\n+    visible: false,\r\n+    title: \"\",\r\n+    message: \"\",\r\n+    onConfirm: () => {},\r\n+  });\r\n \r\n   // Fetch summary data when component mounts\r\n   useEffect(() => {\r\n     const fetchSummary = async () => {\r\n       try {\r\n         const response = await axios.get(\"http://localhost:3000/api/admin/summary\", {\r\n-          headers: {\r\n-            Authorization: `Bearer ${token}`,\r\n-          },\r\n+          headers: { Authorization: `Bearer ${token}` },\r\n         });\r\n         setSummary(response.data);\r\n       } catch (err) {\r\n         console.error(\"Error fetching summary:\", err);\r\n       } finally {\r\n         setLoading(false);\r\n       }\r\n     };\r\n-\r\n     fetchSummary();\r\n   }, [token]);\r\n \r\n   // Fetch bookings when component mounts\r\n   useEffect(() => {\r\n     const fetchBookings = async () => {\r\n       try {\r\n         const response = await axios.get(\"http://localhost:3000/api/admin/bookings\", {\r\n-          headers: {\r\n-            Authorization: `Bearer ${token}`,\r\n-          },\r\n+          headers: { Authorization: `Bearer ${token}` },\r\n         });\r\n         setBookings(response.data);\r\n       } catch (err) {\r\n         console.error(\"Error fetching bookings:\", err);\r\n       }\r\n     };\r\n-\r\n     fetchBookings();\r\n   }, [token]);\r\n \r\n   // Fetch users when component mounts\r\n   useEffect(() => {\r\n     const fetchUsers = async () => {\r\n       try {\r\n         const response = await axios.get(\"http://localhost:3000/api/admin/users\", {\r\n-          headers: {\r\n-            Authorization: `Bearer ${token}`,\r\n-          },\r\n+          headers: { Authorization: `Bearer ${token}` },\r\n         });\r\n         setUsers(response.data);\r\n       } catch (err) {\r\n         console.error(\"Error fetching users:\", err);\r\n       }\r\n     };\r\n-\r\n     fetchUsers();\r\n   }, [token]);\r\n \r\n   // Function to update booking status\r\n   const updateBookingStatus = async (bookingId, newStatus) => {\r\n-    if (!window.confirm(`Are you sure you want to set status to \"${newStatus}\"?`)) {\r\n-      return;\r\n-    }\r\n-\r\n     try {\r\n       await axios.put(\r\n         `http://localhost:3000/api/admin/bookings/${bookingId}/status`,\r\n         { status: newStatus },\r\n-        {\r\n-          headers: {\r\n-            Authorization: `Bearer ${token}`,\r\n-          },\r\n-        }\r\n+        { headers: { Authorization: `Bearer ${token}` } }\r\n       );\r\n-\r\n-      // Refresh bookings list\r\n-      const response = await axios.get(\"http://localhost:3000/api/admin/bookings\", {\r\n-        headers: {\r\n-          Authorization: `Bearer ${token}`,\r\n-        },\r\n+      // Refresh bookings\r\n+      const res = await axios.get(\"http://localhost:3000/api/admin/bookings\", {\r\n+        headers: { Authorization: `Bearer ${token}` },\r\n       });\r\n-      setBookings(response.data);\r\n-\r\n+      setBookings(res.data);\r\n       alert(`Booking status updated to \"${newStatus}\".`);\r\n     } catch (err) {\r\n       console.error(\"Error updating status:\", err);\r\n       alert(\"Failed to update booking status.\");\r\n     }\r\n   };\r\n \r\n-  // Function to delete a booking\r\n+  // Function to delete booking\r\n   const deleteBooking = async (bookingId) => {\r\n-    if (!window.confirm(\"Are you sure you want to delete this booking?\")) {\r\n-      return;\r\n-    }\r\n-\r\n     try {\r\n       await axios.delete(`http://localhost:3000/api/bookings/${bookingId}`, {\r\n-        headers: {\r\n-          Authorization: `Bearer ${token}`,\r\n-        },\r\n+        headers: { Authorization: `Bearer ${token}` },\r\n       });\r\n-\r\n-      // Refresh bookings list\r\n-      const response = await axios.get(\"http://localhost:3000/api/admin/bookings\", {\r\n-        headers: {\r\n-          Authorization: `Bearer ${token}`,\r\n-        },\r\n+      const res = await axios.get(\"http://localhost:3000/api/admin/bookings\", {\r\n+        headers: { Authorization: `Bearer ${token}` },\r\n       });\r\n-      setBookings(response.data);\r\n-\r\n+      setBookings(res.data);\r\n       alert(\"Booking deleted successfully.\");\r\n     } catch (err) {\r\n       console.error(\"Error deleting booking:\", err);\r\n       alert(\"Failed to delete booking.\");\r\n     }\r\n   };\r\n \r\n-  // Function to delete a user or babysitter\r\n+  // Function to delete user\r\n   const deleteUser = async (role, id) => {\r\n-    if (!window.confirm(`Are you sure you want to delete this ${role}? This action cannot be undone.`)) {\r\n-      return;\r\n-    }\r\n-\r\n     try {\r\n       await axios.delete(`http://localhost:3000/api/admin/users/${role}/${id}`, {\r\n-        headers: {\r\n-          Authorization: `Bearer ${token}`,\r\n-        },\r\n+        headers: { Authorization: `Bearer ${token}` },\r\n       });\r\n-\r\n-      // Refresh users list\r\n-      const response = await axios.get(\"http://localhost:3000/api/admin/users\", {\r\n-        headers: {\r\n-          Authorization: `Bearer ${token}`,\r\n-        },\r\n+      const res = await axios.get(\"http://localhost:3000/api/admin/users\", {\r\n+        headers: { Authorization: `Bearer ${token}` },\r\n       });\r\n-      setUsers(response.data);\r\n-\r\n+      setUsers(res.data);\r\n       alert(`${role} deleted successfully.`);\r\n     } catch (err) {\r\n       console.error(\"Error deleting user:\", err);\r\n       alert(\"Failed to delete user.\");\r\n     }\r\n   };\r\n-  {confirmModal.visible && (\r\n-    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n-      <div className=\"bg-white rounded-lg p-6 w-full max-w-md shadow-xl text-center\">\r\n-        <h2 className=\"text-xl font-semibold mb-2 text-gray-800\">{confirmModal.title}</h2>\r\n-        <p className=\"text-gray-600 mb-4\">{confirmModal.message}</p>\r\n-        <div className=\"flex justify-center space-x-4\">\r\n-          <button\r\n-            onClick={() => setConfirmModal({ visible: false })}\r\n-            className=\"px-4 py-2 bg-gray-300 hover:bg-gray-400 rounded\"\r\n-          >\r\n-            Cancel\r\n-          </button>\r\n-          <button\r\n-            onClick={() => {\r\n-              confirmModal.onConfirm();\r\n-              setConfirmModal({ visible: false });\r\n-            }}\r\n-            className=\"px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded\"\r\n-          >\r\n-            Confirm\r\n-          </button>\r\n-        </div>\r\n-      </div>\r\n-    </div>\r\n-  )}\r\n \r\n   if (loading) {\r\n     return (\r\n       <main className=\"flex items-center justify-center min-h-screen\">\r\n@@ -207,165 +139,179 @@\n     );\r\n   }\r\n \r\n   return (\r\n-    <main className=\"min-h-screen bg-gradient-to-br from-blue-50 to-purple-100 py-12 px-6\">\r\n-      <h1 className=\"text-3xl font-bold mb-8 text-center\">\r\n-        Admin Dashboard\r\n-      </h1>\r\n-\r\n-      {/* Summary Cards */}\r\n-      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-10\">\r\n-        <div className=\"bg-white p-4 rounded shadow text-center\">\r\n-          <h2 className=\"text-xl font-semibold text-gray-800\">Clients</h2>\r\n-          <p className=\"text-3xl text-purple-600\">{summary.usersCount}</p>\r\n+    <>\r\n+      {/* Confirm Modal */}\r\n+      {confirmModal.visible && (\r\n+        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n+          <div className=\"bg-white rounded-lg p-6 w-full max-w-md shadow-xl text-center\">\r\n+            <h2 className=\"text-xl font-semibold mb-2 text-gray-800\">{confirmModal.title}</h2>\r\n+            <p className=\"text-gray-600 mb-4\">{confirmModal.message}</p>\r\n+            <div className=\"flex justify-center space-x-4\">\r\n+              <button\r\n+                onClick={() => setConfirmModal({ visible: false })}\r\n+                className=\"px-4 py-2 bg-gray-300 hover:bg-gray-400 rounded\"\r\n+              >\r\n+                Cancel\r\n+              </button>\r\n+              <button\r\n+                onClick={() => {\r\n+                  confirmModal.onConfirm();\r\n+                  setConfirmModal({ visible: false });\r\n+                }}\r\n+                className=\"px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded\"\r\n+              >\r\n+                Confirm\r\n+              </button>\r\n+            </div>\r\n+          </div>\r\n         </div>\r\n-        <div className=\"bg-white p-4 rounded shadow text-center\">\r\n-          <h2 className=\"text-xl font-semibold text-gray-800\">Babysitters</h2>\r\n-          <p className=\"text-3xl text-purple-600\">{summary.babysittersCount}</p>\r\n-        </div>\r\n-        <div className=\"bg-white p-4 rounded shadow text-center\">\r\n-          <h2 className=\"text-xl font-semibold text-gray-800\">Total Bookings</h2>\r\n-          <p className=\"text-3xl text-purple-600\">{summary.bookingsCount}</p>\r\n-        </div>\r\n-        <div className=\"bg-white p-4 rounded shadow text-center\">\r\n-          <h2 className=\"text-xl font-semibold text-gray-800\">Pending Bookings</h2>\r\n-          <p className=\"text-3xl text-purple-600\">{summary.pendingBookings}</p>\r\n-        </div>\r\n-      </div>\r\n+      )}\r\n \r\n-      {/* Bookings Table */}\r\n-      <div className=\"bg-white p-4 rounded shadow mb-8\">\r\n-        <h2 className=\"text-2xl font-semibold mb-4 text-gray-800\">All Bookings</h2>\r\n-        {bookings.length === 0 ? (\r\n-          <p className=\"text-gray-600\">No bookings found.</p>\r\n-        ) : (\r\n-          <div className=\"overflow-x-auto\">\r\n-            <table className=\"min-w-full border\">\r\n-              <thead>\r\n-                <tr className=\"bg-purple-100\">\r\n-                  <th className=\"py-2 px-4 border\">ID</th>\r\n-                  <th className=\"py-2 px-4 border\">Client</th>\r\n-                  <th className=\"py-2 px-4 border\">Babysitter</th>\r\n-                  <th className=\"py-2 px-4 border\">Date</th>\r\n-                  <th className=\"py-2 px-4 border\">Status</th>\r\n-                  <th className=\"py-2 px-4 border\">Actions</th>\r\n-                </tr>\r\n-              </thead>\r\n-              <tbody>\r\n-                {bookings.map((booking) => (\r\n-                  <tr key={booking.id} className=\"hover:bg-purple-50\">\r\n-                    <td className=\"py-2 px-4 border\">{booking.id}</td>\r\n-                    <td className=\"py-2 px-4 border\">{booking.client_name}</td>\r\n-                    <td className=\"py-2 px-4 border\">{booking.babysitter_name}</td>\r\n-                    <td className=\"py-2 px-4 border\">\r\n-                      {new Date(booking.date).toLocaleDateString()}\r\n-                    </td>\r\n-                    <td className=\"py-2 px-4 border capitalize\">{booking.status}</td>\r\n-                    <td className=\"py-2 px-4 border space-x-2\">\r\n-                      <button\r\n-                        onClick={() =>\r\n-                          setConfirmModal({\r\n-                            visible: true,\r\n-                            title: \"Approve Booking\",\r\n-                            message: \"Are you sure you want to approve this booking?\",\r\n-                            onConfirm: () => updateBookingStatus(booking.id, \"approved\"),\r\n-                          })\r\n-                        }\r\n-                        className=\"bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded text-sm\"\r\n-                      >\r\n-                        Approve\r\n-                      </button>\r\n+      <main className=\"min-h-screen bg-gradient-to-br from-blue-50 to-purple-100 py-12 px-6\">\r\n+        <h1 className=\"text-3xl font-bold mb-8 text-center\">Admin Dashboard</h1>\r\n \r\n-                      <button\r\n-                        onClick={() =>\r\n-                          setConfirmModal({\r\n-                            visible: true,\r\n-                            title: \"Cancel Booking\",\r\n-                            message: \"Are you sure you want to cancel this booking?\",\r\n-                            onConfirm: () => updateBookingStatus(booking.id, \"cancelled\"),\r\n-                          })\r\n-                        }\r\n-                        className=\"bg-yellow-500 hover:bg-yellow-600 text-white px-2 py-1 rounded text-sm\"\r\n-                      >\r\n-                        Cancel\r\n-                      </button>\r\n+        {/* Summary */}\r\n+        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-10\">\r\n+          {[\r\n+            { label: \"Clients\", count: summary.usersCount },\r\n+            { label: \"Babysitters\", count: summary.babysittersCount },\r\n+            { label: \"Total Bookings\", count: summary.bookingsCount },\r\n+            { label: \"Pending Bookings\", count: summary.pendingBookings },\r\n+          ].map((item) => (\r\n+            <div key={item.label} className=\"bg-white p-4 rounded shadow text-center\">\r\n+              <h2 className=\"text-xl font-semibold text-gray-800\">{item.label}</h2>\r\n+              <p className=\"text-3xl text-purple-600\">{item.count}</p>\r\n+            </div>\r\n+          ))}\r\n+        </div>\r\n \r\n-                      <button\r\n-                        onClick={() =>\r\n-                          setConfirmModal({\r\n-                            visible: true,\r\n-                            title: \"Delete Booking\",\r\n-                            message: \"Are you sure you want to delete this booking?\",\r\n-                            onConfirm: () => deleteBooking(booking.id),\r\n-                          })\r\n-                        }\r\n-                        className=\"bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-sm\"\r\n-                      >\r\n-                        Delete\r\n-                      </button>\r\n-\r\n-                    </td>\r\n+        {/* Bookings */}\r\n+        <div className=\"bg-white p-4 rounded shadow mb-8\">\r\n+          <h2 className=\"text-2xl font-semibold mb-4 text-gray-800\">All Bookings</h2>\r\n+          {bookings.length === 0 ? (\r\n+            <p className=\"text-gray-600\">No bookings found.</p>\r\n+          ) : (\r\n+            <div className=\"overflow-x-auto\">\r\n+              <table className=\"min-w-full border\">\r\n+                <thead>\r\n+                  <tr className=\"bg-purple-100\">\r\n+                    <th className=\"py-2 px-4 border\">ID</th>\r\n+                    <th className=\"py-2 px-4 border\">Client</th>\r\n+                    <th className=\"py-2 px-4 border\">Babysitter</th>\r\n+                    <th className=\"py-2 px-4 border\">Date</th>\r\n+                    <th className=\"py-2 px-4 border\">Status</th>\r\n+                    <th className=\"py-2 px-4 border\">Actions</th>\r\n                   </tr>\r\n-                ))}\r\n-              </tbody>\r\n-            </table>\r\n-          </div>\r\n-        )}\r\n-      </div>\r\n+                </thead>\r\n+                <tbody>\r\n+                  {bookings.map((b) => (\r\n+                    <tr key={b.id} className=\"hover:bg-purple-50\">\r\n+                      <td className=\"py-2 px-4 border\">{b.id}</td>\r\n+                      <td className=\"py-2 px-4 border\">{b.client_name}</td>\r\n+                      <td className=\"py-2 px-4 border\">{b.babysitter_name}</td>\r\n+                      <td className=\"py-2 px-4 border\">{new Date(b.date).toLocaleDateString()}</td>\r\n+                      <td className=\"py-2 px-4 border capitalize\">{b.status}</td>\r\n+                      <td className=\"py-2 px-4 border space-x-2\">\r\n+                        <button\r\n+                          onClick={() =>\r\n+                            setConfirmModal({\r\n+                              visible: true,\r\n+                              title: \"Approve Booking\",\r\n+                              message: \"Are you sure you want to approve this booking?\",\r\n+                              onConfirm: () => updateBookingStatus(b.id, \"approved\"),\r\n+                            })\r\n+                          }\r\n+                          className=\"bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded text-sm\"\r\n+                        >\r\n+                          Approve\r\n+                        </button>\r\n+                        <button\r\n+                          onClick={() =>\r\n+                            setConfirmModal({\r\n+                              visible: true,\r\n+                              title: \"Cancel Booking\",\r\n+                              message: \"Are you sure you want to cancel this booking?\",\r\n+                              onConfirm: () => updateBookingStatus(b.id, \"cancelled\"),\r\n+                            })\r\n+                          }\r\n+                          className=\"bg-yellow-500 hover:bg-yellow-600 text-white px-2 py-1 rounded text-sm\"\r\n+                        >\r\n+                          Cancel\r\n+                        </button>\r\n+                        <button\r\n+                          onClick={() =>\r\n+                            setConfirmModal({\r\n+                              visible: true,\r\n+                              title: \"Delete Booking\",\r\n+                              message: \"Are you sure you want to delete this booking?\",\r\n+                              onConfirm: () => deleteBooking(b.id),\r\n+                            })\r\n+                          }\r\n+                          className=\"bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-sm\"\r\n+                        >\r\n+                          Delete\r\n+                        </button>\r\n+                      </td>\r\n+                    </tr>\r\n+                  ))}\r\n+                </tbody>\r\n+              </table>\r\n+            </div>\r\n+          )}\r\n+        </div>\r\n \r\n-      {/* Users Table */}\r\n-      <div className=\"bg-white p-4 rounded shadow\">\r\n-        <h2 className=\"text-2xl font-semibold mb-4 text-gray-800\">All Users</h2>\r\n-        {users.length === 0 ? (\r\n-          <p className=\"text-gray-600\">No users found.</p>\r\n-        ) : (\r\n-          <div className=\"overflow-x-auto\">\r\n-            <table className=\"min-w-full border\">\r\n-              <thead>\r\n-                <tr className=\"bg-purple-100\">\r\n-                  <th className=\"py-2 px-4 border\">ID</th>\r\n-                  <th className=\"py-2 px-4 border\">Name</th>\r\n-                  <th className=\"py-2 px-4 border\">Email</th>\r\n-                  <th className=\"py-2 px-4 border\">Role</th>\r\n-                  <th className=\"py-2 px-4 border\">Created At</th>\r\n-                  <th className=\"py-2 px-4 border\">Actions</th>\r\n-                </tr>\r\n-              </thead>\r\n-              <tbody>\r\n-                {users.map((user) => (\r\n-                  <tr key={`${user.role}-${user.id}`} className=\"hover:bg-purple-50\">\r\n-                    <td className=\"py-2 px-4 border\">{user.id}</td>\r\n-                    <td className=\"py-2 px-4 border\">{user.name}</td>\r\n-                    <td className=\"py-2 px-4 border\">{user.email}</td>\r\n-                    <td className=\"py-2 px-4 border capitalize\">{user.role}</td>\r\n-                    <td className=\"py-2 px-4 border\">\r\n-                      {new Date(user.created_at).toLocaleDateString()}\r\n-                    </td>\r\n-                    <td className=\"py-2 px-4 border\">\r\n-                      <button\r\n-                        onClick={() =>\r\n-                          setConfirmModal({\r\n-                            visible: true,\r\n-                            title: \"Delete User\",\r\n-                            message: `Are you sure you want to delete this ${user.role}?`,\r\n-                            onConfirm: () => deleteUser(user.role, user.id),\r\n-                          })\r\n-                        }\r\n-                        className=\"bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-sm\"\r\n-                      >\r\n-                        Delete\r\n-                      </button>\r\n-\r\n-                    </td>\r\n+        {/* Users */}\r\n+        <div className=\"bg-white p-4 rounded shadow\">\r\n+          <h2 className=\"text-2xl font-semibold mb-4 text-gray-800\">All Users</h2>\r\n+          {users.length === 0 ? (\r\n+            <p className=\"text-gray-600\">No users found.</p>\r\n+          ) : (\r\n+            <div className=\"overflow-x-auto\">\r\n+              <table className=\"min-w-full border\">\r\n+                <thead>\r\n+                  <tr className=\"bg-purple-100\">\r\n+                    <th className=\"py-2 px-4 border\">ID</th>\r\n+                    <th className=\"py-2 px-4 border\">Name</th>\r\n+                    <th className=\"py-2 px-4 border\">Email</th>\r\n+                    <th className=\"py-2 px-4 border\">Role</th>\r\n+                    <th className=\"py-2 px-4 border\">Created At</th>\r\n+                    <th className=\"py-2 px-4 border\">Actions</th>\r\n                   </tr>\r\n-                ))}\r\n-              </tbody>\r\n-            </table>\r\n-          </div>\r\n-        )}\r\n-      </div>\r\n-    </main>\r\n+                </thead>\r\n+                <tbody>\r\n+                  {users.map((u) => (\r\n+                    <tr key={`${u.role}-${u.id}`} className=\"hover:bg-purple-50\">\r\n+                      <td className=\"py-2 px-4 border\">{u.id}</td>\r\n+                      <td className=\"py-2 px-4 border\">{u.name}</td>\r\n+                      <td className=\"py-2 px-4 border\">{u.email}</td>\r\n+                      <td className=\"py-2 px-4 border capitalize\">{u.role}</td>\r\n+                      <td className=\"py-2 px-4 border\">{new Date(u.created_at).toLocaleDateString()}</td>\r\n+                      <td className=\"py-2 px-4 border\">\r\n+                        <button\r\n+                          onClick={() =>\r\n+                            setConfirmModal({\r\n+                              visible: true,\r\n+                              title: \"Delete User\",\r\n+                              message: `Are you sure you want to delete this ${u.role}?`,\r\n+                              onConfirm: () => deleteUser(u.role, u.id),\r\n+                            })\r\n+                          }\r\n+                          className=\"bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded text-sm\"\r\n+                        >\r\n+                          Delete\r\n+                        </button>\r\n+                      </td>\r\n+                    </tr>\r\n+                  ))}\r\n+                </tbody>\r\n+              </table>\r\n+            </div>\r\n+          )}\r\n+        </div>\r\n+      </main>\r\n+    </>\r\n   );\r\n };\r\n \r\n export default AdminDashboard;\r\n"
                },
                {
                    "date": 1751552062638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,34 +4,26 @@\n \r\n const AdminDashboard = () => {\r\n   const { token } = useContext(AuthContext);\r\n \r\n-  // State for summary data\r\n   const [summary, setSummary] = useState({\r\n     usersCount: 0,\r\n     babysittersCount: 0,\r\n     bookingsCount: 0,\r\n     pendingBookings: 0,\r\n   });\r\n \r\n-  // State for bookings list\r\n   const [bookings, setBookings] = useState([]);\r\n-\r\n-  // State for users list\r\n   const [users, setUsers] = useState([]);\r\n-\r\n-  // State for loading indicator\r\n   const [loading, setLoading] = useState(true);\r\n \r\n-  // State for confirm modal\r\n   const [confirmModal, setConfirmModal] = useState({\r\n     visible: false,\r\n     title: \"\",\r\n     message: \"\",\r\n     onConfirm: () => {},\r\n   });\r\n \r\n-  // Fetch summary data when component mounts\r\n   useEffect(() => {\r\n     const fetchSummary = async () => {\r\n       try {\r\n         const response = await axios.get(\"http://localhost:3000/api/admin/summary\", {\r\n@@ -46,9 +38,8 @@\n     };\r\n     fetchSummary();\r\n   }, [token]);\r\n \r\n-  // Fetch bookings when component mounts\r\n   useEffect(() => {\r\n     const fetchBookings = async () => {\r\n       try {\r\n         const response = await axios.get(\"http://localhost:3000/api/admin/bookings\", {\r\n@@ -61,9 +52,8 @@\n     };\r\n     fetchBookings();\r\n   }, [token]);\r\n \r\n-  // Fetch users when component mounts\r\n   useEffect(() => {\r\n     const fetchUsers = async () => {\r\n       try {\r\n         const response = await axios.get(\"http://localhost:3000/api/admin/users\", {\r\n@@ -76,59 +66,52 @@\n     };\r\n     fetchUsers();\r\n   }, [token]);\r\n \r\n-  // Function to update booking status\r\n   const updateBookingStatus = async (bookingId, newStatus) => {\r\n     try {\r\n       await axios.put(\r\n         `http://localhost:3000/api/admin/bookings/${bookingId}/status`,\r\n         { status: newStatus },\r\n         { headers: { Authorization: `Bearer ${token}` } }\r\n       );\r\n-      // Refresh bookings\r\n+\r\n       const res = await axios.get(\"http://localhost:3000/api/admin/bookings\", {\r\n         headers: { Authorization: `Bearer ${token}` },\r\n       });\r\n       setBookings(res.data);\r\n-      alert(`Booking status updated to \"${newStatus}\".`);\r\n     } catch (err) {\r\n       console.error(\"Error updating status:\", err);\r\n-      alert(\"Failed to update booking status.\");\r\n     }\r\n   };\r\n \r\n-  // Function to delete booking\r\n   const deleteBooking = async (bookingId) => {\r\n     try {\r\n-      await axios.delete(`http://localhost:3000/api/bookings/${bookingId}`, {\r\n+      await axios.delete(`http://localhost:3000/api/admin/bookings/${bookingId}`, {\r\n         headers: { Authorization: `Bearer ${token}` },\r\n       });\r\n+\r\n       const res = await axios.get(\"http://localhost:3000/api/admin/bookings\", {\r\n         headers: { Authorization: `Bearer ${token}` },\r\n       });\r\n       setBookings(res.data);\r\n-      alert(\"Booking deleted successfully.\");\r\n     } catch (err) {\r\n       console.error(\"Error deleting booking:\", err);\r\n-      alert(\"Failed to delete booking.\");\r\n     }\r\n   };\r\n \r\n-  // Function to delete user\r\n   const deleteUser = async (role, id) => {\r\n     try {\r\n       await axios.delete(`http://localhost:3000/api/admin/users/${role}/${id}`, {\r\n         headers: { Authorization: `Bearer ${token}` },\r\n       });\r\n+\r\n       const res = await axios.get(\"http://localhost:3000/api/admin/users\", {\r\n         headers: { Authorization: `Bearer ${token}` },\r\n       });\r\n       setUsers(res.data);\r\n-      alert(`${role} deleted successfully.`);\r\n     } catch (err) {\r\n       console.error(\"Error deleting user:\", err);\r\n-      alert(\"Failed to delete user.\");\r\n     }\r\n   };\r\n \r\n   if (loading) {\r\n@@ -140,9 +123,8 @@\n   }\r\n \r\n   return (\r\n     <>\r\n-      {/* Confirm Modal */}\r\n       {confirmModal.visible && (\r\n         <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\r\n           <div className=\"bg-white rounded-lg p-6 w-full max-w-md shadow-xl text-center\">\r\n             <h2 className=\"text-xl font-semibold mb-2 text-gray-800\">{confirmModal.title}</h2>\r\n@@ -170,9 +152,8 @@\n \r\n       <main className=\"min-h-screen bg-gradient-to-br from-blue-50 to-purple-100 py-12 px-6\">\r\n         <h1 className=\"text-3xl font-bold mb-8 text-center\">Admin Dashboard</h1>\r\n \r\n-        {/* Summary */}\r\n         <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-10\">\r\n           {[\r\n             { label: \"Clients\", count: summary.usersCount },\r\n             { label: \"Babysitters\", count: summary.babysittersCount },\r\n"
                }
            ],
            "date": 1751516745137,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst AdminDashboard = () => {\r\n  const [summary, setSummary] = useState({\r\n    users: 0,\r\n    babysitters: 0,\r\n    bookings: 0,\r\n    pendingBookings: 0,\r\n  });\r\n\r\n  const [bookings, setBookings] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Future: fetch data from API\r\n    // For now, use mock data\r\n    setSummary({\r\n      users: 5,\r\n      babysitters: 3,\r\n      bookings: 12,\r\n      pendingBookings: 2,\r\n    });\r\n\r\n    setBookings([\r\n      {\r\n        id: 1,\r\n        client: \"John Doe\",\r\n        babysitter: \"Jane Smith\",\r\n        date: \"2024-08-15\",\r\n        status: \"pending\",\r\n      },\r\n    ]);\r\n\r\n    setUsers([\r\n      { id: 1, name: \"John Doe\", email: \"john@example.com\", role: \"user\" },\r\n      { id: 2, name: \"Jane Smith\", email: \"jane@example.com\", role: \"babysitter\" },\r\n    ]);\r\n\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return (\r\n      <main className=\"flex items-center justify-center min-h-screen\">\r\n        <p className=\"text-gray-600\">Loading admin dashboard...</p>\r\n      </main>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <main className=\"bg-gradient-to-br from-blue-50 to-purple-100 min-h-screen py-12 px-6\">\r\n      <h1 className=\"text-3xl font-bold text-center mb-8\">\r\n        Admin Dashboard\r\n      </h1>\r\n\r\n      {/* Summary Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\r\n        <div className=\"bg-white p-4 rounded shadow text-center\">\r\n          <p className=\"text-gray-500\">Clients</p>\r\n          <p className=\"text-2xl font-bold\">{summary.users}</p>\r\n        </div>\r\n        <div className=\"bg-white p-4 rounded shadow text-center\">\r\n          <p className=\"text-gray-500\">Babysitters</p>\r\n          <p className=\"text-2xl font-bold\">{summary.babysitters}</p>\r\n        </div>\r\n        <div className=\"bg-white p-4 rounded shadow text-center\">\r\n          <p className=\"text-gray-500\">Total Bookings</p>\r\n          <p className=\"text-2xl font-bold\">{summary.bookings}</p>\r\n        </div>\r\n        <div className=\"bg-white p-4 rounded shadow text-center\">\r\n          <p className=\"text-gray-500\">Pending Bookings</p>\r\n          <p className=\"text-2xl font-bold\">{summary.pendingBookings}</p>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Bookings Table */}\r\n      <h2 className=\"text-xl font-semibold mb-2\">Bookings</h2>\r\n      <div className=\"overflow-x-auto mb-8\">\r\n        <table className=\"min-w-full bg-white rounded shadow\">\r\n          <thead>\r\n            <tr>\r\n              <th className=\"py-2 px-4 border-b\">Client</th>\r\n              <th className=\"py-2 px-4 border-b\">Babysitter</th>\r\n              <th className=\"py-2 px-4 border-b\">Date</th>\r\n              <th className=\"py-2 px-4 border-b\">Status</th>\r\n              <th className=\"py-2 px-4 border-b\">Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {bookings.map((booking) => (\r\n              <tr key={booking.id}>\r\n                <td className=\"py-2 px-4 border-b\">{booking.client}</td>\r\n                <td className=\"py-2 px-4 border-b\">{booking.babysitter}</td>\r\n                <td className=\"py-2 px-4 border-b\">{booking.date}</td>\r\n                <td className=\"py-2 px-4 border-b capitalize\">{booking.status}</td>\r\n                <td className=\"py-2 px-4 border-b\">\r\n                  <button className=\"bg-green-500 text-white px-2 py-1 rounded mr-2\">\r\n                    Approve\r\n                  </button>\r\n                  <button className=\"bg-red-500 text-white px-2 py-1 rounded\">\r\n                    Cancel\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n\r\n      {/* Users Table */}\r\n      <h2 className=\"text-xl font-semibold mb-2\">Users</h2>\r\n      <div className=\"overflow-x-auto\">\r\n        <table className=\"min-w-full bg-white rounded shadow\">\r\n          <thead>\r\n            <tr>\r\n              <th className=\"py-2 px-4 border-b\">Name</th>\r\n              <th className=\"py-2 px-4 border-b\">Email</th>\r\n              <th className=\"py-2 px-4 border-b\">Role</th>\r\n              <th className=\"py-2 px-4 border-b\">Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {users.map((user) => (\r\n              <tr key={user.id}>\r\n                <td className=\"py-2 px-4 border-b\">{user.name}</td>\r\n                <td className=\"py-2 px-4 border-b\">{user.email}</td>\r\n                <td className=\"py-2 px-4 border-b capitalize\">{user.role}</td>\r\n                <td className=\"py-2 px-4 border-b\">\r\n                  <button className=\"bg-red-500 text-white px-2 py-1 rounded\">\r\n                    Delete\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default AdminDashboard;\r\n"
        }
    ]
}