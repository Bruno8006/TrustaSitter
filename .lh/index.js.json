{
    "sourceFile": "index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1750481102624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750482036550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,31 @@\n   .catch(err => console.error('Connection error ❌', err.stack));\r\n \r\n app.use(express.json());\r\n \r\n+app.post('/api/babysitters', async (req, res) => {\r\n+  const { name, email, region, availability } = req.body;\r\n+\r\n+  try {\r\n+    const query = `\r\n+      INSERT INTO babysitters (name, email, region, availability)\r\n+      VALUES ($1, $2, $3, $4)\r\n+      RETURNING *;\r\n+    `;\r\n+\r\n+    const values = [name, email, region, availability];\r\n+    const result = await db.query(query, values);\r\n+\r\n+    res.status(201).json({\r\n+      message: 'Babysitter registered successfully',\r\n+      data: result.rows[0],\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error inserting babysitter:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n app.get('/', (req, res) => {\r\n   res.send('TrustaSitter backend is running!');\r\n });\r\n \r\n"
                },
                {
                    "date": 1750482453869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,17 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+app.get('/api/babysitters', async (req, res) => {\r\n+  try {\r\n+    const result = await db.query('SELECT * FROM babysitters ORDER BY id ASC');\r\n+    res.status(200).json(result.rows);\r\n+  } catch (error) {\r\n+    console.error('Error fetching babysitters:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n app.get('/', (req, res) => {\r\n   res.send('TrustaSitter backend is running!');\r\n });\r\n \r\n"
                },
                {
                    "date": 1750485233528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,4 +56,22 @@\n const PORT = process.env.PORT || 3000;\r\n app.listen(PORT, () => {\r\n   console.log(`Server is running on port ${PORT}`);\r\n });\r\n+app.get('/api/babysitters/search', async (req, res) => {\r\n+  const { region, availability } = req.query;\r\n+\r\n+  try {\r\n+    const query = `\r\n+      SELECT * FROM babysitters\r\n+      WHERE region ILIKE $1 AND availability ILIKE $2\r\n+      ORDER BY id ASC\r\n+    `;\r\n+    const values = [`%${region}%`, `%${availability}%`];\r\n+    const result = await db.query(query, values);\r\n+\r\n+    res.status(200).json(result.rows);\r\n+  } catch (error) {\r\n+    console.error('Error searching babysitters:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n"
                },
                {
                    "date": 1750486119633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n const express = require('express');\r\n const app = express();\r\n+const bcrypt = require('bcrypt');\r\n \r\n const { Client } = require('pg');\r\n \r\n const db = new Client({\r\n@@ -74,4 +75,30 @@\n     console.error('Error searching babysitters:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n+\r\n+app.post('/api/users/register', async (req, res) => {\r\n+  const { name, email, password } = req.body;\r\n+\r\n+  try {\r\n+    // Criptografar a senha\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+\r\n+    const query = `\r\n+      INSERT INTO users (name, email, password)\r\n+      VALUES ($1, $2, $3)\r\n+      RETURNING id, name, email, created_at;\r\n+    `;\r\n+\r\n+    const values = [name, email, hashedPassword];\r\n+    const result = await db.query(query, values);\r\n+\r\n+    res.status(201).json({\r\n+      message: 'User registered successfully',\r\n+      user: result.rows[0],\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error registering user:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n"
                },
                {
                    "date": 1750486351040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,4 +101,37 @@\n     console.error('Error registering user:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n+\r\n+app.post('/api/users/login', async (req, res) => {\r\n+  const { email, password } = req.body;\r\n+\r\n+  try {\r\n+    const query = `SELECT * FROM users WHERE email = $1`;\r\n+    const result = await db.query(query, [email]);\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(401).json({ error: 'Invalid email or password' });\r\n+    }\r\n+\r\n+    const user = result.rows[0];\r\n+    const passwordMatch = await bcrypt.compare(password, user.password);\r\n+\r\n+    if (!passwordMatch) {\r\n+      return res.status(401).json({ error: 'Invalid email or password' });\r\n+    }\r\n+\r\n+    res.status(200).json({\r\n+      message: 'Login successful',\r\n+      user: {\r\n+        id: user.id,\r\n+        name: user.name,\r\n+        email: user.email,\r\n+        created_at: user.created_at\r\n+      }\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Login error:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n"
                }
            ],
            "date": 1750481102624,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst app = express();\r\n\r\nconst { Client } = require('pg');\r\n\r\nconst db = new Client({\r\n  user: 'postgres',\r\n  host: 'localhost',\r\n  database: 'trustasitter',\r\n  password: 'Senha00!',\r\n  port: 5432,\r\n});\r\n\r\ndb.connect()\r\n  .then(() => console.log('Connected to PostgreSQL ✅'))\r\n  .catch(err => console.error('Connection error ❌', err.stack));\r\n\r\napp.use(express.json());\r\n\r\napp.get('/', (req, res) => {\r\n  res.send('TrustaSitter backend is running!');\r\n});\r\n\r\nconst PORT = process.env.PORT || 3000;\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running on port ${PORT}`);\r\n});\r\n"
        }
    ]
}