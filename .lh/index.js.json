{
    "sourceFile": "index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1750481102624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750482036550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,31 @@\n   .catch(err => console.error('Connection error ❌', err.stack));\r\n \r\n app.use(express.json());\r\n \r\n+app.post('/api/babysitters', async (req, res) => {\r\n+  const { name, email, region, availability } = req.body;\r\n+\r\n+  try {\r\n+    const query = `\r\n+      INSERT INTO babysitters (name, email, region, availability)\r\n+      VALUES ($1, $2, $3, $4)\r\n+      RETURNING *;\r\n+    `;\r\n+\r\n+    const values = [name, email, region, availability];\r\n+    const result = await db.query(query, values);\r\n+\r\n+    res.status(201).json({\r\n+      message: 'Babysitter registered successfully',\r\n+      data: result.rows[0],\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error inserting babysitter:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n app.get('/', (req, res) => {\r\n   res.send('TrustaSitter backend is running!');\r\n });\r\n \r\n"
                },
                {
                    "date": 1750482453869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,17 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+app.get('/api/babysitters', async (req, res) => {\r\n+  try {\r\n+    const result = await db.query('SELECT * FROM babysitters ORDER BY id ASC');\r\n+    res.status(200).json(result.rows);\r\n+  } catch (error) {\r\n+    console.error('Error fetching babysitters:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n app.get('/', (req, res) => {\r\n   res.send('TrustaSitter backend is running!');\r\n });\r\n \r\n"
                },
                {
                    "date": 1750485233528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,4 +56,22 @@\n const PORT = process.env.PORT || 3000;\r\n app.listen(PORT, () => {\r\n   console.log(`Server is running on port ${PORT}`);\r\n });\r\n+app.get('/api/babysitters/search', async (req, res) => {\r\n+  const { region, availability } = req.query;\r\n+\r\n+  try {\r\n+    const query = `\r\n+      SELECT * FROM babysitters\r\n+      WHERE region ILIKE $1 AND availability ILIKE $2\r\n+      ORDER BY id ASC\r\n+    `;\r\n+    const values = [`%${region}%`, `%${availability}%`];\r\n+    const result = await db.query(query, values);\r\n+\r\n+    res.status(200).json(result.rows);\r\n+  } catch (error) {\r\n+    console.error('Error searching babysitters:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n"
                },
                {
                    "date": 1750486119633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n const express = require('express');\r\n const app = express();\r\n+const bcrypt = require('bcrypt');\r\n \r\n const { Client } = require('pg');\r\n \r\n const db = new Client({\r\n@@ -74,4 +75,30 @@\n     console.error('Error searching babysitters:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n+\r\n+app.post('/api/users/register', async (req, res) => {\r\n+  const { name, email, password } = req.body;\r\n+\r\n+  try {\r\n+    // Criptografar a senha\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+\r\n+    const query = `\r\n+      INSERT INTO users (name, email, password)\r\n+      VALUES ($1, $2, $3)\r\n+      RETURNING id, name, email, created_at;\r\n+    `;\r\n+\r\n+    const values = [name, email, hashedPassword];\r\n+    const result = await db.query(query, values);\r\n+\r\n+    res.status(201).json({\r\n+      message: 'User registered successfully',\r\n+      user: result.rows[0],\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error registering user:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n"
                },
                {
                    "date": 1750486351040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,4 +101,37 @@\n     console.error('Error registering user:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n+\r\n+app.post('/api/users/login', async (req, res) => {\r\n+  const { email, password } = req.body;\r\n+\r\n+  try {\r\n+    const query = `SELECT * FROM users WHERE email = $1`;\r\n+    const result = await db.query(query, [email]);\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(401).json({ error: 'Invalid email or password' });\r\n+    }\r\n+\r\n+    const user = result.rows[0];\r\n+    const passwordMatch = await bcrypt.compare(password, user.password);\r\n+\r\n+    if (!passwordMatch) {\r\n+      return res.status(401).json({ error: 'Invalid email or password' });\r\n+    }\r\n+\r\n+    res.status(200).json({\r\n+      message: 'Login successful',\r\n+      user: {\r\n+        id: user.id,\r\n+        name: user.name,\r\n+        email: user.email,\r\n+        created_at: user.created_at\r\n+      }\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Login error:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n"
                },
                {
                    "date": 1750486650745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,4 +134,27 @@\n     console.error('Login error:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n+\r\n+app.post('/api/bookings', async (req, res) => {\r\n+  const { user_id, babysitter_id, date, time_start, time_end } = req.body;\r\n+\r\n+  try {\r\n+    const query = `\r\n+      INSERT INTO bookings (user_id, babysitter_id, date, time_start, time_end)\r\n+      VALUES ($1, $2, $3, $4, $5)\r\n+      RETURNING *;\r\n+    `;\r\n+\r\n+    const values = [user_id, babysitter_id, date, time_start, time_end];\r\n+    const result = await db.query(query, values);\r\n+\r\n+    res.status(201).json({\r\n+      message: 'Booking created successfully',\r\n+      booking: result.rows[0],\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error creating booking:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n"
                },
                {
                    "date": 1750487236957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,4 +157,26 @@\n     console.error('Error creating booking:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n+\r\n+app.get('/api/bookings/:user_id', async (req, res) => {\r\n+  const { user_id } = req.params;\r\n+\r\n+  try {\r\n+    const query = `\r\n+      SELECT \r\n+        b.id, b.date, b.time_start, b.time_end, b.status,\r\n+        bs.name AS babysitter_name, bs.region\r\n+      FROM bookings b\r\n+      JOIN babysitters bs ON b.babysitter_id = bs.id\r\n+      WHERE b.user_id = $1\r\n+      ORDER BY b.date ASC;\r\n+    `;\r\n+\r\n+    const result = await db.query(query, [user_id]);\r\n+    res.status(200).json(result.rows);\r\n+  } catch (error) {\r\n+    console.error('Error fetching bookings:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n"
                },
                {
                    "date": 1750487284240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,13 +157,14 @@\n     console.error('Error creating booking:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n-\r\n+// Route: Get all bookings for a specific user\r\n app.get('/api/bookings/:user_id', async (req, res) => {\r\n   const { user_id } = req.params;\r\n \r\n   try {\r\n+    // Query to fetch bookings and include babysitter details\r\n     const query = `\r\n       SELECT \r\n         b.id, b.date, b.time_start, b.time_end, b.status,\r\n         bs.name AS babysitter_name, bs.region\r\n@@ -173,8 +174,10 @@\n       ORDER BY b.date ASC;\r\n     `;\r\n \r\n     const result = await db.query(query, [user_id]);\r\n+\r\n+    // Return bookings list\r\n     res.status(200).json(result.rows);\r\n   } catch (error) {\r\n     console.error('Error fetching bookings:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n"
                },
                {
                    "date": 1750487373110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,32 @@\n+// Import dependencies\r\n const express = require('express');\r\n const app = express();\r\n const bcrypt = require('bcrypt');\r\n-\r\n const { Client } = require('pg');\r\n \r\n+// PostgreSQL client configuration\r\n const db = new Client({\r\n   user: 'postgres',\r\n   host: 'localhost',\r\n   database: 'trustasitter',\r\n   password: 'Senha00!',\r\n   port: 5432,\r\n });\r\n \r\n+// Connect to PostgreSQL\r\n db.connect()\r\n   .then(() => console.log('Connected to PostgreSQL ✅'))\r\n   .catch(err => console.error('Connection error ❌', err.stack));\r\n \r\n+// Middleware to parse JSON requests\r\n app.use(express.json());\r\n \r\n+/* ---------------------------\r\n+   Babysitters Routes\r\n+----------------------------*/\r\n+\r\n+// Route: Register a new babysitter\r\n app.post('/api/babysitters', async (req, res) => {\r\n   const { name, email, region, availability } = req.body;\r\n \r\n   try {\r\n@@ -40,8 +48,9 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+// Route: Get all babysitters\r\n app.get('/api/babysitters', async (req, res) => {\r\n   try {\r\n     const result = await db.query('SELECT * FROM babysitters ORDER BY id ASC');\r\n     res.status(200).json(result.rows);\r\n@@ -49,16 +58,10 @@\n     console.error('Error fetching babysitters:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n-app.get('/', (req, res) => {\r\n-  res.send('TrustaSitter backend is running!');\r\n-});\r\n \r\n-const PORT = process.env.PORT || 3000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server is running on port ${PORT}`);\r\n-});\r\n+// Route: Search babysitters by region and availability\r\n app.get('/api/babysitters/search', async (req, res) => {\r\n   const { region, availability } = req.query;\r\n \r\n   try {\r\n@@ -76,13 +79,18 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+/* ---------------------------\r\n+   Users Routes\r\n+----------------------------*/\r\n+\r\n+// Route: Register a new user (family)\r\n app.post('/api/users/register', async (req, res) => {\r\n   const { name, email, password } = req.body;\r\n \r\n   try {\r\n-    // Criptografar a senha\r\n+    // Hash the user's password\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n \r\n     const query = `\r\n       INSERT INTO users (name, email, password)\r\n@@ -102,8 +110,9 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+// Route: User login\r\n app.post('/api/users/login', async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n@@ -135,8 +144,13 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+/* ---------------------------\r\n+   Bookings Routes\r\n+----------------------------*/\r\n+\r\n+// Route: Create a new booking\r\n app.post('/api/bookings', async (req, res) => {\r\n   const { user_id, babysitter_id, date, time_start, time_end } = req.body;\r\n \r\n   try {\r\n@@ -157,14 +171,14 @@\n     console.error('Error creating booking:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n+\r\n // Route: Get all bookings for a specific user\r\n app.get('/api/bookings/:user_id', async (req, res) => {\r\n   const { user_id } = req.params;\r\n \r\n   try {\r\n-    // Query to fetch bookings and include babysitter details\r\n     const query = `\r\n       SELECT \r\n         b.id, b.date, b.time_start, b.time_end, b.status,\r\n         bs.name AS babysitter_name, bs.region\r\n@@ -175,11 +189,29 @@\n     `;\r\n \r\n     const result = await db.query(query, [user_id]);\r\n \r\n-    // Return bookings list\r\n     res.status(200).json(result.rows);\r\n   } catch (error) {\r\n     console.error('Error fetching bookings:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n+\r\n+/* ---------------------------\r\n+   Root Endpoint\r\n+----------------------------*/\r\n+\r\n+// Route: Root check\r\n+app.get('/', (req, res) => {\r\n+  res.send('TrustaSitter backend is running!');\r\n+});\r\n+\r\n+/* ---------------------------\r\n+   Server Initialization\r\n+----------------------------*/\r\n+\r\n+// Start server\r\n+const PORT = process.env.PORT || 3000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server is running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1751168558400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,8 +48,50 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+// Route: Babysitter login\r\n+app.post('/api/babysitters/login', async (req, res) => {\r\n+  const { email, password } = req.body;\r\n+\r\n+  try {\r\n+    // Validate input\r\n+    if (!email || !password) {\r\n+      return res.status(400).json({ error: 'Email and password are required.' });\r\n+    }\r\n+\r\n+    // Find babysitter by email\r\n+    const query = `SELECT * FROM babysitters WHERE email = $1`;\r\n+    const result = await db.query(query, [email]);\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(401).json({ error: 'Invalid email or password.' });\r\n+    }\r\n+\r\n+    const babysitter = result.rows[0];\r\n+\r\n+    // Compare passwords\r\n+    const isMatch = await bcrypt.compare(password, babysitter.password);\r\n+\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({ error: 'Invalid email or password.' });\r\n+    }\r\n+\r\n+    res.status(200).json({\r\n+      message: 'Login successful',\r\n+      babysitter: {\r\n+        id: babysitter.id,\r\n+        name: babysitter.name,\r\n+        email: babysitter.email,\r\n+        region: babysitter.region\r\n+      }\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Babysitter login error:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n // Route: Get all babysitters\r\n app.get('/api/babysitters', async (req, res) => {\r\n   try {\r\n     const result = await db.query('SELECT * FROM babysitters ORDER BY id ASC');\r\n@@ -88,9 +130,9 @@\n app.post('/api/users/register', async (req, res) => {\r\n   const { name, email, password } = req.body;\r\n \r\n   try {\r\n-    // Hash the user's password\r\n+    // Hash password\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n \r\n     const query = `\r\n       INSERT INTO users (name, email, password)\r\n@@ -119,16 +161,16 @@\n     const query = `SELECT * FROM users WHERE email = $1`;\r\n     const result = await db.query(query, [email]);\r\n \r\n     if (result.rows.length === 0) {\r\n-      return res.status(401).json({ error: 'Invalid email or password' });\r\n+      return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n \r\n     const user = result.rows[0];\r\n     const passwordMatch = await bcrypt.compare(password, user.password);\r\n \r\n     if (!passwordMatch) {\r\n-      return res.status(401).json({ error: 'Invalid email or password' });\r\n+      return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n \r\n     res.status(200).json({\r\n       message: 'Login successful',\r\n"
                },
                {
                    "date": 1751169365919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,28 +24,61 @@\n /* ---------------------------\r\n    Babysitters Routes\r\n ----------------------------*/\r\n \r\n-// Route: Register a new babysitter\r\n-app.post('/api/babysitters', async (req, res) => {\r\n-  const { name, email, region, availability } = req.body;\r\n+// Route: Register a new babysitter (with password, availability, rate, about)\r\n+app.post('/api/babysitters/register', async (req, res) => {\r\n+  const {\r\n+    name,\r\n+    email,\r\n+    password,\r\n+    phone,\r\n+    region,\r\n+    available_days,\r\n+    available_from,\r\n+    available_to,\r\n+    about,\r\n+    rate\r\n+  } = req.body;\r\n \r\n   try {\r\n+    // Validate required fields\r\n+    if (!name || !email || !password) {\r\n+      return res.status(400).json({ error: 'Name, email, and password are required.' });\r\n+    }\r\n+\r\n+    // Hash the password\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+\r\n     const query = `\r\n-      INSERT INTO babysitters (name, email, region, availability)\r\n-      VALUES ($1, $2, $3, $4)\r\n-      RETURNING *;\r\n+      INSERT INTO babysitters\r\n+      (name, email, password, phone, region, available_days, available_from, available_to, about, rate)\r\n+      VALUES\r\n+      ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\r\n+      RETURNING id, name, email, region, created_at;\r\n     `;\r\n \r\n-    const values = [name, email, region, availability];\r\n+    const values = [\r\n+      name,\r\n+      email,\r\n+      hashedPassword,\r\n+      phone,\r\n+      region,\r\n+      available_days,\r\n+      available_from,\r\n+      available_to,\r\n+      about,\r\n+      rate\r\n+    ];\r\n+\r\n     const result = await db.query(query, values);\r\n \r\n     res.status(201).json({\r\n-      message: 'Babysitter registered successfully',\r\n-      data: result.rows[0],\r\n+      message: 'Babysitter registered successfully.',\r\n+      babysitter: result.rows[0]\r\n     });\r\n   } catch (error) {\r\n-    console.error('Error inserting babysitter:', error);\r\n+    console.error('Error registering babysitter:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n@@ -53,24 +86,20 @@\n app.post('/api/babysitters/login', async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n-    // Validate input\r\n     if (!email || !password) {\r\n       return res.status(400).json({ error: 'Email and password are required.' });\r\n     }\r\n \r\n-    // Find babysitter by email\r\n     const query = `SELECT * FROM babysitters WHERE email = $1`;\r\n     const result = await db.query(query, [email]);\r\n \r\n     if (result.rows.length === 0) {\r\n       return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n \r\n     const babysitter = result.rows[0];\r\n-\r\n-    // Compare passwords\r\n     const isMatch = await bcrypt.compare(password, babysitter.password);\r\n \r\n     if (!isMatch) {\r\n       return res.status(401).json({ error: 'Invalid email or password.' });\r\n@@ -130,9 +159,8 @@\n app.post('/api/users/register', async (req, res) => {\r\n   const { name, email, password } = req.body;\r\n \r\n   try {\r\n-    // Hash password\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n \r\n     const query = `\r\n       INSERT INTO users (name, email, password)\r\n@@ -144,9 +172,9 @@\n     const result = await db.query(query, values);\r\n \r\n     res.status(201).json({\r\n       message: 'User registered successfully',\r\n-      user: result.rows[0],\r\n+      user: result.rows[0]\r\n     });\r\n   } catch (error) {\r\n     console.error('Error registering user:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n@@ -206,9 +234,9 @@\n     const result = await db.query(query, values);\r\n \r\n     res.status(201).json({\r\n       message: 'Booking created successfully',\r\n-      booking: result.rows[0],\r\n+      booking: result.rows[0]\r\n     });\r\n   } catch (error) {\r\n     console.error('Error creating booking:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n"
                },
                {
                    "date": 1751170145546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n /* ---------------------------\r\n    Babysitters Routes\r\n ----------------------------*/\r\n \r\n-// Route: Register a new babysitter (with password, availability, rate, about)\r\n+// Route: Register a new babysitter\r\n app.post('/api/babysitters/register', async (req, res) => {\r\n   const {\r\n     name,\r\n     email,\r\n@@ -41,10 +41,10 @@\n   } = req.body;\r\n \r\n   try {\r\n     // Validate required fields\r\n-    if (!name || !email || !password) {\r\n-      return res.status(400).json({ error: 'Name, email, and password are required.' });\r\n+    if (!name || !email || !password || !region || !available_days || !available_from || !available_to || !rate) {\r\n+      return res.status(400).json({ error: 'All required fields must be filled.' });\r\n     }\r\n \r\n     // Hash the password\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n@@ -130,19 +130,19 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Search babysitters by region and availability\r\n+// Route: Search babysitters by region\r\n app.get('/api/babysitters/search', async (req, res) => {\r\n-  const { region, availability } = req.query;\r\n+  const { region } = req.query;\r\n \r\n   try {\r\n     const query = `\r\n       SELECT * FROM babysitters\r\n-      WHERE region ILIKE $1 AND availability ILIKE $2\r\n+      WHERE region ILIKE $1\r\n       ORDER BY id ASC\r\n     `;\r\n-    const values = [`%${region}%`, `%${availability}%`];\r\n+    const values = [`%${region}%`];\r\n     const result = await db.query(query, values);\r\n \r\n     res.status(200).json(result.rows);\r\n   } catch (error) {\r\n@@ -154,13 +154,17 @@\n /* ---------------------------\r\n    Users Routes\r\n ----------------------------*/\r\n \r\n-// Route: Register a new user (family)\r\n+// Route: Register a new user (client)\r\n app.post('/api/users/register', async (req, res) => {\r\n   const { name, email, password } = req.body;\r\n \r\n   try {\r\n+    if (!name || !email || !password) {\r\n+      return res.status(400).json({ error: 'Name, email, and password are required.' });\r\n+    }\r\n+\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n \r\n     const query = `\r\n       INSERT INTO users (name, email, password)\r\n@@ -171,9 +175,9 @@\n     const values = [name, email, hashedPassword];\r\n     const result = await db.query(query, values);\r\n \r\n     res.status(201).json({\r\n-      message: 'User registered successfully',\r\n+      message: 'User registered successfully.',\r\n       user: result.rows[0]\r\n     });\r\n   } catch (error) {\r\n     console.error('Error registering user:', error);\r\n@@ -185,8 +189,12 @@\n app.post('/api/users/login', async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n+    if (!email || !password) {\r\n+      return res.status(400).json({ error: 'Email and password are required.' });\r\n+    }\r\n+\r\n     const query = `SELECT * FROM users WHERE email = $1`;\r\n     const result = await db.query(query, [email]);\r\n \r\n     if (result.rows.length === 0) {\r\n@@ -233,9 +241,9 @@\n     const values = [user_id, babysitter_id, date, time_start, time_end];\r\n     const result = await db.query(query, values);\r\n \r\n     res.status(201).json({\r\n-      message: 'Booking created successfully',\r\n+      message: 'Booking created successfully.',\r\n       booking: result.rows[0]\r\n     });\r\n   } catch (error) {\r\n     console.error('Error creating booking:', error);\r\n@@ -279,9 +287,8 @@\n /* ---------------------------\r\n    Server Initialization\r\n ----------------------------*/\r\n \r\n-// Start server\r\n const PORT = process.env.PORT || 3000;\r\n app.listen(PORT, () => {\r\n   console.log(`Server is running on port ${PORT}`);\r\n });\r\n"
                },
                {
                    "date": 1751174150925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n // Import dependencies\r\n const express = require('express');\r\n const app = express();\r\n const bcrypt = require('bcrypt');\r\n+const jwt = require('jsonwebtoken'); // ✅ Import JWT\r\n const { Client } = require('pg');\r\n \r\n // PostgreSQL client configuration\r\n const db = new Client({\r\n@@ -81,9 +82,9 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Babysitter login\r\n+// Route: Babysitter login with JWT token\r\n app.post('/api/babysitters/login', async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n@@ -104,10 +105,21 @@\n     if (!isMatch) {\r\n       return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n \r\n+    // Generate JWT token\r\n+    const token = jwt.sign(\r\n+      {\r\n+        id: babysitter.id,\r\n+        email: babysitter.email\r\n+      },\r\n+      'your_jwt_secret_key', // ⚠️ Replace with environment variable in production\r\n+      { expiresIn: '3h' }\r\n+    );\r\n+\r\n     res.status(200).json({\r\n       message: 'Login successful',\r\n+      token,\r\n       babysitter: {\r\n         id: babysitter.id,\r\n         name: babysitter.name,\r\n         email: babysitter.email,\r\n"
                }
            ],
            "date": 1750481102624,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst app = express();\r\n\r\nconst { Client } = require('pg');\r\n\r\nconst db = new Client({\r\n  user: 'postgres',\r\n  host: 'localhost',\r\n  database: 'trustasitter',\r\n  password: 'Senha00!',\r\n  port: 5432,\r\n});\r\n\r\ndb.connect()\r\n  .then(() => console.log('Connected to PostgreSQL ✅'))\r\n  .catch(err => console.error('Connection error ❌', err.stack));\r\n\r\napp.use(express.json());\r\n\r\napp.get('/', (req, res) => {\r\n  res.send('TrustaSitter backend is running!');\r\n});\r\n\r\nconst PORT = process.env.PORT || 3000;\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running on port ${PORT}`);\r\n});\r\n"
        }
    ]
}