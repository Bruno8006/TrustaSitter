{
    "sourceFile": "index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 35,
            "patches": [
                {
                    "date": 1750481102624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1750482036550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,31 @@\n   .catch(err => console.error('Connection error ❌', err.stack));\r\n \r\n app.use(express.json());\r\n \r\n+app.post('/api/babysitters', async (req, res) => {\r\n+  const { name, email, region, availability } = req.body;\r\n+\r\n+  try {\r\n+    const query = `\r\n+      INSERT INTO babysitters (name, email, region, availability)\r\n+      VALUES ($1, $2, $3, $4)\r\n+      RETURNING *;\r\n+    `;\r\n+\r\n+    const values = [name, email, region, availability];\r\n+    const result = await db.query(query, values);\r\n+\r\n+    res.status(201).json({\r\n+      message: 'Babysitter registered successfully',\r\n+      data: result.rows[0],\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error inserting babysitter:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n app.get('/', (req, res) => {\r\n   res.send('TrustaSitter backend is running!');\r\n });\r\n \r\n"
                },
                {
                    "date": 1750482453869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,17 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+app.get('/api/babysitters', async (req, res) => {\r\n+  try {\r\n+    const result = await db.query('SELECT * FROM babysitters ORDER BY id ASC');\r\n+    res.status(200).json(result.rows);\r\n+  } catch (error) {\r\n+    console.error('Error fetching babysitters:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n app.get('/', (req, res) => {\r\n   res.send('TrustaSitter backend is running!');\r\n });\r\n \r\n"
                },
                {
                    "date": 1750485233528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,4 +56,22 @@\n const PORT = process.env.PORT || 3000;\r\n app.listen(PORT, () => {\r\n   console.log(`Server is running on port ${PORT}`);\r\n });\r\n+app.get('/api/babysitters/search', async (req, res) => {\r\n+  const { region, availability } = req.query;\r\n+\r\n+  try {\r\n+    const query = `\r\n+      SELECT * FROM babysitters\r\n+      WHERE region ILIKE $1 AND availability ILIKE $2\r\n+      ORDER BY id ASC\r\n+    `;\r\n+    const values = [`%${region}%`, `%${availability}%`];\r\n+    const result = await db.query(query, values);\r\n+\r\n+    res.status(200).json(result.rows);\r\n+  } catch (error) {\r\n+    console.error('Error searching babysitters:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n"
                },
                {
                    "date": 1750486119633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n const express = require('express');\r\n const app = express();\r\n+const bcrypt = require('bcrypt');\r\n \r\n const { Client } = require('pg');\r\n \r\n const db = new Client({\r\n@@ -74,4 +75,30 @@\n     console.error('Error searching babysitters:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n+\r\n+app.post('/api/users/register', async (req, res) => {\r\n+  const { name, email, password } = req.body;\r\n+\r\n+  try {\r\n+    // Criptografar a senha\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+\r\n+    const query = `\r\n+      INSERT INTO users (name, email, password)\r\n+      VALUES ($1, $2, $3)\r\n+      RETURNING id, name, email, created_at;\r\n+    `;\r\n+\r\n+    const values = [name, email, hashedPassword];\r\n+    const result = await db.query(query, values);\r\n+\r\n+    res.status(201).json({\r\n+      message: 'User registered successfully',\r\n+      user: result.rows[0],\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error registering user:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n"
                },
                {
                    "date": 1750486351040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,4 +101,37 @@\n     console.error('Error registering user:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n+\r\n+app.post('/api/users/login', async (req, res) => {\r\n+  const { email, password } = req.body;\r\n+\r\n+  try {\r\n+    const query = `SELECT * FROM users WHERE email = $1`;\r\n+    const result = await db.query(query, [email]);\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(401).json({ error: 'Invalid email or password' });\r\n+    }\r\n+\r\n+    const user = result.rows[0];\r\n+    const passwordMatch = await bcrypt.compare(password, user.password);\r\n+\r\n+    if (!passwordMatch) {\r\n+      return res.status(401).json({ error: 'Invalid email or password' });\r\n+    }\r\n+\r\n+    res.status(200).json({\r\n+      message: 'Login successful',\r\n+      user: {\r\n+        id: user.id,\r\n+        name: user.name,\r\n+        email: user.email,\r\n+        created_at: user.created_at\r\n+      }\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Login error:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n"
                },
                {
                    "date": 1750486650745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,4 +134,27 @@\n     console.error('Login error:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n+\r\n+app.post('/api/bookings', async (req, res) => {\r\n+  const { user_id, babysitter_id, date, time_start, time_end } = req.body;\r\n+\r\n+  try {\r\n+    const query = `\r\n+      INSERT INTO bookings (user_id, babysitter_id, date, time_start, time_end)\r\n+      VALUES ($1, $2, $3, $4, $5)\r\n+      RETURNING *;\r\n+    `;\r\n+\r\n+    const values = [user_id, babysitter_id, date, time_start, time_end];\r\n+    const result = await db.query(query, values);\r\n+\r\n+    res.status(201).json({\r\n+      message: 'Booking created successfully',\r\n+      booking: result.rows[0],\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error creating booking:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n"
                },
                {
                    "date": 1750487236957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,4 +157,26 @@\n     console.error('Error creating booking:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n+\r\n+app.get('/api/bookings/:user_id', async (req, res) => {\r\n+  const { user_id } = req.params;\r\n+\r\n+  try {\r\n+    const query = `\r\n+      SELECT \r\n+        b.id, b.date, b.time_start, b.time_end, b.status,\r\n+        bs.name AS babysitter_name, bs.region\r\n+      FROM bookings b\r\n+      JOIN babysitters bs ON b.babysitter_id = bs.id\r\n+      WHERE b.user_id = $1\r\n+      ORDER BY b.date ASC;\r\n+    `;\r\n+\r\n+    const result = await db.query(query, [user_id]);\r\n+    res.status(200).json(result.rows);\r\n+  } catch (error) {\r\n+    console.error('Error fetching bookings:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n"
                },
                {
                    "date": 1750487284240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,13 +157,14 @@\n     console.error('Error creating booking:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n-\r\n+// Route: Get all bookings for a specific user\r\n app.get('/api/bookings/:user_id', async (req, res) => {\r\n   const { user_id } = req.params;\r\n \r\n   try {\r\n+    // Query to fetch bookings and include babysitter details\r\n     const query = `\r\n       SELECT \r\n         b.id, b.date, b.time_start, b.time_end, b.status,\r\n         bs.name AS babysitter_name, bs.region\r\n@@ -173,8 +174,10 @@\n       ORDER BY b.date ASC;\r\n     `;\r\n \r\n     const result = await db.query(query, [user_id]);\r\n+\r\n+    // Return bookings list\r\n     res.status(200).json(result.rows);\r\n   } catch (error) {\r\n     console.error('Error fetching bookings:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n"
                },
                {
                    "date": 1750487373110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,32 @@\n+// Import dependencies\r\n const express = require('express');\r\n const app = express();\r\n const bcrypt = require('bcrypt');\r\n-\r\n const { Client } = require('pg');\r\n \r\n+// PostgreSQL client configuration\r\n const db = new Client({\r\n   user: 'postgres',\r\n   host: 'localhost',\r\n   database: 'trustasitter',\r\n   password: 'Senha00!',\r\n   port: 5432,\r\n });\r\n \r\n+// Connect to PostgreSQL\r\n db.connect()\r\n   .then(() => console.log('Connected to PostgreSQL ✅'))\r\n   .catch(err => console.error('Connection error ❌', err.stack));\r\n \r\n+// Middleware to parse JSON requests\r\n app.use(express.json());\r\n \r\n+/* ---------------------------\r\n+   Babysitters Routes\r\n+----------------------------*/\r\n+\r\n+// Route: Register a new babysitter\r\n app.post('/api/babysitters', async (req, res) => {\r\n   const { name, email, region, availability } = req.body;\r\n \r\n   try {\r\n@@ -40,8 +48,9 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+// Route: Get all babysitters\r\n app.get('/api/babysitters', async (req, res) => {\r\n   try {\r\n     const result = await db.query('SELECT * FROM babysitters ORDER BY id ASC');\r\n     res.status(200).json(result.rows);\r\n@@ -49,16 +58,10 @@\n     console.error('Error fetching babysitters:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n-app.get('/', (req, res) => {\r\n-  res.send('TrustaSitter backend is running!');\r\n-});\r\n \r\n-const PORT = process.env.PORT || 3000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server is running on port ${PORT}`);\r\n-});\r\n+// Route: Search babysitters by region and availability\r\n app.get('/api/babysitters/search', async (req, res) => {\r\n   const { region, availability } = req.query;\r\n \r\n   try {\r\n@@ -76,13 +79,18 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+/* ---------------------------\r\n+   Users Routes\r\n+----------------------------*/\r\n+\r\n+// Route: Register a new user (family)\r\n app.post('/api/users/register', async (req, res) => {\r\n   const { name, email, password } = req.body;\r\n \r\n   try {\r\n-    // Criptografar a senha\r\n+    // Hash the user's password\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n \r\n     const query = `\r\n       INSERT INTO users (name, email, password)\r\n@@ -102,8 +110,9 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+// Route: User login\r\n app.post('/api/users/login', async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n@@ -135,8 +144,13 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+/* ---------------------------\r\n+   Bookings Routes\r\n+----------------------------*/\r\n+\r\n+// Route: Create a new booking\r\n app.post('/api/bookings', async (req, res) => {\r\n   const { user_id, babysitter_id, date, time_start, time_end } = req.body;\r\n \r\n   try {\r\n@@ -157,14 +171,14 @@\n     console.error('Error creating booking:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n+\r\n // Route: Get all bookings for a specific user\r\n app.get('/api/bookings/:user_id', async (req, res) => {\r\n   const { user_id } = req.params;\r\n \r\n   try {\r\n-    // Query to fetch bookings and include babysitter details\r\n     const query = `\r\n       SELECT \r\n         b.id, b.date, b.time_start, b.time_end, b.status,\r\n         bs.name AS babysitter_name, bs.region\r\n@@ -175,11 +189,29 @@\n     `;\r\n \r\n     const result = await db.query(query, [user_id]);\r\n \r\n-    // Return bookings list\r\n     res.status(200).json(result.rows);\r\n   } catch (error) {\r\n     console.error('Error fetching bookings:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n+\r\n+/* ---------------------------\r\n+   Root Endpoint\r\n+----------------------------*/\r\n+\r\n+// Route: Root check\r\n+app.get('/', (req, res) => {\r\n+  res.send('TrustaSitter backend is running!');\r\n+});\r\n+\r\n+/* ---------------------------\r\n+   Server Initialization\r\n+----------------------------*/\r\n+\r\n+// Start server\r\n+const PORT = process.env.PORT || 3000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server is running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1751168558400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,8 +48,50 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+// Route: Babysitter login\r\n+app.post('/api/babysitters/login', async (req, res) => {\r\n+  const { email, password } = req.body;\r\n+\r\n+  try {\r\n+    // Validate input\r\n+    if (!email || !password) {\r\n+      return res.status(400).json({ error: 'Email and password are required.' });\r\n+    }\r\n+\r\n+    // Find babysitter by email\r\n+    const query = `SELECT * FROM babysitters WHERE email = $1`;\r\n+    const result = await db.query(query, [email]);\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(401).json({ error: 'Invalid email or password.' });\r\n+    }\r\n+\r\n+    const babysitter = result.rows[0];\r\n+\r\n+    // Compare passwords\r\n+    const isMatch = await bcrypt.compare(password, babysitter.password);\r\n+\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({ error: 'Invalid email or password.' });\r\n+    }\r\n+\r\n+    res.status(200).json({\r\n+      message: 'Login successful',\r\n+      babysitter: {\r\n+        id: babysitter.id,\r\n+        name: babysitter.name,\r\n+        email: babysitter.email,\r\n+        region: babysitter.region\r\n+      }\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Babysitter login error:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n // Route: Get all babysitters\r\n app.get('/api/babysitters', async (req, res) => {\r\n   try {\r\n     const result = await db.query('SELECT * FROM babysitters ORDER BY id ASC');\r\n@@ -88,9 +130,9 @@\n app.post('/api/users/register', async (req, res) => {\r\n   const { name, email, password } = req.body;\r\n \r\n   try {\r\n-    // Hash the user's password\r\n+    // Hash password\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n \r\n     const query = `\r\n       INSERT INTO users (name, email, password)\r\n@@ -119,16 +161,16 @@\n     const query = `SELECT * FROM users WHERE email = $1`;\r\n     const result = await db.query(query, [email]);\r\n \r\n     if (result.rows.length === 0) {\r\n-      return res.status(401).json({ error: 'Invalid email or password' });\r\n+      return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n \r\n     const user = result.rows[0];\r\n     const passwordMatch = await bcrypt.compare(password, user.password);\r\n \r\n     if (!passwordMatch) {\r\n-      return res.status(401).json({ error: 'Invalid email or password' });\r\n+      return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n \r\n     res.status(200).json({\r\n       message: 'Login successful',\r\n"
                },
                {
                    "date": 1751169365919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,28 +24,61 @@\n /* ---------------------------\r\n    Babysitters Routes\r\n ----------------------------*/\r\n \r\n-// Route: Register a new babysitter\r\n-app.post('/api/babysitters', async (req, res) => {\r\n-  const { name, email, region, availability } = req.body;\r\n+// Route: Register a new babysitter (with password, availability, rate, about)\r\n+app.post('/api/babysitters/register', async (req, res) => {\r\n+  const {\r\n+    name,\r\n+    email,\r\n+    password,\r\n+    phone,\r\n+    region,\r\n+    available_days,\r\n+    available_from,\r\n+    available_to,\r\n+    about,\r\n+    rate\r\n+  } = req.body;\r\n \r\n   try {\r\n+    // Validate required fields\r\n+    if (!name || !email || !password) {\r\n+      return res.status(400).json({ error: 'Name, email, and password are required.' });\r\n+    }\r\n+\r\n+    // Hash the password\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+\r\n     const query = `\r\n-      INSERT INTO babysitters (name, email, region, availability)\r\n-      VALUES ($1, $2, $3, $4)\r\n-      RETURNING *;\r\n+      INSERT INTO babysitters\r\n+      (name, email, password, phone, region, available_days, available_from, available_to, about, rate)\r\n+      VALUES\r\n+      ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\r\n+      RETURNING id, name, email, region, created_at;\r\n     `;\r\n \r\n-    const values = [name, email, region, availability];\r\n+    const values = [\r\n+      name,\r\n+      email,\r\n+      hashedPassword,\r\n+      phone,\r\n+      region,\r\n+      available_days,\r\n+      available_from,\r\n+      available_to,\r\n+      about,\r\n+      rate\r\n+    ];\r\n+\r\n     const result = await db.query(query, values);\r\n \r\n     res.status(201).json({\r\n-      message: 'Babysitter registered successfully',\r\n-      data: result.rows[0],\r\n+      message: 'Babysitter registered successfully.',\r\n+      babysitter: result.rows[0]\r\n     });\r\n   } catch (error) {\r\n-    console.error('Error inserting babysitter:', error);\r\n+    console.error('Error registering babysitter:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n@@ -53,24 +86,20 @@\n app.post('/api/babysitters/login', async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n-    // Validate input\r\n     if (!email || !password) {\r\n       return res.status(400).json({ error: 'Email and password are required.' });\r\n     }\r\n \r\n-    // Find babysitter by email\r\n     const query = `SELECT * FROM babysitters WHERE email = $1`;\r\n     const result = await db.query(query, [email]);\r\n \r\n     if (result.rows.length === 0) {\r\n       return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n \r\n     const babysitter = result.rows[0];\r\n-\r\n-    // Compare passwords\r\n     const isMatch = await bcrypt.compare(password, babysitter.password);\r\n \r\n     if (!isMatch) {\r\n       return res.status(401).json({ error: 'Invalid email or password.' });\r\n@@ -130,9 +159,8 @@\n app.post('/api/users/register', async (req, res) => {\r\n   const { name, email, password } = req.body;\r\n \r\n   try {\r\n-    // Hash password\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n \r\n     const query = `\r\n       INSERT INTO users (name, email, password)\r\n@@ -144,9 +172,9 @@\n     const result = await db.query(query, values);\r\n \r\n     res.status(201).json({\r\n       message: 'User registered successfully',\r\n-      user: result.rows[0],\r\n+      user: result.rows[0]\r\n     });\r\n   } catch (error) {\r\n     console.error('Error registering user:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n@@ -206,9 +234,9 @@\n     const result = await db.query(query, values);\r\n \r\n     res.status(201).json({\r\n       message: 'Booking created successfully',\r\n-      booking: result.rows[0],\r\n+      booking: result.rows[0]\r\n     });\r\n   } catch (error) {\r\n     console.error('Error creating booking:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n"
                },
                {
                    "date": 1751170145546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n /* ---------------------------\r\n    Babysitters Routes\r\n ----------------------------*/\r\n \r\n-// Route: Register a new babysitter (with password, availability, rate, about)\r\n+// Route: Register a new babysitter\r\n app.post('/api/babysitters/register', async (req, res) => {\r\n   const {\r\n     name,\r\n     email,\r\n@@ -41,10 +41,10 @@\n   } = req.body;\r\n \r\n   try {\r\n     // Validate required fields\r\n-    if (!name || !email || !password) {\r\n-      return res.status(400).json({ error: 'Name, email, and password are required.' });\r\n+    if (!name || !email || !password || !region || !available_days || !available_from || !available_to || !rate) {\r\n+      return res.status(400).json({ error: 'All required fields must be filled.' });\r\n     }\r\n \r\n     // Hash the password\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n@@ -130,19 +130,19 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Search babysitters by region and availability\r\n+// Route: Search babysitters by region\r\n app.get('/api/babysitters/search', async (req, res) => {\r\n-  const { region, availability } = req.query;\r\n+  const { region } = req.query;\r\n \r\n   try {\r\n     const query = `\r\n       SELECT * FROM babysitters\r\n-      WHERE region ILIKE $1 AND availability ILIKE $2\r\n+      WHERE region ILIKE $1\r\n       ORDER BY id ASC\r\n     `;\r\n-    const values = [`%${region}%`, `%${availability}%`];\r\n+    const values = [`%${region}%`];\r\n     const result = await db.query(query, values);\r\n \r\n     res.status(200).json(result.rows);\r\n   } catch (error) {\r\n@@ -154,13 +154,17 @@\n /* ---------------------------\r\n    Users Routes\r\n ----------------------------*/\r\n \r\n-// Route: Register a new user (family)\r\n+// Route: Register a new user (client)\r\n app.post('/api/users/register', async (req, res) => {\r\n   const { name, email, password } = req.body;\r\n \r\n   try {\r\n+    if (!name || !email || !password) {\r\n+      return res.status(400).json({ error: 'Name, email, and password are required.' });\r\n+    }\r\n+\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n \r\n     const query = `\r\n       INSERT INTO users (name, email, password)\r\n@@ -171,9 +175,9 @@\n     const values = [name, email, hashedPassword];\r\n     const result = await db.query(query, values);\r\n \r\n     res.status(201).json({\r\n-      message: 'User registered successfully',\r\n+      message: 'User registered successfully.',\r\n       user: result.rows[0]\r\n     });\r\n   } catch (error) {\r\n     console.error('Error registering user:', error);\r\n@@ -185,8 +189,12 @@\n app.post('/api/users/login', async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n+    if (!email || !password) {\r\n+      return res.status(400).json({ error: 'Email and password are required.' });\r\n+    }\r\n+\r\n     const query = `SELECT * FROM users WHERE email = $1`;\r\n     const result = await db.query(query, [email]);\r\n \r\n     if (result.rows.length === 0) {\r\n@@ -233,9 +241,9 @@\n     const values = [user_id, babysitter_id, date, time_start, time_end];\r\n     const result = await db.query(query, values);\r\n \r\n     res.status(201).json({\r\n-      message: 'Booking created successfully',\r\n+      message: 'Booking created successfully.',\r\n       booking: result.rows[0]\r\n     });\r\n   } catch (error) {\r\n     console.error('Error creating booking:', error);\r\n@@ -279,9 +287,8 @@\n /* ---------------------------\r\n    Server Initialization\r\n ----------------------------*/\r\n \r\n-// Start server\r\n const PORT = process.env.PORT || 3000;\r\n app.listen(PORT, () => {\r\n   console.log(`Server is running on port ${PORT}`);\r\n });\r\n"
                },
                {
                    "date": 1751174150925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n // Import dependencies\r\n const express = require('express');\r\n const app = express();\r\n const bcrypt = require('bcrypt');\r\n+const jwt = require('jsonwebtoken'); // ✅ Import JWT\r\n const { Client } = require('pg');\r\n \r\n // PostgreSQL client configuration\r\n const db = new Client({\r\n@@ -81,9 +82,9 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Babysitter login\r\n+// Route: Babysitter login with JWT token\r\n app.post('/api/babysitters/login', async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n@@ -104,10 +105,21 @@\n     if (!isMatch) {\r\n       return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n \r\n+    // Generate JWT token\r\n+    const token = jwt.sign(\r\n+      {\r\n+        id: babysitter.id,\r\n+        email: babysitter.email\r\n+      },\r\n+      'your_jwt_secret_key', // ⚠️ Replace with environment variable in production\r\n+      { expiresIn: '3h' }\r\n+    );\r\n+\r\n     res.status(200).json({\r\n       message: 'Login successful',\r\n+      token,\r\n       babysitter: {\r\n         id: babysitter.id,\r\n         name: babysitter.name,\r\n         email: babysitter.email,\r\n"
                },
                {
                    "date": 1751176365863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,14 +41,12 @@\n     rate\r\n   } = req.body;\r\n \r\n   try {\r\n-    // Validate required fields\r\n     if (!name || !email || !password || !region || !available_days || !available_from || !available_to || !rate) {\r\n       return res.status(400).json({ error: 'All required fields must be filled.' });\r\n     }\r\n \r\n-    // Hash the password\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n \r\n     const query = `\r\n       INSERT INTO babysitters\r\n@@ -105,15 +103,11 @@\n     if (!isMatch) {\r\n       return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n \r\n-    // Generate JWT token\r\n     const token = jwt.sign(\r\n-      {\r\n-        id: babysitter.id,\r\n-        email: babysitter.email\r\n-      },\r\n-      'your_jwt_secret_key', // ⚠️ Replace with environment variable in production\r\n+      { id: babysitter.id, email: babysitter.email },\r\n+      'your_jwt_secret_key',\r\n       { expiresIn: '3h' }\r\n     );\r\n \r\n     res.status(200).json({\r\n@@ -196,9 +190,9 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: User login\r\n+// Route: User login with JWT token\r\n app.post('/api/users/login', async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n@@ -213,25 +207,32 @@\n       return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n \r\n     const user = result.rows[0];\r\n-    const passwordMatch = await bcrypt.compare(password, user.password);\r\n+    const isMatch = await bcrypt.compare(password, user.password);\r\n \r\n-    if (!passwordMatch) {\r\n+    if (!isMatch) {\r\n       return res.status(401).json({ error: 'Invalid email or password.' });\r\n     }\r\n \r\n+    const token = jwt.sign(\r\n+      { id: user.id, email: user.email },\r\n+      'your_jwt_secret_key',\r\n+      { expiresIn: '3h' }\r\n+    );\r\n+\r\n     res.status(200).json({\r\n       message: 'Login successful',\r\n+      token,\r\n       user: {\r\n         id: user.id,\r\n         name: user.name,\r\n         email: user.email,\r\n         created_at: user.created_at\r\n       }\r\n     });\r\n   } catch (error) {\r\n-    console.error('Login error:', error);\r\n+    console.error('User login error:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n@@ -289,18 +290,15 @@\n \r\n /* ---------------------------\r\n    Root Endpoint\r\n ----------------------------*/\r\n-\r\n-// Route: Root check\r\n app.get('/', (req, res) => {\r\n   res.send('TrustaSitter backend is running!');\r\n });\r\n \r\n /* ---------------------------\r\n    Server Initialization\r\n ----------------------------*/\r\n-\r\n const PORT = process.env.PORT || 3000;\r\n app.listen(PORT, () => {\r\n   console.log(`Server is running on port ${PORT}`);\r\n });\r\n"
                },
                {
                    "date": 1751176402500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n // Import dependencies\r\n const express = require('express');\r\n const app = express();\r\n const bcrypt = require('bcrypt');\r\n-const jwt = require('jsonwebtoken'); // ✅ Import JWT\r\n+const jwt = require('jsonwebtoken'); //Import JWT\r\n const { Client } = require('pg');\r\n \r\n // PostgreSQL client configuration\r\n const db = new Client({\r\n@@ -15,10 +15,10 @@\n });\r\n \r\n // Connect to PostgreSQL\r\n db.connect()\r\n-  .then(() => console.log('Connected to PostgreSQL ✅'))\r\n-  .catch(err => console.error('Connection error ❌', err.stack));\r\n+  .then(() => console.log('Connected to PostgreSQL'))\r\n+  .catch(err => console.error('Connection error', err.stack));\r\n \r\n // Middleware to parse JSON requests\r\n app.use(express.json());\r\n \r\n"
                },
                {
                    "date": 1751178352894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n // Import dependencies\r\n const express = require('express');\r\n const app = express();\r\n const bcrypt = require('bcrypt');\r\n-const jwt = require('jsonwebtoken'); //Import JWT\r\n+const jwt = require('jsonwebtoken');\r\n const { Client } = require('pg');\r\n \r\n // PostgreSQL client configuration\r\n const db = new Client({\r\n@@ -21,11 +21,11 @@\n \r\n // Middleware to parse JSON requests\r\n app.use(express.json());\r\n \r\n-/* ---------------------------\r\n+/* -----------------------------------\r\n    Babysitters Routes\r\n-----------------------------*/\r\n+----------------------------------- */\r\n \r\n // Route: Register a new babysitter\r\n app.post('/api/babysitters/register', async (req, res) => {\r\n   const {\r\n@@ -80,9 +80,9 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Babysitter login with JWT token\r\n+// Route: Babysitter login with JWT\r\n app.post('/api/babysitters/login', async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n@@ -156,13 +156,13 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-/* ---------------------------\r\n+/* -----------------------------------\r\n    Users Routes\r\n-----------------------------*/\r\n+----------------------------------- */\r\n \r\n-// Route: Register a new user (client)\r\n+// Route: Register a new user\r\n app.post('/api/users/register', async (req, res) => {\r\n   const { name, email, password } = req.body;\r\n \r\n   try {\r\n@@ -190,9 +190,9 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: User login with JWT token\r\n+// Route: User login with JWT\r\n app.post('/api/users/login', async (req, res) => {\r\n   const { email, password } = req.body;\r\n \r\n   try {\r\n@@ -235,11 +235,37 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-/* ---------------------------\r\n+// Route: Get logged-in user profile\r\n+app.get('/api/users/profile', async (req, res) => {\r\n+  const authHeader = req.headers.authorization;\r\n+\r\n+  try {\r\n+    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n+      return res.status(401).json({ error: 'Authorization header missing.' });\r\n+    }\r\n+\r\n+    const token = authHeader.split(' ')[1];\r\n+    const decoded = jwt.verify(token, 'your_jwt_secret_key');\r\n+\r\n+    const query = `SELECT id, name, email, created_at FROM users WHERE id = $1`;\r\n+    const result = await db.query(query, [decoded.id]);\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n+    }\r\n+\r\n+    res.status(200).json(result.rows[0]);\r\n+  } catch (error) {\r\n+    console.error('Profile fetch error:', error);\r\n+    res.status(401).json({ error: 'Invalid or expired token.' });\r\n+  }\r\n+});\r\n+\r\n+/* -----------------------------------\r\n    Bookings Routes\r\n-----------------------------*/\r\n+----------------------------------- */\r\n \r\n // Route: Create a new booking\r\n app.post('/api/bookings', async (req, res) => {\r\n   const { user_id, babysitter_id, date, time_start, time_end } = req.body;\r\n@@ -249,9 +275,8 @@\n       INSERT INTO bookings (user_id, babysitter_id, date, time_start, time_end)\r\n       VALUES ($1, $2, $3, $4, $5)\r\n       RETURNING *;\r\n     `;\r\n-\r\n     const values = [user_id, babysitter_id, date, time_start, time_end];\r\n     const result = await db.query(query, values);\r\n \r\n     res.status(201).json({\r\n@@ -263,9 +288,9 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Get all bookings for a specific user\r\n+// Route: Get all bookings for a user\r\n app.get('/api/bookings/:user_id', async (req, res) => {\r\n   const { user_id } = req.params;\r\n \r\n   try {\r\n@@ -277,9 +302,8 @@\n       JOIN babysitters bs ON b.babysitter_id = bs.id\r\n       WHERE b.user_id = $1\r\n       ORDER BY b.date ASC;\r\n     `;\r\n-\r\n     const result = await db.query(query, [user_id]);\r\n \r\n     res.status(200).json(result.rows);\r\n   } catch (error) {\r\n@@ -287,18 +311,18 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-/* ---------------------------\r\n+/* -----------------------------------\r\n    Root Endpoint\r\n-----------------------------*/\r\n+----------------------------------- */\r\n app.get('/', (req, res) => {\r\n   res.send('TrustaSitter backend is running!');\r\n });\r\n \r\n-/* ---------------------------\r\n+/* -----------------------------------\r\n    Server Initialization\r\n-----------------------------*/\r\n+----------------------------------- */\r\n const PORT = process.env.PORT || 3000;\r\n app.listen(PORT, () => {\r\n   console.log(`Server is running on port ${PORT}`);\r\n });\r\n"
                },
                {
                    "date": 1751180100997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,8 +125,34 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+// Route: Get babysitter profile (requires valid JWT)\r\n+app.get('/api/babysitters/profile', async (req, res) => {\r\n+  try {\r\n+    const authHeader = req.headers.authorization;\r\n+\r\n+    if (!authHeader) {\r\n+      return res.status(401).json({ error: 'Authorization header missing.' });\r\n+    }\r\n+\r\n+    const token = authHeader.split(' ')[1];\r\n+    const decoded = jwt.verify(token, 'your_jwt_secret_key');\r\n+\r\n+    const query = `SELECT id, name, email, region, phone, available_days, available_from, available_to, about, rate, created_at FROM babysitters WHERE id = $1`;\r\n+    const result = await db.query(query, [decoded.id]);\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'Babysitter not found.' });\r\n+    }\r\n+\r\n+    res.status(200).json(result.rows[0]);\r\n+  } catch (error) {\r\n+    console.error('Error fetching babysitter profile:', error);\r\n+    res.status(401).json({ error: 'Invalid or expired token.' });\r\n+  }\r\n+});\r\n+\r\n // Route: Get all babysitters\r\n app.get('/api/babysitters', async (req, res) => {\r\n   try {\r\n     const result = await db.query('SELECT * FROM babysitters ORDER BY id ASC');\r\n"
                },
                {
                    "date": 1751193341269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n const app = express();\r\n const bcrypt = require('bcrypt');\r\n const jwt = require('jsonwebtoken');\r\n const { Client } = require('pg');\r\n+const authMiddleware = require('./middleware/authMiddleware'); // ✅ importado\r\n \r\n // PostgreSQL client configuration\r\n const db = new Client({\r\n   user: 'postgres',\r\n@@ -125,31 +126,26 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Get babysitter profile (requires valid JWT)\r\n-app.get('/api/babysitters/profile', async (req, res) => {\r\n+// Route: Get babysitter profile (protected)\r\n+app.get('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n   try {\r\n-    const authHeader = req.headers.authorization;\r\n+    const query = `\r\n+      SELECT id, name, email, region, phone, available_days, available_from, available_to, about, rate, created_at\r\n+      FROM babysitters\r\n+      WHERE id = $1\r\n+    `;\r\n+    const result = await db.query(query, [req.user.id]);\r\n \r\n-    if (!authHeader) {\r\n-      return res.status(401).json({ error: 'Authorization header missing.' });\r\n-    }\r\n-\r\n-    const token = authHeader.split(' ')[1];\r\n-    const decoded = jwt.verify(token, 'your_jwt_secret_key');\r\n-\r\n-    const query = `SELECT id, name, email, region, phone, available_days, available_from, available_to, about, rate, created_at FROM babysitters WHERE id = $1`;\r\n-    const result = await db.query(query, [decoded.id]);\r\n-\r\n     if (result.rows.length === 0) {\r\n       return res.status(404).json({ error: 'Babysitter not found.' });\r\n     }\r\n \r\n     res.status(200).json(result.rows[0]);\r\n   } catch (error) {\r\n     console.error('Error fetching babysitter profile:', error);\r\n-    res.status(401).json({ error: 'Invalid or expired token.' });\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n // Route: Get all babysitters\r\n@@ -261,39 +257,30 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Get logged-in user profile\r\n-app.get('/api/users/profile', async (req, res) => {\r\n-  const authHeader = req.headers.authorization;\r\n-\r\n+// Route: Get logged-in user profile (protected)\r\n+app.get('/api/users/profile', authMiddleware, async (req, res) => {\r\n   try {\r\n-    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n-      return res.status(401).json({ error: 'Authorization header missing.' });\r\n-    }\r\n-\r\n-    const token = authHeader.split(' ')[1];\r\n-    const decoded = jwt.verify(token, 'your_jwt_secret_key');\r\n-\r\n     const query = `SELECT id, name, email, created_at FROM users WHERE id = $1`;\r\n-    const result = await db.query(query, [decoded.id]);\r\n+    const result = await db.query(query, [req.user.id]);\r\n \r\n     if (result.rows.length === 0) {\r\n       return res.status(404).json({ error: 'User not found.' });\r\n     }\r\n \r\n     res.status(200).json(result.rows[0]);\r\n   } catch (error) {\r\n     console.error('Profile fetch error:', error);\r\n-    res.status(401).json({ error: 'Invalid or expired token.' });\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n /* -----------------------------------\r\n    Bookings Routes\r\n ----------------------------------- */\r\n \r\n-// Route: Create a new booking\r\n+// Route: Create a new booking (could be protected if desired)\r\n app.post('/api/bookings', async (req, res) => {\r\n   const { user_id, babysitter_id, date, time_start, time_end } = req.body;\r\n \r\n   try {\r\n@@ -314,9 +301,9 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Get all bookings for a user\r\n+// Route: Get all bookings for a user (you can protect if you want)\r\n app.get('/api/bookings/:user_id', async (req, res) => {\r\n   const { user_id } = req.params;\r\n \r\n   try {\r\n"
                },
                {
                    "date": 1751194941131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,12 @@\n // Import dependencies\r\n-const express = require('express');\r\n-const app = express();\r\n-const bcrypt = require('bcrypt');\r\n-const jwt = require('jsonwebtoken');\r\n-const { Client } = require('pg');\r\n-const authMiddleware = require('./middleware/authMiddleware'); // ✅ importado\r\n+const express = require('express'); // Express framework for building the API\r\n+const app = express(); // Express application for building the API\r\n+const bcrypt = require('bcrypt'); // for hashing passwords\r\n+require('dotenv').config(); //  to load environment variables\r\n+const jwt = require('jsonwebtoken'); // JSON Web Token for authentication\r\n+const { Client } = require('pg'); // PostgreSQL client for database operations\r\n+const authMiddleware = require('./middleware/authMiddleware'); // custom authentication middleware\r\n \r\n // PostgreSQL client configuration\r\n const db = new Client({\r\n   user: 'postgres',\r\n"
                },
                {
                    "date": 1751195189697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n // Import dependencies\r\n const express = require('express'); // Express framework for building the API\r\n const app = express(); // Express application for building the API\r\n+require('dotenv').config(); // to load environment variables\r\n const bcrypt = require('bcrypt'); // for hashing passwords\r\n-require('dotenv').config(); //  to load environment variables\r\n const jwt = require('jsonwebtoken'); // JSON Web Token for authentication\r\n const { Client } = require('pg'); // PostgreSQL client for database operations\r\n const authMiddleware = require('./middleware/authMiddleware'); // custom authentication middleware\r\n \r\n@@ -107,9 +107,9 @@\n     }\r\n \r\n     const token = jwt.sign(\r\n       { id: babysitter.id, email: babysitter.email },\r\n-      'your_jwt_secret_key',\r\n+      process.env.JWT_SECRET,\r\n       { expiresIn: '3h' }\r\n     );\r\n \r\n     res.status(200).json({\r\n@@ -238,9 +238,9 @@\n     }\r\n \r\n     const token = jwt.sign(\r\n       { id: user.id, email: user.email },\r\n-      'your_jwt_secret_key',\r\n+      process.env.JWT_SECRET,\r\n       { expiresIn: '3h' }\r\n     );\r\n \r\n     res.status(200).json({\r\n@@ -279,9 +279,9 @@\n /* -----------------------------------\r\n    Bookings Routes\r\n ----------------------------------- */\r\n \r\n-// Route: Create a new booking (could be protected if desired)\r\n+// Route: Create a new booking\r\n app.post('/api/bookings', async (req, res) => {\r\n   const { user_id, babysitter_id, date, time_start, time_end } = req.body;\r\n \r\n   try {\r\n@@ -302,9 +302,9 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Get all bookings for a user (you can protect if you want)\r\n+// Route: Get all bookings for a user\r\n app.get('/api/bookings/:user_id', async (req, res) => {\r\n   const { user_id } = req.params;\r\n \r\n   try {\r\n"
                },
                {
                    "date": 1751195604643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,8 +148,83 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+// Route: Update babysitter profile (protected)\r\n+app.put('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n+  const {\r\n+    name,\r\n+    email,\r\n+    phone,\r\n+    region,\r\n+    available_days,\r\n+    available_from,\r\n+    available_to,\r\n+    about,\r\n+    rate,\r\n+    password\r\n+  } = req.body;\r\n+\r\n+  try {\r\n+    const queryBabysitter = `SELECT * FROM babysitters WHERE id = $1`;\r\n+    const resultBabysitter = await db.query(queryBabysitter, [req.user.id]);\r\n+\r\n+    if (resultBabysitter.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'Babysitter not found.' });\r\n+    }\r\n+\r\n+    const updates = {\r\n+      name: name || resultBabysitter.rows[0].name,\r\n+      email: email || resultBabysitter.rows[0].email,\r\n+      phone: phone || resultBabysitter.rows[0].phone,\r\n+      region: region || resultBabysitter.rows[0].region,\r\n+      available_days: available_days || resultBabysitter.rows[0].available_days,\r\n+      available_from: available_from || resultBabysitter.rows[0].available_from,\r\n+      available_to: available_to || resultBabysitter.rows[0].available_to,\r\n+      about: about || resultBabysitter.rows[0].about,\r\n+      rate: rate || resultBabysitter.rows[0].rate\r\n+    };\r\n+\r\n+    let hashedPassword = resultBabysitter.rows[0].password;\r\n+    if (password) {\r\n+      hashedPassword = await bcrypt.hash(password, 10);\r\n+    }\r\n+\r\n+    const queryUpdate = `\r\n+      UPDATE babysitters\r\n+      SET name = $1, email = $2, phone = $3, region = $4,\r\n+          available_days = $5, available_from = $6, available_to = $7,\r\n+          about = $8, rate = $9, password = $10\r\n+      WHERE id = $11\r\n+      RETURNING id, name, email, region, phone, available_days, available_from, available_to, about, rate, created_at;\r\n+    `;\r\n+\r\n+    const values = [\r\n+      updates.name,\r\n+      updates.email,\r\n+      updates.phone,\r\n+      updates.region,\r\n+      updates.available_days,\r\n+      updates.available_from,\r\n+      updates.available_to,\r\n+      updates.about,\r\n+      updates.rate,\r\n+      hashedPassword,\r\n+      req.user.id\r\n+    ];\r\n+\r\n+    const result = await db.query(queryUpdate, values);\r\n+\r\n+    res.status(200).json({\r\n+      message: 'Babysitter profile updated successfully.',\r\n+      babysitter: result.rows[0]\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error updating babysitter profile:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n // Route: Get all babysitters\r\n app.get('/api/babysitters', async (req, res) => {\r\n   try {\r\n     const result = await db.query('SELECT * FROM babysitters ORDER BY id ASC');\r\n@@ -275,8 +350,50 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+// Route: Update user profile (protected)\r\n+app.put('/api/users/profile', authMiddleware, async (req, res) => {\r\n+  const { name, email, password } = req.body;\r\n+\r\n+  try {\r\n+    const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n+    const resultUser = await db.query(queryUser, [req.user.id]);\r\n+\r\n+    if (resultUser.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n+    }\r\n+\r\n+    const updates = {\r\n+      name: name || resultUser.rows[0].name,\r\n+      email: email || resultUser.rows[0].email\r\n+    };\r\n+\r\n+    let hashedPassword = resultUser.rows[0].password;\r\n+    if (password) {\r\n+      hashedPassword = await bcrypt.hash(password, 10);\r\n+    }\r\n+\r\n+    const queryUpdate = `\r\n+      UPDATE users\r\n+      SET name = $1, email = $2, password = $3\r\n+      WHERE id = $4\r\n+      RETURNING id, name, email, created_at;\r\n+    `;\r\n+\r\n+    const values = [updates.name, updates.email, hashedPassword, req.user.id];\r\n+    const result = await db.query(queryUpdate, values);\r\n+\r\n+    res.status(200).json({\r\n+      message: 'Profile updated successfully.',\r\n+      user: result.rows[0]\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error updating profile:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n /* -----------------------------------\r\n    Bookings Routes\r\n ----------------------------------- */\r\n \r\n"
                },
                {
                    "date": 1751196574530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -223,8 +223,25 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+// Route: Delete babysitter account (protected)\r\n+app.delete('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    const query = `DELETE FROM babysitters WHERE id = $1 RETURNING id`;\r\n+    const result = await db.query(query, [req.user.id]);\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'Babysitter not found.' });\r\n+    }\r\n+\r\n+    res.status(200).json({ message: 'Babysitter account deleted successfully.' });\r\n+  } catch (error) {\r\n+    console.error('Error deleting babysitter account:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n // Route: Get all babysitters\r\n app.get('/api/babysitters', async (req, res) => {\r\n   try {\r\n     const result = await db.query('SELECT * FROM babysitters ORDER BY id ASC');\r\n@@ -392,8 +409,26 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+// Route: Delete user account (protected)\r\n+app.delete('/api/users/profile', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    const query = `DELETE FROM users WHERE id = $1 RETURNING id`;\r\n+    const result = await db.query(query, [req.user.id]);\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n+    }\r\n+\r\n+    res.status(200).json({ message: 'User account deleted successfully.' });\r\n+  } catch (error) {\r\n+    console.error('Error deleting user account:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+\r\n /* -----------------------------------\r\n    Bookings Routes\r\n ----------------------------------- */\r\n \r\n"
                },
                {
                    "date": 1751196949520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -421,9 +421,9 @@\n     }\r\n \r\n     res.status(200).json({ message: 'User account deleted successfully.' });\r\n   } catch (error) {\r\n-    console.error('Error deleting user account:', error);\r\n+    console.error('Error deleting user account:', error.message);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n"
                },
                {
                    "date": 1751197480257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,12 @@\n // Import dependencies\r\n-const express = require('express'); // Express framework for building the API\r\n-const app = express(); // Express application for building the API\r\n-require('dotenv').config(); // to load environment variables\r\n-const bcrypt = require('bcrypt'); // for hashing passwords\r\n+const express = require('express');\r\n+const app = express();\r\n+require('dotenv').config(); // Load environment variables\r\n+const bcrypt = require('bcrypt'); // For hashing passwords\r\n const jwt = require('jsonwebtoken'); // JSON Web Token for authentication\r\n-const { Client } = require('pg'); // PostgreSQL client for database operations\r\n-const authMiddleware = require('./middleware/authMiddleware'); // custom authentication middleware\r\n+const { Client } = require('pg'); // PostgreSQL client\r\n+const authMiddleware = require('./middleware/authMiddleware'); // Custom authentication middleware\r\n \r\n // PostgreSQL client configuration\r\n const db = new Client({\r\n   user: 'postgres',\r\n@@ -223,56 +223,40 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Delete babysitter account (protected)\r\n+// Route: Delete babysitter account (protected, must have no bookings)\r\n app.delete('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n   try {\r\n-    const query = `DELETE FROM babysitters WHERE id = $1 RETURNING id`;\r\n-    const result = await db.query(query, [req.user.id]);\r\n+    // Check if babysitter has related bookings\r\n+    const bookingCheck = await db.query(\r\n+      `SELECT id FROM bookings WHERE babysitter_id = $1`,\r\n+      [req.user.id]\r\n+    );\r\n \r\n+    if (bookingCheck.rows.length > 0) {\r\n+      return res.status(400).json({\r\n+        error: 'You must cancel all bookings before deleting your account.'\r\n+      });\r\n+    }\r\n+\r\n+    // Delete babysitter\r\n+    const result = await db.query(\r\n+      `DELETE FROM babysitters WHERE id = $1 RETURNING id`,\r\n+      [req.user.id]\r\n+    );\r\n+\r\n     if (result.rows.length === 0) {\r\n       return res.status(404).json({ error: 'Babysitter not found.' });\r\n     }\r\n \r\n     res.status(200).json({ message: 'Babysitter account deleted successfully.' });\r\n   } catch (error) {\r\n-    console.error('Error deleting babysitter account:', error);\r\n+    console.error('Error deleting babysitter account:', error.message);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Get all babysitters\r\n-app.get('/api/babysitters', async (req, res) => {\r\n-  try {\r\n-    const result = await db.query('SELECT * FROM babysitters ORDER BY id ASC');\r\n-    res.status(200).json(result.rows);\r\n-  } catch (error) {\r\n-    console.error('Error fetching babysitters:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Search babysitters by region\r\n-app.get('/api/babysitters/search', async (req, res) => {\r\n-  const { region } = req.query;\r\n-\r\n-  try {\r\n-    const query = `\r\n-      SELECT * FROM babysitters\r\n-      WHERE region ILIKE $1\r\n-      ORDER BY id ASC\r\n-    `;\r\n-    const values = [`%${region}%`];\r\n-    const result = await db.query(query, values);\r\n-\r\n-    res.status(200).json(result.rows);\r\n-  } catch (error) {\r\n-    console.error('Error searching babysitters:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n /* -----------------------------------\r\n    Users Routes\r\n ----------------------------------- */\r\n \r\n"
                },
                {
                    "date": 1751197768673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -393,14 +393,29 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Delete user account (protected)\r\n+// Route: Delete user account (protected, must have no bookings)\r\n app.delete('/api/users/profile', authMiddleware, async (req, res) => {\r\n   try {\r\n-    const query = `DELETE FROM users WHERE id = $1 RETURNING id`;\r\n-    const result = await db.query(query, [req.user.id]);\r\n+    // Check if user has related bookings\r\n+    const bookingCheck = await db.query(\r\n+      `SELECT id FROM bookings WHERE user_id = $1`,\r\n+      [req.user.id]\r\n+    );\r\n \r\n+    if (bookingCheck.rows.length > 0) {\r\n+      return res.status(400).json({\r\n+        error: 'You must cancel all bookings before deleting your account.'\r\n+      });\r\n+    }\r\n+\r\n+    // Delete user\r\n+    const result = await db.query(\r\n+      `DELETE FROM users WHERE id = $1 RETURNING id`,\r\n+      [req.user.id]\r\n+    );\r\n+\r\n     if (result.rows.length === 0) {\r\n       return res.status(404).json({ error: 'User not found.' });\r\n     }\r\n \r\n@@ -410,9 +425,8 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-\r\n /* -----------------------------------\r\n    Bookings Routes\r\n ----------------------------------- */\r\n \r\n"
                },
                {
                    "date": 1751198367955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -425,8 +425,21 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+// Route: Get all users (protected)\r\n+app.get('/api/users', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    const query = `SELECT id, name, email, created_at FROM users ORDER BY id ASC`;\r\n+    const result = await db.query(query);\r\n+\r\n+    res.status(200).json(result.rows);\r\n+  } catch (error) {\r\n+    console.error('Error fetching users:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n /* -----------------------------------\r\n    Bookings Routes\r\n ----------------------------------- */\r\n \r\n"
                },
                {
                    "date": 1751202595678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -438,8 +438,86 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+// Route: Universal login (users or babysitters)\r\n+app.post('/api/login', async (req, res) => {\r\n+  const { email, password } = req.body;\r\n+\r\n+  try {\r\n+    if (!email || !password) {\r\n+      return res.status(400).json({ error: 'Email and password are required.' });\r\n+    }\r\n+\r\n+    // First try to find in users\r\n+    const userQuery = `SELECT * FROM users WHERE email = $1`;\r\n+    const userResult = await db.query(userQuery, [email]);\r\n+\r\n+    if (userResult.rows.length > 0) {\r\n+      const user = userResult.rows[0];\r\n+      const isMatch = await bcrypt.compare(password, user.password);\r\n+      if (!isMatch) {\r\n+        return res.status(401).json({ error: 'Invalid email or password.' });\r\n+      }\r\n+\r\n+      const token = jwt.sign(\r\n+        { id: user.id, email: user.email, role: 'user' },\r\n+        process.env.JWT_SECRET,\r\n+        { expiresIn: '3h' }\r\n+      );\r\n+\r\n+      return res.status(200).json({\r\n+        message: 'Login successful',\r\n+        token,\r\n+        role: 'user',\r\n+        user: {\r\n+          id: user.id,\r\n+          name: user.name,\r\n+          email: user.email,\r\n+          created_at: user.created_at\r\n+        }\r\n+      });\r\n+    }\r\n+\r\n+    // If not found, try babysitters\r\n+    const babysitterQuery = `SELECT * FROM babysitters WHERE email = $1`;\r\n+    const babysitterResult = await db.query(babysitterQuery, [email]);\r\n+\r\n+    if (babysitterResult.rows.length > 0) {\r\n+      const babysitter = babysitterResult.rows[0];\r\n+      const isMatch = await bcrypt.compare(password, babysitter.password);\r\n+      if (!isMatch) {\r\n+        return res.status(401).json({ error: 'Invalid email or password.' });\r\n+      }\r\n+\r\n+      const token = jwt.sign(\r\n+        { id: babysitter.id, email: babysitter.email, role: 'babysitter' },\r\n+        process.env.JWT_SECRET,\r\n+        { expiresIn: '3h' }\r\n+      );\r\n+\r\n+      return res.status(200).json({\r\n+        message: 'Login successful',\r\n+        token,\r\n+        role: 'babysitter',\r\n+        user: {\r\n+          id: babysitter.id,\r\n+          name: babysitter.name,\r\n+          email: babysitter.email,\r\n+          region: babysitter.region\r\n+        }\r\n+      });\r\n+    }\r\n+\r\n+    // Not found in either table\r\n+    return res.status(401).json({ error: 'Invalid email or password.' });\r\n+\r\n+  } catch (error) {\r\n+    console.error('Universal login error:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n /* -----------------------------------\r\n    Bookings Routes\r\n ----------------------------------- */\r\n \r\n"
                },
                {
                    "date": 1751205174158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n const bcrypt = require('bcrypt'); // For hashing passwords\r\n const jwt = require('jsonwebtoken'); // JSON Web Token for authentication\r\n const { Client } = require('pg'); // PostgreSQL client\r\n const authMiddleware = require('./middleware/authMiddleware'); // Custom authentication middleware\r\n+const cors = require('cors'); // For handling CORS\r\n \r\n // PostgreSQL client configuration\r\n const db = new Client({\r\n   user: 'postgres',\r\n"
                },
                {
                    "date": 1751205213229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n   .catch(err => console.error('Connection error', err.stack));\r\n \r\n // Middleware to parse JSON requests\r\n app.use(express.json());\r\n+app.use(cors());\r\n \r\n /* -----------------------------------\r\n    Babysitters Routes\r\n ----------------------------------- */\r\n"
                },
                {
                    "date": 1751209121221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,628 @@\n+// Import dependencies\r\n+const express = require('express');\r\n+const app = express();\r\n+require('dotenv').config(); // Load environment variables\r\n+const bcrypt = require('bcrypt'); // For hashing passwords\r\n+const jwt = require('jsonwebtoken'); // JSON Web Token for authentication\r\n+const { Client } = require('pg'); // PostgreSQL client\r\n+const authMiddleware = require('./middleware/authMiddleware'); // Custom authentication middleware\r\n+const cors = require('cors'); // For handling CORS\r\n+\r\n+// PostgreSQL client configuration\r\n+const db = new Client({\r\n+  user: 'postgres',\r\n+  host: 'localhost',\r\n+  database: 'trustasitter',\r\n+  password: 'Senha00!',\r\n+  port: 5432,\r\n+});\r\n+\r\n+// Connect to PostgreSQL\r\n+db.connect()\r\n+  .then(() => console.log('Connected to PostgreSQL'))\r\n+  .catch(err => console.error('Connection error', err.stack));\r\n+\r\n+// Middleware to parse JSON requests\r\n+app.use(express.json());\r\n+app.use(cors());\r\n+\r\n+/* -----------------------------------\r\n+   Babysitters Routes\r\n+----------------------------------- */\r\n+\r\n+// Route: Register a new babysitter\r\n+app.post('/api/babysitters/register', async (req, res) => {\r\n+  const {\r\n+    name,\r\n+    email,\r\n+    password,\r\n+    phone,\r\n+    region,\r\n+    available_days,\r\n+    available_from,\r\n+    available_to,\r\n+    about,\r\n+    rate\r\n+  } = req.body;\r\n+\r\n+  try {\r\n+    if (!name || !email || !password || !region || !available_days || !available_from || !available_to || !rate) {\r\n+      return res.status(400).json({ error: 'All required fields must be filled.' });\r\n+    }\r\n+\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+\r\n+    const query = `\r\n+      INSERT INTO babysitters\r\n+      (name, email, password, phone, region, available_days, available_from, available_to, about, rate)\r\n+      VALUES\r\n+      ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\r\n+      RETURNING id, name, email, region, created_at;\r\n+    `;\r\n+\r\n+    const values = [\r\n+      name,\r\n+      email,\r\n+      hashedPassword,\r\n+      phone,\r\n+      region,\r\n+      available_days,\r\n+      available_from,\r\n+      available_to,\r\n+      about,\r\n+      rate\r\n+    ];\r\n+\r\n+    const result = await db.query(query, values);\r\n+\r\n+    res.status(201).json({\r\n+      message: 'Babysitter registered successfully.',\r\n+      babysitter: result.rows[0]\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error registering babysitter:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: Babysitter login with JWT\r\n+app.post('/api/babysitters/login', async (req, res) => {\r\n+  const { email, password } = req.body;\r\n+\r\n+  try {\r\n+    if (!email || !password) {\r\n+      return res.status(400).json({ error: 'Email and password are required.' });\r\n+    }\r\n+\r\n+    const query = `SELECT * FROM babysitters WHERE email = $1`;\r\n+    const result = await db.query(query, [email]);\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(401).json({ error: 'Invalid email or password.' });\r\n+    }\r\n+\r\n+    const babysitter = result.rows[0];\r\n+    const isMatch = await bcrypt.compare(password, babysitter.password);\r\n+\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({ error: 'Invalid email or password.' });\r\n+    }\r\n+\r\n+    const token = jwt.sign(\r\n+      { id: babysitter.id, email: babysitter.email },\r\n+      process.env.JWT_SECRET,\r\n+      { expiresIn: '3h' }\r\n+    );\r\n+\r\n+    res.status(200).json({\r\n+      message: 'Login successful',\r\n+      token,\r\n+      babysitter: {\r\n+        id: babysitter.id,\r\n+        name: babysitter.name,\r\n+        email: babysitter.email,\r\n+        region: babysitter.region\r\n+      }\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Babysitter login error:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: Get babysitter profile (protected)\r\n+app.get('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    const query = `\r\n+      SELECT id, name, email, region, phone, available_days, available_from, available_to, about, rate, created_at\r\n+      FROM babysitters\r\n+      WHERE id = $1\r\n+    `;\r\n+    const result = await db.query(query, [req.user.id]);\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'Babysitter not found.' });\r\n+    }\r\n+\r\n+    res.status(200).json(result.rows[0]);\r\n+  } catch (error) {\r\n+    console.error('Error fetching babysitter profile:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: Update babysitter profile (protected)\r\n+app.put('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n+  const {\r\n+    name,\r\n+    email,\r\n+    phone,\r\n+    region,\r\n+    available_days,\r\n+    available_from,\r\n+    available_to,\r\n+    about,\r\n+    rate,\r\n+    password\r\n+  } = req.body;\r\n+\r\n+  try {\r\n+    const queryBabysitter = `SELECT * FROM babysitters WHERE id = $1`;\r\n+    const resultBabysitter = await db.query(queryBabysitter, [req.user.id]);\r\n+\r\n+    if (resultBabysitter.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'Babysitter not found.' });\r\n+    }\r\n+\r\n+    const updates = {\r\n+      name: name || resultBabysitter.rows[0].name,\r\n+      email: email || resultBabysitter.rows[0].email,\r\n+      phone: phone || resultBabysitter.rows[0].phone,\r\n+      region: region || resultBabysitter.rows[0].region,\r\n+      available_days: available_days || resultBabysitter.rows[0].available_days,\r\n+      available_from: available_from || resultBabysitter.rows[0].available_from,\r\n+      available_to: available_to || resultBabysitter.rows[0].available_to,\r\n+      about: about || resultBabysitter.rows[0].about,\r\n+      rate: rate || resultBabysitter.rows[0].rate\r\n+    };\r\n+\r\n+    let hashedPassword = resultBabysitter.rows[0].password;\r\n+    if (password) {\r\n+      hashedPassword = await bcrypt.hash(password, 10);\r\n+    }\r\n+\r\n+    const queryUpdate = `\r\n+      UPDATE babysitters\r\n+      SET name = $1, email = $2, phone = $3, region = $4,\r\n+          available_days = $5, available_from = $6, available_to = $7,\r\n+          about = $8, rate = $9, password = $10\r\n+      WHERE id = $11\r\n+      RETURNING id, name, email, region, phone, available_days, available_from, available_to, about, rate, created_at;\r\n+    `;\r\n+\r\n+    const values = [\r\n+      updates.name,\r\n+      updates.email,\r\n+      updates.phone,\r\n+      updates.region,\r\n+      updates.available_days,\r\n+      updates.available_from,\r\n+      updates.available_to,\r\n+      updates.about,\r\n+      updates.rate,\r\n+      hashedPassword,\r\n+      req.user.id\r\n+    ];\r\n+\r\n+    const result = await db.query(queryUpdate, values);\r\n+\r\n+    res.status(200).json({\r\n+      message: 'Babysitter profile updated successfully.',\r\n+      babysitter: result.rows[0]\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error updating babysitter profile:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: Delete babysitter account (protected, must have no bookings)\r\n+app.delete('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    // Check if babysitter has related bookings\r\n+    const bookingCheck = await db.query(\r\n+      `SELECT id FROM bookings WHERE babysitter_id = $1`,\r\n+      [req.user.id]\r\n+    );\r\n+\r\n+    if (bookingCheck.rows.length > 0) {\r\n+      return res.status(400).json({\r\n+        error: 'You must cancel all bookings before deleting your account.'\r\n+      });\r\n+    }\r\n+\r\n+    // Delete babysitter\r\n+    const result = await db.query(\r\n+      `DELETE FROM babysitters WHERE id = $1 RETURNING id`,\r\n+      [req.user.id]\r\n+    );\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'Babysitter not found.' });\r\n+    }\r\n+\r\n+    res.status(200).json({ message: 'Babysitter account deleted successfully.' });\r\n+  } catch (error) {\r\n+    console.error('Error deleting babysitter account:', error.message);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+/* -----------------------------------\r\n+   Users Routes\r\n+----------------------------------- */\r\n+\r\n+// Route: Register a new user\r\n+app.post('/api/users/register', async (req, res) => {\r\n+  const { name, email, password } = req.body;\r\n+\r\n+  try {\r\n+    if (!name || !email || !password) {\r\n+      return res.status(400).json({ error: 'Name, email, and password are required.' });\r\n+    }\r\n+\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+\r\n+    const query = `\r\n+      INSERT INTO users (name, email, password)\r\n+      VALUES ($1, $2, $3)\r\n+      RETURNING id, name, email, created_at;\r\n+    `;\r\n+\r\n+    const values = [name, email, hashedPassword];\r\n+    const result = await db.query(query, values);\r\n+\r\n+    res.status(201).json({\r\n+      message: 'User registered successfully.',\r\n+      user: result.rows[0]\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error registering user:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: User login with JWT\r\n+app.post('/api/users/login', async (req, res) => {\r\n+  const { email, password } = req.body;\r\n+\r\n+  try {\r\n+    if (!email || !password) {\r\n+      return res.status(400).json({ error: 'Email and password are required.' });\r\n+    }\r\n+\r\n+    const query = `SELECT * FROM users WHERE email = $1`;\r\n+    const result = await db.query(query, [email]);\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(401).json({ error: 'Invalid email or password.' });\r\n+    }\r\n+\r\n+    const user = result.rows[0];\r\n+    const isMatch = await bcrypt.compare(password, user.password);\r\n+\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({ error: 'Invalid email or password.' });\r\n+    }\r\n+\r\n+    const token = jwt.sign(\r\n+      { id: user.id, email: user.email },\r\n+      process.env.JWT_SECRET,\r\n+      { expiresIn: '3h' }\r\n+    );\r\n+\r\n+    res.status(200).json({\r\n+      message: 'Login successful',\r\n+      token,\r\n+      user: {\r\n+        id: user.id,\r\n+        name: user.name,\r\n+        email: user.email,\r\n+        created_at: user.created_at\r\n+      }\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('User login error:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: Get logged-in user profile (protected)\r\n+app.get('/api/users/profile', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    const query = `SELECT id, name, email, created_at FROM users WHERE id = $1`;\r\n+    const result = await db.query(query, [req.user.id]);\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n+    }\r\n+\r\n+    res.status(200).json(result.rows[0]);\r\n+  } catch (error) {\r\n+    console.error('Profile fetch error:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: Update user profile (protected)\r\n+app.put('/api/users/profile', authMiddleware, async (req, res) => {\r\n+  const { name, email, password } = req.body;\r\n+\r\n+  try {\r\n+    const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n+    const resultUser = await db.query(queryUser, [req.user.id]);\r\n+\r\n+    if (resultUser.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n+    }\r\n+\r\n+    const updates = {\r\n+      name: name || resultUser.rows[0].name,\r\n+      email: email || resultUser.rows[0].email\r\n+    };\r\n+\r\n+    let hashedPassword = resultUser.rows[0].password;\r\n+    if (password) {\r\n+      hashedPassword = await bcrypt.hash(password, 10);\r\n+    }\r\n+\r\n+    const queryUpdate = `\r\n+      UPDATE users\r\n+      SET name = $1, email = $2, password = $3\r\n+      WHERE id = $4\r\n+      RETURNING id, name, email, created_at;\r\n+    `;\r\n+\r\n+    const values = [updates.name, updates.email, hashedPassword, req.user.id];\r\n+    const result = await db.query(queryUpdate, values);\r\n+\r\n+    res.status(200).json({\r\n+      message: 'Profile updated successfully.',\r\n+      user: result.rows[0]\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error updating profile:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: Delete user account (protected, must have no bookings)\r\n+app.delete('/api/users/profile', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    // Check if user has related bookings\r\n+    const bookingCheck = await db.query(\r\n+      `SELECT id FROM bookings WHERE user_id = $1`,\r\n+      [req.user.id]\r\n+    );\r\n+\r\n+    if (bookingCheck.rows.length > 0) {\r\n+      return res.status(400).json({\r\n+        error: 'You must cancel all bookings before deleting your account.'\r\n+      });\r\n+    }\r\n+\r\n+    // Delete user\r\n+    const result = await db.query(\r\n+      `DELETE FROM users WHERE id = $1 RETURNING id`,\r\n+      [req.user.id]\r\n+    );\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n+    }\r\n+\r\n+    res.status(200).json({ message: 'User account deleted successfully.' });\r\n+  } catch (error) {\r\n+    console.error('Error deleting user account:', error.message);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: Get all users (protected)\r\n+app.get('/api/users', authMiddleware, async (req, res) => {\r\n+  try {\r\n+    const query = `SELECT id, name, email, created_at FROM users ORDER BY id ASC`;\r\n+    const result = await db.query(query);\r\n+\r\n+    res.status(200).json(result.rows);\r\n+  } catch (error) {\r\n+    console.error('Error fetching users:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: Universal login (users or babysitters)\r\n+app.post('/api/login', async (req, res) => {\r\n+  const { email, password } = req.body;\r\n+\r\n+  try {\r\n+    if (!email || !password) {\r\n+      return res.status(400).json({ error: 'Email and password are required.' });\r\n+    }\r\n+\r\n+    // First try to find in users\r\n+    const userQuery = `SELECT * FROM users WHERE email = $1`;\r\n+    const userResult = await db.query(userQuery, [email]);\r\n+\r\n+    if (userResult.rows.length > 0) {\r\n+      const user = userResult.rows[0];\r\n+      const isMatch = await bcrypt.compare(password, user.password);\r\n+      if (!isMatch) {\r\n+        return res.status(401).json({ error: 'Invalid email or password.' });\r\n+      }\r\n+\r\n+      const token = jwt.sign(\r\n+        { id: user.id, email: user.email, role: 'user' },\r\n+        process.env.JWT_SECRET,\r\n+        { expiresIn: '3h' }\r\n+      );\r\n+\r\n+      return res.status(200).json({\r\n+        message: 'Login successful',\r\n+        token,\r\n+        role: 'user',\r\n+        user: {\r\n+          id: user.id,\r\n+          name: user.name,\r\n+          email: user.email,\r\n+          created_at: user.created_at\r\n+        }\r\n+      });\r\n+    }\r\n+\r\n+    // If not found, try babysitters\r\n+    const babysitterQuery = `SELECT * FROM babysitters WHERE email = $1`;\r\n+    const babysitterResult = await db.query(babysitterQuery, [email]);\r\n+\r\n+    if (babysitterResult.rows.length > 0) {\r\n+      const babysitter = babysitterResult.rows[0];\r\n+      const isMatch = await bcrypt.compare(password, babysitter.password);\r\n+      if (!isMatch) {\r\n+        return res.status(401).json({ error: 'Invalid email or password.' });\r\n+      }\r\n+\r\n+      const token = jwt.sign(\r\n+        { id: babysitter.id, email: babysitter.email, role: 'babysitter' },\r\n+        process.env.JWT_SECRET,\r\n+        { expiresIn: '3h' }\r\n+      );\r\n+\r\n+      return res.status(200).json({\r\n+        message: 'Login successful',\r\n+        token,\r\n+        role: 'babysitter',\r\n+        user: {\r\n+          id: babysitter.id,\r\n+          name: babysitter.name,\r\n+          email: babysitter.email,\r\n+          region: babysitter.region\r\n+        }\r\n+      });\r\n+    }\r\n+\r\n+    // Not found in either table\r\n+    return res.status(401).json({ error: 'Invalid email or password.' });\r\n+\r\n+  } catch (error) {\r\n+    console.error('Universal login error:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: Change babysitter password (protected)\r\n+app.put('/api/babysitters/change-password', authMiddleware, async (req, res) => {\r\n+  const { currentPassword, newPassword } = req.body;\r\n+\r\n+  try {\r\n+    if (!currentPassword || !newPassword) {\r\n+      return res.status(400).json({ error: 'Current and new password are required.' });\r\n+    }\r\n+\r\n+    // Fetch babysitter from DB\r\n+    const query = `SELECT * FROM babysitters WHERE id = $1`;\r\n+    const result = await db.query(query, [req.user.id]);\r\n+\r\n+    if (result.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'Babysitter not found.' });\r\n+    }\r\n+\r\n+    const babysitter = result.rows[0];\r\n+\r\n+    // Check if current password is correct\r\n+    const isMatch = await bcrypt.compare(currentPassword, babysitter.password);\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n+    }\r\n+\r\n+    // Hash new password\r\n+    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n+\r\n+    // Update password in DB\r\n+    const updateQuery = `\r\n+      UPDATE babysitters\r\n+      SET password = $1\r\n+      WHERE id = $2\r\n+    `;\r\n+    await db.query(updateQuery, [hashedPassword, req.user.id]);\r\n+\r\n+    res.status(200).json({ message: 'Password updated successfully.' });\r\n+  } catch (error) {\r\n+    console.error('Error changing password:', error.message);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+/* -----------------------------------\r\n+   Bookings Routes\r\n+----------------------------------- */\r\n+\r\n+// Route: Create a new booking\r\n+app.post('/api/bookings', async (req, res) => {\r\n+  const { user_id, babysitter_id, date, time_start, time_end } = req.body;\r\n+\r\n+  try {\r\n+    const query = `\r\n+      INSERT INTO bookings (user_id, babysitter_id, date, time_start, time_end)\r\n+      VALUES ($1, $2, $3, $4, $5)\r\n+      RETURNING *;\r\n+    `;\r\n+    const values = [user_id, babysitter_id, date, time_start, time_end];\r\n+    const result = await db.query(query, values);\r\n+\r\n+    res.status(201).json({\r\n+      message: 'Booking created successfully.',\r\n+      booking: result.rows[0]\r\n+    });\r\n+  } catch (error) {\r\n+    console.error('Error creating booking:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+// Route: Get all bookings for a user\r\n+app.get('/api/bookings/:user_id', async (req, res) => {\r\n+  const { user_id } = req.params;\r\n+\r\n+  try {\r\n+    const query = `\r\n+      SELECT \r\n+        b.id, b.date, b.time_start, b.time_end, b.status,\r\n+        bs.name AS babysitter_name, bs.region\r\n+      FROM bookings b\r\n+      JOIN babysitters bs ON b.babysitter_id = bs.id\r\n+      WHERE b.user_id = $1\r\n+      ORDER BY b.date ASC;\r\n+    `;\r\n+    const result = await db.query(query, [user_id]);\r\n+\r\n+    res.status(200).json(result.rows);\r\n+  } catch (error) {\r\n+    console.error('Error fetching bookings:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n+/* -----------------------------------\r\n+   Root Endpoint\r\n+----------------------------------- */\r\n+app.get('/', (req, res) => {\r\n+  res.send('TrustaSitter backend is running!');\r\n+});\r\n+\r\n+/* -----------------------------------\r\n+   Server Initialization\r\n+----------------------------------- */\r\n+const PORT = process.env.PORT || 3000;\r\n+app.listen(PORT, () => {\r\n+  console.log(`Server is running on port ${PORT}`);\r\n+});\r\n"
                },
                {
                    "date": 1751249358813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -561,593 +561,51 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-/* -----------------------------------\r\n-   Bookings Routes\r\n------------------------------------ */\r\n+// Route: Change user password (protected)\r\n+app.put('/api/users/change-password', authMiddleware, async (req, res) => {\r\n+  const { currentPassword, newPassword } = req.body;\r\n \r\n-// Route: Create a new booking\r\n-app.post('/api/bookings', async (req, res) => {\r\n-  const { user_id, babysitter_id, date, time_start, time_end } = req.body;\r\n-\r\n   try {\r\n-    const query = `\r\n-      INSERT INTO bookings (user_id, babysitter_id, date, time_start, time_end)\r\n-      VALUES ($1, $2, $3, $4, $5)\r\n-      RETURNING *;\r\n-    `;\r\n-    const values = [user_id, babysitter_id, date, time_start, time_end];\r\n-    const result = await db.query(query, values);\r\n-\r\n-    res.status(201).json({\r\n-      message: 'Booking created successfully.',\r\n-      booking: result.rows[0]\r\n-    });\r\n-  } catch (error) {\r\n-    console.error('Error creating booking:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Get all bookings for a user\r\n-app.get('/api/bookings/:user_id', async (req, res) => {\r\n-  const { user_id } = req.params;\r\n-\r\n-  try {\r\n-    const query = `\r\n-      SELECT \r\n-        b.id, b.date, b.time_start, b.time_end, b.status,\r\n-        bs.name AS babysitter_name, bs.region\r\n-      FROM bookings b\r\n-      JOIN babysitters bs ON b.babysitter_id = bs.id\r\n-      WHERE b.user_id = $1\r\n-      ORDER BY b.date ASC;\r\n-    `;\r\n-    const result = await db.query(query, [user_id]);\r\n-\r\n-    res.status(200).json(result.rows);\r\n-  } catch (error) {\r\n-    console.error('Error fetching bookings:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-/* -----------------------------------\r\n-   Root Endpoint\r\n------------------------------------ */\r\n-app.get('/', (req, res) => {\r\n-  res.send('TrustaSitter backend is running!');\r\n-});\r\n-\r\n-/* -----------------------------------\r\n-   Server Initialization\r\n------------------------------------ */\r\n-const PORT = process.env.PORT || 3000;\r\n-app.listen(PORT, () => {\r\n-  console.log(`Server is running on port ${PORT}`);\r\n-});\r\n-// Import dependencies\r\n-const express = require('express');\r\n-const app = express();\r\n-require('dotenv').config(); // Load environment variables\r\n-const bcrypt = require('bcrypt'); // For hashing passwords\r\n-const jwt = require('jsonwebtoken'); // JSON Web Token for authentication\r\n-const { Client } = require('pg'); // PostgreSQL client\r\n-const authMiddleware = require('./middleware/authMiddleware'); // Custom authentication middleware\r\n-const cors = require('cors'); // For handling CORS\r\n-\r\n-// PostgreSQL client configuration\r\n-const db = new Client({\r\n-  user: 'postgres',\r\n-  host: 'localhost',\r\n-  database: 'trustasitter',\r\n-  password: 'Senha00!',\r\n-  port: 5432,\r\n-});\r\n-\r\n-// Connect to PostgreSQL\r\n-db.connect()\r\n-  .then(() => console.log('Connected to PostgreSQL'))\r\n-  .catch(err => console.error('Connection error', err.stack));\r\n-\r\n-// Middleware to parse JSON requests\r\n-app.use(express.json());\r\n-app.use(cors());\r\n-\r\n-/* -----------------------------------\r\n-   Babysitters Routes\r\n------------------------------------ */\r\n-\r\n-// Route: Register a new babysitter\r\n-app.post('/api/babysitters/register', async (req, res) => {\r\n-  const {\r\n-    name,\r\n-    email,\r\n-    password,\r\n-    phone,\r\n-    region,\r\n-    available_days,\r\n-    available_from,\r\n-    available_to,\r\n-    about,\r\n-    rate\r\n-  } = req.body;\r\n-\r\n-  try {\r\n-    if (!name || !email || !password || !region || !available_days || !available_from || !available_to || !rate) {\r\n-      return res.status(400).json({ error: 'All required fields must be filled.' });\r\n+    if (!currentPassword || !newPassword) {\r\n+      return res.status(400).json({ error: 'Both current and new passwords are required.' });\r\n     }\r\n \r\n-    const hashedPassword = await bcrypt.hash(password, 10);\r\n-\r\n-    const query = `\r\n-      INSERT INTO babysitters\r\n-      (name, email, password, phone, region, available_days, available_from, available_to, about, rate)\r\n-      VALUES\r\n-      ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\r\n-      RETURNING id, name, email, region, created_at;\r\n-    `;\r\n-\r\n-    const values = [\r\n-      name,\r\n-      email,\r\n-      hashedPassword,\r\n-      phone,\r\n-      region,\r\n-      available_days,\r\n-      available_from,\r\n-      available_to,\r\n-      about,\r\n-      rate\r\n-    ];\r\n-\r\n-    const result = await db.query(query, values);\r\n-\r\n-    res.status(201).json({\r\n-      message: 'Babysitter registered successfully.',\r\n-      babysitter: result.rows[0]\r\n-    });\r\n-  } catch (error) {\r\n-    console.error('Error registering babysitter:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Babysitter login with JWT\r\n-app.post('/api/babysitters/login', async (req, res) => {\r\n-  const { email, password } = req.body;\r\n-\r\n-  try {\r\n-    if (!email || !password) {\r\n-      return res.status(400).json({ error: 'Email and password are required.' });\r\n-    }\r\n-\r\n-    const query = `SELECT * FROM babysitters WHERE email = $1`;\r\n-    const result = await db.query(query, [email]);\r\n-\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(401).json({ error: 'Invalid email or password.' });\r\n-    }\r\n-\r\n-    const babysitter = result.rows[0];\r\n-    const isMatch = await bcrypt.compare(password, babysitter.password);\r\n-\r\n-    if (!isMatch) {\r\n-      return res.status(401).json({ error: 'Invalid email or password.' });\r\n-    }\r\n-\r\n-    const token = jwt.sign(\r\n-      { id: babysitter.id, email: babysitter.email },\r\n-      process.env.JWT_SECRET,\r\n-      { expiresIn: '3h' }\r\n-    );\r\n-\r\n-    res.status(200).json({\r\n-      message: 'Login successful',\r\n-      token,\r\n-      babysitter: {\r\n-        id: babysitter.id,\r\n-        name: babysitter.name,\r\n-        email: babysitter.email,\r\n-        region: babysitter.region\r\n-      }\r\n-    });\r\n-  } catch (error) {\r\n-    console.error('Babysitter login error:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Get babysitter profile (protected)\r\n-app.get('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n-  try {\r\n-    const query = `\r\n-      SELECT id, name, email, region, phone, available_days, available_from, available_to, about, rate, created_at\r\n-      FROM babysitters\r\n-      WHERE id = $1\r\n-    `;\r\n-    const result = await db.query(query, [req.user.id]);\r\n-\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'Babysitter not found.' });\r\n-    }\r\n-\r\n-    res.status(200).json(result.rows[0]);\r\n-  } catch (error) {\r\n-    console.error('Error fetching babysitter profile:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Update babysitter profile (protected)\r\n-app.put('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n-  const {\r\n-    name,\r\n-    email,\r\n-    phone,\r\n-    region,\r\n-    available_days,\r\n-    available_from,\r\n-    available_to,\r\n-    about,\r\n-    rate,\r\n-    password\r\n-  } = req.body;\r\n-\r\n-  try {\r\n-    const queryBabysitter = `SELECT * FROM babysitters WHERE id = $1`;\r\n-    const resultBabysitter = await db.query(queryBabysitter, [req.user.id]);\r\n-\r\n-    if (resultBabysitter.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'Babysitter not found.' });\r\n-    }\r\n-\r\n-    const updates = {\r\n-      name: name || resultBabysitter.rows[0].name,\r\n-      email: email || resultBabysitter.rows[0].email,\r\n-      phone: phone || resultBabysitter.rows[0].phone,\r\n-      region: region || resultBabysitter.rows[0].region,\r\n-      available_days: available_days || resultBabysitter.rows[0].available_days,\r\n-      available_from: available_from || resultBabysitter.rows[0].available_from,\r\n-      available_to: available_to || resultBabysitter.rows[0].available_to,\r\n-      about: about || resultBabysitter.rows[0].about,\r\n-      rate: rate || resultBabysitter.rows[0].rate\r\n-    };\r\n-\r\n-    let hashedPassword = resultBabysitter.rows[0].password;\r\n-    if (password) {\r\n-      hashedPassword = await bcrypt.hash(password, 10);\r\n-    }\r\n-\r\n-    const queryUpdate = `\r\n-      UPDATE babysitters\r\n-      SET name = $1, email = $2, phone = $3, region = $4,\r\n-          available_days = $5, available_from = $6, available_to = $7,\r\n-          about = $8, rate = $9, password = $10\r\n-      WHERE id = $11\r\n-      RETURNING id, name, email, region, phone, available_days, available_from, available_to, about, rate, created_at;\r\n-    `;\r\n-\r\n-    const values = [\r\n-      updates.name,\r\n-      updates.email,\r\n-      updates.phone,\r\n-      updates.region,\r\n-      updates.available_days,\r\n-      updates.available_from,\r\n-      updates.available_to,\r\n-      updates.about,\r\n-      updates.rate,\r\n-      hashedPassword,\r\n-      req.user.id\r\n-    ];\r\n-\r\n-    const result = await db.query(queryUpdate, values);\r\n-\r\n-    res.status(200).json({\r\n-      message: 'Babysitter profile updated successfully.',\r\n-      babysitter: result.rows[0]\r\n-    });\r\n-  } catch (error) {\r\n-    console.error('Error updating babysitter profile:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Delete babysitter account (protected, must have no bookings)\r\n-app.delete('/api/babysitters/profile', authMiddleware, async (req, res) => {\r\n-  try {\r\n-    // Check if babysitter has related bookings\r\n-    const bookingCheck = await db.query(\r\n-      `SELECT id FROM bookings WHERE babysitter_id = $1`,\r\n-      [req.user.id]\r\n-    );\r\n-\r\n-    if (bookingCheck.rows.length > 0) {\r\n-      return res.status(400).json({\r\n-        error: 'You must cancel all bookings before deleting your account.'\r\n-      });\r\n-    }\r\n-\r\n-    // Delete babysitter\r\n-    const result = await db.query(\r\n-      `DELETE FROM babysitters WHERE id = $1 RETURNING id`,\r\n-      [req.user.id]\r\n-    );\r\n-\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'Babysitter not found.' });\r\n-    }\r\n-\r\n-    res.status(200).json({ message: 'Babysitter account deleted successfully.' });\r\n-  } catch (error) {\r\n-    console.error('Error deleting babysitter account:', error.message);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-/* -----------------------------------\r\n-   Users Routes\r\n------------------------------------ */\r\n-\r\n-// Route: Register a new user\r\n-app.post('/api/users/register', async (req, res) => {\r\n-  const { name, email, password } = req.body;\r\n-\r\n-  try {\r\n-    if (!name || !email || !password) {\r\n-      return res.status(400).json({ error: 'Name, email, and password are required.' });\r\n-    }\r\n-\r\n-    const hashedPassword = await bcrypt.hash(password, 10);\r\n-\r\n-    const query = `\r\n-      INSERT INTO users (name, email, password)\r\n-      VALUES ($1, $2, $3)\r\n-      RETURNING id, name, email, created_at;\r\n-    `;\r\n-\r\n-    const values = [name, email, hashedPassword];\r\n-    const result = await db.query(query, values);\r\n-\r\n-    res.status(201).json({\r\n-      message: 'User registered successfully.',\r\n-      user: result.rows[0]\r\n-    });\r\n-  } catch (error) {\r\n-    console.error('Error registering user:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: User login with JWT\r\n-app.post('/api/users/login', async (req, res) => {\r\n-  const { email, password } = req.body;\r\n-\r\n-  try {\r\n-    if (!email || !password) {\r\n-      return res.status(400).json({ error: 'Email and password are required.' });\r\n-    }\r\n-\r\n-    const query = `SELECT * FROM users WHERE email = $1`;\r\n-    const result = await db.query(query, [email]);\r\n-\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(401).json({ error: 'Invalid email or password.' });\r\n-    }\r\n-\r\n-    const user = result.rows[0];\r\n-    const isMatch = await bcrypt.compare(password, user.password);\r\n-\r\n-    if (!isMatch) {\r\n-      return res.status(401).json({ error: 'Invalid email or password.' });\r\n-    }\r\n-\r\n-    const token = jwt.sign(\r\n-      { id: user.id, email: user.email },\r\n-      process.env.JWT_SECRET,\r\n-      { expiresIn: '3h' }\r\n-    );\r\n-\r\n-    res.status(200).json({\r\n-      message: 'Login successful',\r\n-      token,\r\n-      user: {\r\n-        id: user.id,\r\n-        name: user.name,\r\n-        email: user.email,\r\n-        created_at: user.created_at\r\n-      }\r\n-    });\r\n-  } catch (error) {\r\n-    console.error('User login error:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Get logged-in user profile (protected)\r\n-app.get('/api/users/profile', authMiddleware, async (req, res) => {\r\n-  try {\r\n-    const query = `SELECT id, name, email, created_at FROM users WHERE id = $1`;\r\n-    const result = await db.query(query, [req.user.id]);\r\n-\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'User not found.' });\r\n-    }\r\n-\r\n-    res.status(200).json(result.rows[0]);\r\n-  } catch (error) {\r\n-    console.error('Profile fetch error:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Update user profile (protected)\r\n-app.put('/api/users/profile', authMiddleware, async (req, res) => {\r\n-  const { name, email, password } = req.body;\r\n-\r\n-  try {\r\n+    // Get the user\r\n     const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n     const resultUser = await db.query(queryUser, [req.user.id]);\r\n \r\n     if (resultUser.rows.length === 0) {\r\n       return res.status(404).json({ error: 'User not found.' });\r\n     }\r\n \r\n-    const updates = {\r\n-      name: name || resultUser.rows[0].name,\r\n-      email: email || resultUser.rows[0].email\r\n-    };\r\n+    const user = resultUser.rows[0];\r\n \r\n-    let hashedPassword = resultUser.rows[0].password;\r\n-    if (password) {\r\n-      hashedPassword = await bcrypt.hash(password, 10);\r\n+    // Compare current password\r\n+    const isMatch = await bcrypt.compare(currentPassword, user.password);\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n     }\r\n \r\n+    // Hash new password\r\n+    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n+\r\n+    // Update password\r\n     const queryUpdate = `\r\n       UPDATE users\r\n-      SET name = $1, email = $2, password = $3\r\n-      WHERE id = $4\r\n-      RETURNING id, name, email, created_at;\r\n+      SET password = $1\r\n+      WHERE id = $2\r\n     `;\r\n+    await db.query(queryUpdate, [hashedPassword, req.user.id]);\r\n \r\n-    const values = [updates.name, updates.email, hashedPassword, req.user.id];\r\n-    const result = await db.query(queryUpdate, values);\r\n-\r\n-    res.status(200).json({\r\n-      message: 'Profile updated successfully.',\r\n-      user: result.rows[0]\r\n-    });\r\n+    res.status(200).json({ message: 'Password updated successfully.' });\r\n   } catch (error) {\r\n-    console.error('Error updating profile:', error);\r\n+    console.error('Error changing password:', error);\r\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n-// Route: Delete user account (protected, must have no bookings)\r\n-app.delete('/api/users/profile', authMiddleware, async (req, res) => {\r\n-  try {\r\n-    // Check if user has related bookings\r\n-    const bookingCheck = await db.query(\r\n-      `SELECT id FROM bookings WHERE user_id = $1`,\r\n-      [req.user.id]\r\n-    );\r\n-\r\n-    if (bookingCheck.rows.length > 0) {\r\n-      return res.status(400).json({\r\n-        error: 'You must cancel all bookings before deleting your account.'\r\n-      });\r\n-    }\r\n-\r\n-    // Delete user\r\n-    const result = await db.query(\r\n-      `DELETE FROM users WHERE id = $1 RETURNING id`,\r\n-      [req.user.id]\r\n-    );\r\n-\r\n-    if (result.rows.length === 0) {\r\n-      return res.status(404).json({ error: 'User not found.' });\r\n-    }\r\n-\r\n-    res.status(200).json({ message: 'User account deleted successfully.' });\r\n-  } catch (error) {\r\n-    console.error('Error deleting user account:', error.message);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Get all users (protected)\r\n-app.get('/api/users', authMiddleware, async (req, res) => {\r\n-  try {\r\n-    const query = `SELECT id, name, email, created_at FROM users ORDER BY id ASC`;\r\n-    const result = await db.query(query);\r\n-\r\n-    res.status(200).json(result.rows);\r\n-  } catch (error) {\r\n-    console.error('Error fetching users:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n-// Route: Universal login (users or babysitters)\r\n-app.post('/api/login', async (req, res) => {\r\n-  const { email, password } = req.body;\r\n-\r\n-  try {\r\n-    if (!email || !password) {\r\n-      return res.status(400).json({ error: 'Email and password are required.' });\r\n-    }\r\n-\r\n-    // First try to find in users\r\n-    const userQuery = `SELECT * FROM users WHERE email = $1`;\r\n-    const userResult = await db.query(userQuery, [email]);\r\n-\r\n-    if (userResult.rows.length > 0) {\r\n-      const user = userResult.rows[0];\r\n-      const isMatch = await bcrypt.compare(password, user.password);\r\n-      if (!isMatch) {\r\n-        return res.status(401).json({ error: 'Invalid email or password.' });\r\n-      }\r\n-\r\n-      const token = jwt.sign(\r\n-        { id: user.id, email: user.email, role: 'user' },\r\n-        process.env.JWT_SECRET,\r\n-        { expiresIn: '3h' }\r\n-      );\r\n-\r\n-      return res.status(200).json({\r\n-        message: 'Login successful',\r\n-        token,\r\n-        role: 'user',\r\n-        user: {\r\n-          id: user.id,\r\n-          name: user.name,\r\n-          email: user.email,\r\n-          created_at: user.created_at\r\n-        }\r\n-      });\r\n-    }\r\n-\r\n-    // If not found, try babysitters\r\n-    const babysitterQuery = `SELECT * FROM babysitters WHERE email = $1`;\r\n-    const babysitterResult = await db.query(babysitterQuery, [email]);\r\n-\r\n-    if (babysitterResult.rows.length > 0) {\r\n-      const babysitter = babysitterResult.rows[0];\r\n-      const isMatch = await bcrypt.compare(password, babysitter.password);\r\n-      if (!isMatch) {\r\n-        return res.status(401).json({ error: 'Invalid email or password.' });\r\n-      }\r\n-\r\n-      const token = jwt.sign(\r\n-        { id: babysitter.id, email: babysitter.email, role: 'babysitter' },\r\n-        process.env.JWT_SECRET,\r\n-        { expiresIn: '3h' }\r\n-      );\r\n-\r\n-      return res.status(200).json({\r\n-        message: 'Login successful',\r\n-        token,\r\n-        role: 'babysitter',\r\n-        user: {\r\n-          id: babysitter.id,\r\n-          name: babysitter.name,\r\n-          email: babysitter.email,\r\n-          region: babysitter.region\r\n-        }\r\n-      });\r\n-    }\r\n-\r\n-    // Not found in either table\r\n-    return res.status(401).json({ error: 'Invalid email or password.' });\r\n-\r\n-  } catch (error) {\r\n-    console.error('Universal login error:', error);\r\n-    res.status(500).json({ error: 'Internal server error' });\r\n-  }\r\n-});\r\n-\r\n /* -----------------------------------\r\n    Bookings Routes\r\n ----------------------------------- */\r\n \r\n"
                },
                {
                    "date": 1751278870514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -604,8 +604,52 @@\n     res.status(500).json({ error: 'Internal server error' });\r\n   }\r\n });\r\n \r\n+// Route: Update user password (protected)\r\n+app.put('/api/users/profile/password', authMiddleware, async (req, res) => {\r\n+  const { currentPassword, newPassword } = req.body;\r\n+\r\n+  try {\r\n+    if (!currentPassword || !newPassword) {\r\n+      return res.status(400).json({ error: 'Current and new password are required.' });\r\n+    }\r\n+\r\n+    // Fetch user\r\n+    const queryUser = `SELECT * FROM users WHERE id = $1`;\r\n+    const resultUser = await db.query(queryUser, [req.user.id]);\r\n+\r\n+    if (resultUser.rows.length === 0) {\r\n+      return res.status(404).json({ error: 'User not found.' });\r\n+    }\r\n+\r\n+    const user = resultUser.rows[0];\r\n+\r\n+    // Verify current password\r\n+    const isMatch = await bcrypt.compare(currentPassword, user.password);\r\n+    if (!isMatch) {\r\n+      return res.status(401).json({ error: 'Current password is incorrect.' });\r\n+    }\r\n+\r\n+    // Hash new password\r\n+    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n+\r\n+    // Update password\r\n+    const queryUpdate = `\r\n+      UPDATE users\r\n+      SET password = $1\r\n+      WHERE id = $2\r\n+      RETURNING id;\r\n+    `;\r\n+    await db.query(queryUpdate, [hashedPassword, req.user.id]);\r\n+\r\n+    res.status(200).json({ message: 'Password updated successfully.' });\r\n+  } catch (error) {\r\n+    console.error('Error updating password:', error);\r\n+    res.status(500).json({ error: 'Internal server error' });\r\n+  }\r\n+});\r\n+\r\n /* -----------------------------------\r\n    Bookings Routes\r\n ----------------------------------- */\r\n \r\n"
                },
                {
                    "date": 1751280935556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -323,8 +323,9 @@\n \r\n     res.status(200).json({\r\n       message: 'Login successful',\r\n       token,\r\n+      role: 'user',\r\n       user: {\r\n         id: user.id,\r\n         name: user.name,\r\n         email: user.email,\r\n"
                },
                {
                    "date": 1751280978457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,8 +116,9 @@\n \r\n     res.status(200).json({\r\n       message: 'Login successful',\r\n       token,\r\n+      role: 'babysitter',\r\n       babysitter: {\r\n         id: babysitter.id,\r\n         name: babysitter.name,\r\n         email: babysitter.email,\r\n"
                },
                {
                    "date": 1751281083745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n     res.status(200).json({\r\n       message: 'Login successful',\r\n       token,\r\n       role: 'babysitter',\r\n-      babysitter: {\r\n+      user: {\r\n         id: babysitter.id,\r\n         name: babysitter.name,\r\n         email: babysitter.email,\r\n         region: babysitter.region\r\n"
                }
            ],
            "date": 1750481102624,
            "name": "Commit-0",
            "content": "const express = require('express');\r\nconst app = express();\r\n\r\nconst { Client } = require('pg');\r\n\r\nconst db = new Client({\r\n  user: 'postgres',\r\n  host: 'localhost',\r\n  database: 'trustasitter',\r\n  password: 'Senha00!',\r\n  port: 5432,\r\n});\r\n\r\ndb.connect()\r\n  .then(() => console.log('Connected to PostgreSQL ✅'))\r\n  .catch(err => console.error('Connection error ❌', err.stack));\r\n\r\napp.use(express.json());\r\n\r\napp.get('/', (req, res) => {\r\n  res.send('TrustaSitter backend is running!');\r\n});\r\n\r\nconst PORT = process.env.PORT || 3000;\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running on port ${PORT}`);\r\n});\r\n"
        }
    ]
}